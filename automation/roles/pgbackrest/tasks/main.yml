---
# Automatic setup of the backup configuration based on the selected cloud provider.
# if 'cloud_provider' is 'aws', 'gcp', 'azure', 'digitalocean'.
- ansible.builtin.import_tasks: auto_conf.yml
  when:
    - cloud_provider | default('') | length > 0
    - pgbackrest_auto_conf | default(true) | bool # to be able to disable auto backup settings
  tags: pgbackrest, pgbackrest_conf

- name: Gather package facts
  ansible.builtin.package_facts:
    manager: auto
  when: ansible_facts.packages is not defined
  check_mode: false

- name: Add repositories, if it wasn't done yet
  ansible.builtin.import_role:
    name: vitabaks.autobase.add_repository
    allow_duplicates: false
  tags: pgbackrest, pgbackrest_install

- name: Install pgbackrest
  ansible.builtin.package:
    name: pgbackrest
    state: present
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  environment: "{{ proxy_env | default({}) }}"
  when: "'pgbackrest' not in ansible_facts.packages"
  tags: pgbackrest, pgbackrest_install

- block:
    - name: Ensure log directory exists
      ansible.builtin.file:
        path: "{{ item.value }}"
        state: directory
        owner: postgres
        group: postgres
        mode: "0755"
      loop: "{{ pgbackrest_conf.global | default([], true) }}"
      when: item.option | default('') == 'log-path'
      loop_control:
        label: "{{ item.value }}"

    - name: Ensure repo directory exists
      ansible.builtin.file:
        path: "{{ item.value }}"
        state: directory
        owner: postgres
        group: postgres
        mode: "0750"
      loop: "{{ pgbackrest_conf.global | default([], true) }}"
      when:
        - item.option | default('') == 'repo1-path'
        - pgbackrest_repo_type | lower == 'posix'
        - pgbackrest_repo_host | length < 1
      loop_control:
        label: "{{ item.value }}"

    - name: Ensure spool directory exists
      ansible.builtin.file:
        path: "{{ item.value }}"
        state: directory
        owner: postgres
        group: postgres
        mode: "0750"
      loop: "{{ pgbackrest_conf.global | default([], true) }}"
      when: item.option | default('') == 'spool-path'
      loop_control:
        label: "{{ item.value }}"

    - name: Ensure config directory exists
      ansible.builtin.file:
        path: "{{ pgbackrest_conf_file | dirname }}"
        state: directory
        owner: postgres
        group: postgres
        mode: "0750"

    - name: "Generate conf file {{ pgbackrest_conf_file }}"
      ansible.builtin.template:
        src: pgbackrest.conf.j2
        dest: "{{ pgbackrest_conf_file }}"
        owner: postgres
        group: postgres
        mode: "0644"
  when:
    - "'postgres_cluster' in group_names"
    - pgbackrest_conf is defined
  tags: pgbackrest, pgbackrest_conf

# Dedicated pgbackrest server (if "repo_host" is set)
- block:
    - name: Ensure log directory exists
      ansible.builtin.file:
        path: "{{ item.value }}"
        state: directory
        owner: "{{ pgbackrest_repo_user }}"
        group: "{{ pgbackrest_repo_user }}"
        mode: "0755"
      loop: "{{ pgbackrest_server_conf.global | default([]) }}"
      when: item.option | default('') == 'log-path'
      loop_control:
        label: "{{ item.value }}"

    - name: Ensure repo directory exists
      ansible.builtin.file:
        path: "{{ item.value }}"
        state: directory
        owner: "{{ pgbackrest_repo_user }}"
        group: "{{ pgbackrest_repo_user }}"
        mode: "0750"
      loop: "{{ pgbackrest_server_conf.global | default([]) }}"
      when: item.option | default('') == 'repo1-path'
      loop_control:
        label: "{{ item.value }}"

    - name: Ensure config directory exists
      ansible.builtin.file:
        path: "{{ pgbackrest_conf_file | dirname }}"
        state: directory
        owner: "{{ pgbackrest_repo_user }}"
        group: "{{ pgbackrest_repo_user }}"
        mode: "0750"

    - name: Ensure stanza config directory exists
      ansible.builtin.file:
        path: "{{ pgbackrest_conf_file | dirname }}/conf.d"
        state: directory
        owner: "{{ pgbackrest_repo_user }}"
        group: "{{ pgbackrest_repo_user }}"
        mode: "0750"

    - name: "Generate global conf file {{ pgbackrest_conf_file }}"
      ansible.builtin.template:
        src: pgbackrest.server.conf.j2
        dest: "{{ pgbackrest_conf_file }}"
        owner: "{{ pgbackrest_repo_user }}"
        group: "{{ pgbackrest_repo_user }}"
        mode: "0644"

    - name: "Generate stanza conf file {{ pgbackrest_conf_file | dirname }}/conf.d/{{ pgbackrest_stanza }}.conf"
      ansible.builtin.template:
        src: pgbackrest.server.stanza.conf.j2
        dest: "{{ pgbackrest_conf_file | dirname }}/conf.d/{{ pgbackrest_stanza }}.conf"
        owner: "{{ pgbackrest_repo_user }}"
        group: "{{ pgbackrest_repo_user }}"
        mode: "0644"
  when:
    - "'pgbackrest' in group_names"
    - pgbackrest_server_conf is defined
    - pgbackrest_repo_host is defined
    - pgbackrest_repo_host | length > 0
  tags: pgbackrest, pgbackrest_conf

# if 'pgbackrest_repo_host' or 'backup-standby' are specified
- ansible.builtin.import_tasks: ssh_keys.yml
  when:
    - (pgbackrest_repo_host is defined and pgbackrest_repo_host | length > 0) or
      (pgbackrest_conf.global | selectattr('option', 'equalto', 'backup-standby') | map(attribute='value') | list | last | default('') == 'y')
    - not ansible_check_mode
  tags: pgbackrest, pgbackrest_ssh_keys

- ansible.builtin.import_tasks: cron.yml
  when:
    - pgbackrest_cron_jobs is defined
    - pgbackrest_cron_jobs | length > 0
  tags: pgbackrest, pgbackrest_cron
# - import_tasks: bootstrap_script.yml
#  when:
#    - patroni_cluster_bootstrap_method is defined
#    - patroni_cluster_bootstrap_method == "pgbackrest"
#    - "'postgres_cluster' in group_names"
#  tags: pgbackrest, pgbackrest_bootstrap_script
