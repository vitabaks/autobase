---
- block:
    - name: Make sure that the python3-cryptography package is present
      ansible.builtin.package:
        name: python3-cryptography
        state: present
      register: pack_status
      until: pack_status is success
      delay: 5
      retries: 3

    # For the possibility of re-generation of certificates
    - name: Clean up existing certificates (if any)
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ generate_tls_privatekey_path | default(tls_privatekey_path | default('/etc/tls/server.key')) }}"
        - "{{ generate_tls_cert_path | default(tls_cert_path | default('/etc/tls/server.crt')) }}"
        - "{{ generate_tls_ca_cert_path | default(tls_ca_cert_path | default('/etc/tls/ca.crt')) }}"
        - "{{ generate_tls_ca_key_path | default(tls_ca_key_path | default('/etc/tls/ca.key')) }}"
  when: inventory_hostname in groups[tls_group_name | default('postgres_cluster')]
  tags: tls, tls_cert_generate

- block:
    - name: "Generate subjectAltName entries for all hosts"
      ansible.builtin.set_fact:
        generated_subject_alt_name: >-
          {{
            (
              ansible_play_hosts | map('extract', hostvars, 'ansible_hostname') | map('regex_replace', '^', 'DNS:') | list +
              ansible_play_hosts | map('extract', hostvars, 'ansible_fqdn') | map('regex_replace', '^', 'DNS:') | list +
              ansible_play_hosts | map('extract', hostvars, 'inventory_hostname') | map('regex_replace', '^', 'IP:') | list +
              ['DNS:localhost', 'IP:127.0.0.1']
            ) | unique | join(',')
          }}
      when: tls_subject_alt_name | default('') | length < 1

    - name: "Display Certificate subjectAltName future value"
      ansible.builtin.debug:
        msg: "SubjectAltName = {{ tls_subject_alt_name | default(generated_subject_alt_name) }}"

    ######## Generate CA ########
    - name: "Ensure TLS directory exist"
      ansible.builtin.file:
        path: "{{ generate_tls_privatekey_path | default(tls_privatekey_path | default('/etc/tls/server.key')) | dirname }}"
        state: directory
        owner: "root"
        group: "root"
        mode: "0755"

    - name: "Generate CA private key"
      community.crypto.openssl_privatekey:
        path: "{{ generate_tls_ca_key_path | default(tls_ca_key_path | default('/etc/tls/ca.key')) }}"
        size: "{{ generate_tls_privatekey_size | default(tls_privatekey_size | default(4096)) }}"
        type: "{{ generate_tls_privatekey_type | default(tls_privatekey_type | default('RSA')) }}"

    - name: "Create CSR for CA certificate"
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ generate_tls_ca_key_path | default(tls_ca_key_path | default('/etc/tls/ca.key')) }}"
        common_name: "{{ generate_tls_ca_common_name | default(tls_ca_common_name | default('Autobase CA')) }}"
        use_common_name_for_san: false
        basic_constraints:
          - "CA:TRUE"
        basic_constraints_critical: true
        key_usage:
          - keyCertSign
        key_usage_critical: true
      register: ca_csr

    - name: "Create self-signed CA certificate from CSR"
      community.crypto.x509_certificate:
        path: "{{ generate_tls_ca_cert_path | default(tls_ca_cert_path | default('/etc/tls/ca.crt')) }}"
        csr_content: "{{ ca_csr.csr }}"
        privatekey_path: "{{ generate_tls_ca_key_path | default(tls_ca_key_path | default('/etc/tls/ca.key')) }}"
        provider: "{{ generate_tls_cert_provider | default(tls_cert_provider | default('selfsigned')) }}"
        selfsigned_not_after: "+{{ generate_tls_cert_valid_days | default(tls_cert_valid_days | default(3650)) }}d"
        selfsigned_not_before: "-1d"

    ######## Generate Server cert/key ########
    - name: "Create server private key"
      community.crypto.openssl_privatekey:
        path: "{{ generate_tls_privatekey_path | default(tls_privatekey_path | default('/etc/tls/server.key')) }}"
        size: "{{ generate_tls_privatekey_size | default(tls_privatekey_size | default(4096)) }}"
        type: "{{ generate_tls_privatekey_type | default(tls_privatekey_type | default('RSA')) }}"

    - name: "Create server CSR"
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ generate_tls_privatekey_path | default(tls_privatekey_path | default('/etc/tls/server.key')) }}"
        common_name: "{{ generate_tls_common_name | default(tls_common_name | default(patroni_cluster_name)) }}"
        key_usage:
          - digitalSignature
          - keyEncipherment
          - dataEncipherment
        extended_key_usage:
          - clientAuth
          - serverAuth
        subject:
          O: "Autobase"
        subject_alt_name: "{{ tls_subject_alt_name | default(generated_subject_alt_name) }}"
      register: csr

    - name: "Sign server certificate with the CA"
      community.crypto.x509_certificate_pipe:
        csr_content: "{{ csr.csr }}"
        provider: ownca
        ownca_path: "{{ generate_tls_ca_cert_path | default(tls_ca_cert_path | default('/etc/tls/ca.crt')) }}"
        ownca_privatekey_path: "{{ generate_tls_ca_key_path | default(tls_ca_key_path | default('/etc/tls/ca.key')) }}"
        ownca_not_after: +{{ generate_tls_cert_valid_days | default(tls_cert_valid_days | default(3650)) }}d
        ownca_not_before: "-1d"
      register: certificate

    - name: "Write server certificate"
      ansible.builtin.copy:
        dest: "{{ generate_tls_cert_path | default(tls_cert_path | default('/etc/tls/server.crt')) }}"
        content: "{{ certificate.certificate }}"
  when: inventory_hostname == groups[tls_group_name | default('master')][0]
  tags: tls, tls_cert_generate
