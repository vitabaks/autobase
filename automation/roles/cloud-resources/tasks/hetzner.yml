---
# Dependencies
- name: Install Python dependencies
  block:
    - name: Ensure that 'python3-pip' package is present on controlling host
      ansible.builtin.command: which pip3
      register: pip3_check
      failed_when: false
      changed_when: false

    - name: Clean dnf cache
      ansible.builtin.command: dnf clean all
      when:
        - pip3_check.rc != 0
        - ansible_os_family == "RedHat"

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      when:
        - pip3_check.rc != 0
        - ansible_os_family == "Debian"

    - name: Install 'python3-pip' package on controlling host
      ansible.builtin.package:
        name: python3-pip
        state: present
      register: package_status
      until: package_status is success
      delay: 10
      retries: 3
      when:
        - pip3_check.rc != 0
        - ansible_distribution != "MacOSX"

    - name: Ensure that 'hcloud' dependency is present on controlling host
      ansible.builtin.pip:
        name: hcloud
        executable: pip3
        extra_args: --user
      become: false
      vars:
        ansible_become: false
      run_once: true
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
        PIP_BREAK_SYSTEM_PACKAGES: "1"
  delegate_to: 127.0.0.1
  run_once: true

# SSH key
- block:
    # Delete the temporary ssh key from the cloud (if exists)
    - name: "Hetzner Cloud: Remove temporary SSH key '{{ ssh_key_name }}' from cloud (if any)"
      hetzner.hcloud.ssh_key:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        name: "{{ ssh_key_name }}"
        state: absent
      when:
        - ssh_key_name is defined
        - tmp_ssh_key_name is defined
        - ssh_key_name == tmp_ssh_key_name

    # if ssh_key_name and ssh_key_content is specified, add this ssh key to the cloud
    - name: "Hetzner Cloud: Add SSH key '{{ ssh_key_name }}' to cloud"
      hetzner.hcloud.ssh_key:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        name: "{{ ssh_key_name }}"
        public_key: "{{ ssh_key_content }}"
        state: present
      when:
        - ssh_key_name | length > 0
        - ssh_key_content | length > 0

    # if ssh_key_name is specified
    - name: "Hetzner Cloud: Gather information about SSH key '{{ ssh_key_name }}'"
      hetzner.hcloud.ssh_key_info:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        name: "{{ ssh_key_name }}"
      register: ssh_keys
      when: ssh_key_name | length > 0

    # Stop, if the ssh key is not found
    - name: "Hetzner Cloud: Fail if SSH key is not found"
      ansible.builtin.fail:
        msg: "SSH key {{ ssh_key_name }} not found. Ensure that key has been added to Hetzner Cloud."
      when:
        - ssh_key_name | length > 0
        - ssh_keys.hcloud_ssh_key_info is defined
        - ssh_keys.hcloud_ssh_key_info | length < 1

    - name: "Set variable: ssh_key_names"
      ansible.builtin.set_fact:
        ssh_key_names: "{{ ssh_key_names | default([]) + [item.name] }}"
      loop: "{{ ssh_keys.hcloud_ssh_key_info }}"
      no_log: true  # do not display the public key
      when:
        - ssh_key_name | length > 0
        - ssh_keys.hcloud_ssh_key_info is defined
        - ssh_keys.hcloud_ssh_key_info | length > 0

    # if ssh_key_name is not specified, and ssh_public_keys is not defined
    # get the names of all ssh keys
    - name: "Hetzner Cloud: Gather information about SSH keys"
      hetzner.hcloud.ssh_key_info:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
      register: ssh_keys
      when:
        - (ssh_key_name | length < 1 or ssh_key_name == (tmp_ssh_key_name | default('')))
        - (ssh_public_keys is not defined or ssh_public_keys | length < 1)

    - name: "Hetzner Cloud: Get names of all SSH keys"
      ansible.builtin.set_fact:
        ssh_key_names: "{{ ssh_key_names | default([]) + [item.name] }}"
      loop: "{{ ssh_keys.hcloud_ssh_key_info }}"
      loop_control:  # do not display the public key
        label: "{{ item.name }}"
      when:
        - (ssh_key_name | length < 1 or ssh_key_name == (tmp_ssh_key_name | default('')))
        - (ssh_public_keys is not defined or ssh_public_keys | length < 1)
  when: state == 'present'

# Create (if state is present)
- block:
    - name: "Hetzner Cloud: Gather information about network zones"
      ansible.builtin.uri:
        url: "https://api.hetzner.cloud/v1/locations"
        method: GET
        headers:
          Authorization: "Bearer {{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        return_content: true
      register: hetzner_locations_response
      failed_when: hetzner_locations_response.status != 200

    - name: "Hetzner Cloud: Extract network zone for server_location"
      ansible.builtin.set_fact:
        target_network_zone: "{{ item.network_zone }}"
      loop: "{{ hetzner_locations_response.json.locations }}"
      loop_control:
        label: "network_zone: {{ item.network_zone }}"
      when: item.name == server_location

    - name: "Hetzner Cloud: Gather information about networks"
      hetzner.hcloud.network_info:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
      register: network_info
      until: network_info is success
      delay: 5
      retries: 3

    # if server_network is specified
    - name: "Hetzner Cloud: Check if network '{{ server_network }}' exists for given location"
      ansible.builtin.fail:
        msg: "No network with name '{{ server_network }}' in location '{{ target_network_zone }}'"
      when:
        - server_network | length > 0
        - not (network_info.hcloud_network_info
            | selectattr("name", "equalto", server_network)
            | selectattr("subnetworks", "defined")
            | map(attribute='subnetworks')
            | flatten
            | selectattr("network_zone", "equalto", target_network_zone)
            | list | length > 0)

    - name: "Hetzner Cloud: Extract ip_range for network '{{ server_network }}'"
      ansible.builtin.set_fact:
        server_network_ip_range: "{{ item.ip_range }}"
      loop: "{{ network_info.hcloud_network_info }}"
      when:
        - server_network | length > 0
        - item.name == server_network
      loop_control:
        label: "{{ item.ip_range }}"

    # if server_network is not specified, create a network and subnet
    - block:
        - name: "Hetzner Cloud: Create a network '{{ hcloud_network_name | default('postgres-cluster-network-' + target_network_zone) }}'"
          hetzner.hcloud.network:
            api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
            name: "{{ hcloud_network_name | default('postgres-cluster-network-' + target_network_zone) }}"
            ip_range: "{{ hcloud_network_ip_range | default('10.0.0.0/16') }}"
            state: present

        - name: "Hetzner Cloud: Create a subnetwork in network '{{ hcloud_network_name | default('postgres-cluster-network-' + target_network_zone) }}'"
          hetzner.hcloud.subnetwork:
            api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
            network: "{{ hcloud_network_name | default('postgres-cluster-network-' + target_network_zone) }}"
            ip_range: "{{ hcloud_subnetwork_ip_range | default('10.0.1.0/24') }}"
            network_zone: "{{ target_network_zone }}"
            type: server
            state: present

        - name: "Set variable: server_network"
          ansible.builtin.set_fact:
            server_network: "{{ hcloud_network_name | default('postgres-cluster-network-' + target_network_zone) }}"
            server_network_ip_range: "{{ hcloud_network_ip_range | default('10.0.0.0/16') }}"
      when: server_network | length < 1

    # Firewall
    - name: "Hetzner Cloud: Create or modify public firewall"
      hetzner.hcloud.firewall:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        state: "present"
        name: "{{ patroni_cluster_name }}-public-firewall"
        rules: "{{ rules }}"
      vars:
        rules: >-
          {{
            ([
              {
                'description': 'SSH',
                'direction': 'in',
                'protocol': 'tcp',
                'port': ansible_ssh_port | default('22'),
                'source_ips': ssh_public_allowed_ips | default('0.0.0.0/0,::/0', true) | split(',')
              }
            ] if ssh_public_access | bool else []) +
            ([
             {
                'description': 'Netdata',
                'direction': 'in',
                'protocol': 'tcp',
                'port': netdata_port | default('19999'),
                'source_ips': netdata_public_allowed_ips | default('0.0.0.0/0,::/0', true) | split(',')
              }
            ] if netdata_install | bool and netdata_public_access | bool else []) +
            ([
              {
                'description': 'HAProxy - master',
                'direction': 'in',
                'protocol': 'tcp',
                'port': haproxy_listen_port.master,
                'source_ips': database_public_allowed_ips | default('0.0.0.0/0,::/0', true) | split(',')
              },
               {
                'description': 'HAProxy - replicas',
                'direction': 'in',
                'protocol': 'tcp',
                'port': haproxy_listen_port.replicas,
                'source_ips': database_public_allowed_ips | default('0.0.0.0/0,::/0', true) | split(',')
              },
              {
                'description': 'HAProxy - replicas_sync',
                'direction': 'in',
                'protocol': 'tcp',
                'port': haproxy_listen_port.replicas_sync,
                'source_ips': database_public_allowed_ips | default('0.0.0.0/0,::/0', true) | split(',')
              },
              {
                'description': 'HAProxy - replicas_async',
                'direction': 'in',
                'protocol': 'tcp',
                'port': haproxy_listen_port.replicas_async,
                'source_ips': database_public_allowed_ips | default('0.0.0.0/0,::/0', true) | split(',')
              }
            ] if database_public_access | bool and with_haproxy_load_balancing | bool else []) +
            ([
              {
                'description': 'PgBouncer',
                'direction': 'in',
                'protocol': 'tcp',
                'port': pgbouncer_listen_port | default('6432'),
                'source_ips': database_public_allowed_ips | default('0.0.0.0/0,::/0', true) | split(',')
              }
            ] if database_public_access | bool and (not with_haproxy_load_balancing | bool and pgbouncer_install | bool) else []) +
            ([
              {
                'description': 'PostgreSQL',
                'direction': 'in',
                'protocol': 'tcp',
                'port': postgresql_port | default('5432'),
                'source_ips': database_public_allowed_ips | default('0.0.0.0/0,::/0', true) | split(',')
              }
            ] if database_public_access | bool and (not with_haproxy_load_balancing | bool and not pgbouncer_install | bool) else [])
          }}
      when:
        - cloud_firewall | bool
        - (ssh_public_access | bool or netdata_public_access | bool or database_public_access | bool)

    - name: "Hetzner Cloud: Create or modify Postgres cluster firewall"
      hetzner.hcloud.firewall:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        state: "present"
        name: "{{ patroni_cluster_name }}-firewall"
        rules: "{{ rules }}"
      vars:
        rules: >-
          {{
            ([
              {
                'description': 'SSH',
                'direction': 'in',
                'protocol': 'tcp',
                'port': ansible_ssh_port | default('22'),
                'source_ips': [server_network_ip_range]
              }
            ]) +
            ([
             {
                'description': 'Netdata',
                'direction': 'in',
                'protocol': 'tcp',
                'port': netdata_port | default('19999'),
                'source_ips': [server_network_ip_range]
              }
            ] if netdata_install | bool else []) +
            ([
              {
                'description': 'HAProxy - master',
                'direction': 'in',
                'protocol': 'tcp',
                'port': haproxy_listen_port.master,
                'source_ips': [server_network_ip_range]
              },
               {
                'description': 'HAProxy - replicas',
                'direction': 'in',
                'protocol': 'tcp',
                'port': haproxy_listen_port.replicas,
                'source_ips': [server_network_ip_range]
              },
              {
                'description': 'HAProxy - replicas_sync',
                'direction': 'in',
                'protocol': 'tcp',
                'port': haproxy_listen_port.replicas_sync,
                'source_ips': [server_network_ip_range]
              },
              {
                'description': 'HAProxy - replicas_async',
                'direction': 'in',
                'protocol': 'tcp',
                'port': haproxy_listen_port.replicas_async,
                'source_ips': [server_network_ip_range]
              }
            ] if with_haproxy_load_balancing | bool else []) +
            ([
              {
                'description': 'PgBouncer',
                'direction': 'in',
                'protocol': 'tcp',
                'port': pgbouncer_listen_port | default('6432'),
                'source_ips': [server_network_ip_range]
              }
            ] if pgbouncer_install | bool else []) +
            ([
              {
                'description': 'PostgreSQL',
                'direction': 'in',
                'protocol': 'tcp',
                'port': postgresql_port | default('5432'),
                'source_ips': [server_network_ip_range]
              },
              {
                'description': 'Patroni',
                'direction': 'in',
                'protocol': 'tcp',
                'port': patroni_restapi_port | default('8008'),
                'source_ips': [server_network_ip_range]
              }
            ]) +
            ([
              {
                'description': 'ETCD',
                'direction': 'in',
                'protocol': 'tcp',
                'port': etcd_client_port | default('2379'),
                'source_ips': [server_network_ip_range]
              },
              {
                'description': 'ETCD',
                'direction': 'in',
                'protocol': 'tcp',
                'port': etcd_peer_port | default('2380'),
                'source_ips': [server_network_ip_range]
              }
            ] if dcs_type == 'etcd' else []) +
            ([
              {
                'description': 'Consul',
                'direction': 'in',
                'protocol': 'tcp',
                'port': consul_ports.dns | default('8600'),
                'source_ips': [server_network_ip_range]
              },
              {
                'description': 'Consul',
                'direction': 'in',
                'protocol': 'tcp',
                'port': consul_ports.http | default('8500'),
                'source_ips': [server_network_ip_range]
              },
              {
                'description': 'Consul',
                'direction': 'in',
                'protocol': 'tcp',
                'port': consul_ports.rpc | default('8400'),
                'source_ips': [server_network_ip_range]
              },
              {
                'description': 'Consul',
                'direction': 'in',
                'protocol': 'tcp',
                'port': consul_ports.serf_lan | default('8301'),
                'source_ips': [server_network_ip_range]
              },
              {
                'description': 'Consul',
                'direction': 'in',
                'protocol': 'tcp',
                'port': consul_ports.serf_wan | default('8302'),
                'source_ips': [server_network_ip_range]
              },
              {
                'description': 'Consul',
                'direction': 'in',
                'protocol': 'tcp',
                'port': consul_ports.server | default('8300'),
                'source_ips': [server_network_ip_range]
              }
            ] if dcs_type == 'consul' else [])
          }}
      when:
        - cloud_firewall | bool

    # Server and volume
    - name: "Hetzner Cloud: Create or modify server"
      hetzner.hcloud.server:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        name: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}"
        state: present
        server_type: "{{ server_type | lower }}"
        image: "{{ server_image | lower }}"
        ssh_keys: "{{ ssh_key_names }}"
        location: "{{ server_location }}"
        enable_ipv4: true
        enable_ipv6: false
        private_networks:
          - "{{ server_network }}"
        firewalls: "{{ firewalls_list }}"
        labels:
          cluster: "{{ patroni_cluster_name }}"
      loop: "{{ range(0, server_count | int) | list }}"
      loop_control:
        index_var: idx
        label: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}"
      register: server_result
      vars:
        firewalls_list: >-
          {{
            ([patroni_cluster_name + '-public-firewall'] if cloud_firewall | bool and
              (ssh_public_access | bool or netdata_public_access | bool or database_public_access | bool) else []) +
            ([patroni_cluster_name + '-firewall'] if cloud_firewall | bool else [])
          }}

    - name: "Hetzner Cloud: Add server to network '{{ server_network }}'"
      hetzner.hcloud.server_network:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        network: "{{ server_network }}"
        server: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}"
        state: present
      loop: "{{ range(0, server_count | int) | list }}"
      loop_control:
        index_var: idx
        label: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}"
      when: server_network | length > 0

    - name: "Hetzner Cloud: Create or modify volume"
      hetzner.hcloud.volume:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        name: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}-storage"
        state: present
        size: "{{ volume_size | int }}"
        server: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}"
      loop: "{{ range(0, server_count | int) | list }}"
      loop_control:
        index_var: idx
        label: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}-storage"

    # Load Balancer
    - name: "Hetzner Cloud: Create or modify Load Balancer"
      hetzner.hcloud.load_balancer:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        name: "{{ patroni_cluster_name }}-{{ item }}"
        location: "{{ server_location }}"
        load_balancer_type: "{{ hetzner_load_balancer_type | default('lb21') }}"
        algorithm: round_robin
        delete_protection: true
        state: present
        labels:
          cluster: "{{ patroni_cluster_name }}"
      loop:
        - "primary"
        - "replica"
        - "sync"
      loop_control:
        label: "{{ patroni_cluster_name }}-{{ item }}"
      when: cloud_load_balancer | bool and
            (item == 'primary' or
            (item == 'replica' and server_count | int > 1) or
            (item in ['sync', 'async'] and server_count | int > 1 and synchronous_mode | bool))

    - name: "Hetzner Cloud: Configure Load Balancer service"
      hetzner.hcloud.load_balancer_service:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        load_balancer: "{{ patroni_cluster_name }}-{{ item }}"
        listen_port: "{{ hetzner_load_balancer_port | default(database_port) }}"
        destination_port: "{{ pgbouncer_listen_port | default(6432) if pgbouncer_install | bool else postgresql_port | default(5432) }}"
        protocol: tcp
        health_check:
          protocol: http
          port: "{{ patroni_restapi_port }}"
          interval: 5
          timeout: 2
          retries: 3
          http:
            path: "/{{ item }}"
            status_codes:
              - "200"
        state: present
      loop:
        - "primary"
        - "replica"
        - "sync"
      loop_control:
        label: "{{ patroni_cluster_name }}-{{ item }}"
      vars:
        database_port: "{{ pgbouncer_listen_port | default(6432) if pgbouncer_install | bool else postgresql_port | default(5432) }}"
      when: cloud_load_balancer | bool and
            (item == 'primary' or
            (item == 'replica' and server_count | int > 1) or
            (item in ['sync', 'async'] and server_count | int > 1 and synchronous_mode | bool))

    - name: "Hetzner Cloud: Add Load Balancer to network '{{ server_network }}'"
      hetzner.hcloud.load_balancer_network:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        load_balancer: "{{ patroni_cluster_name }}-{{ item }}"
        network: "{{ server_network }}"
        state: present
      loop:
        - "primary"
        - "replica"
        - "sync"
      loop_control:
        label: "{{ patroni_cluster_name }}-{{ item }}"
      when: cloud_load_balancer | bool and
            (item == 'primary' or
            (item == 'replica' and server_count | int > 1) or
            (item in ['sync', 'async'] and server_count | int > 1 and synchronous_mode | bool))

    - name: "Hetzner Cloud: Disable public interface for Load Balancer"
      hetzner.hcloud.load_balancer:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        name: "{{ patroni_cluster_name }}-{{ item }}"
        location: "{{ server_location }}"
        disable_public_interface: true
      loop:
        - "primary"
        - "replica"
        - "sync"
      loop_control:
        label: "{{ patroni_cluster_name }}-{{ item }}"
      register: hetzner_load_balancer_disable_public
      until: hetzner_load_balancer_disable_public is success
      delay: 5
      retries: 3
      when: (cloud_load_balancer | bool and not database_public_access | bool) and
            (item == 'primary' or
            (item == 'replica' and server_count | int > 1) or
            (item in ['sync', 'async'] and server_count | int > 1 and synchronous_mode | bool))

    - name: "Hetzner Cloud: Enable public interface for Load Balancer"
      hetzner.hcloud.load_balancer:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        name: "{{ patroni_cluster_name }}-{{ item }}"
        location: "{{ server_location }}"
        disable_public_interface: false
      loop:
        - "primary"
        - "replica"
        - "sync"
      loop_control:
        label: "{{ patroni_cluster_name }}-{{ item }}"
      register: hetzner_load_balancer_enable_public
      until: hetzner_load_balancer_enable_public is success
      delay: 5
      retries: 3
      when: (cloud_load_balancer | bool and database_public_access | bool) and
            (item == 'primary' or
            (item == 'replica' and server_count | int > 1) or
            (item in ['sync', 'async'] and server_count | int > 1 and synchronous_mode | bool))

    - name: "Hetzner Cloud: Add servers to Load Balancer (use label_selector 'cluster={{ patroni_cluster_name }}')"
      hetzner.hcloud.load_balancer_target:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        load_balancer: "{{ patroni_cluster_name }}-{{ item }}"
        type: label_selector
        label_selector: "cluster={{ patroni_cluster_name }}"
        use_private_ip: true
      loop:
        - "primary"
        - "replica"
        - "sync"
      loop_control:
        label: "{{ patroni_cluster_name }}-{{ item }}"
      when: cloud_load_balancer | bool and
            (item == 'primary' or
            (item == 'replica' and server_count | int > 1) or
            (item in ['sync', 'async'] and server_count | int > 1 and synchronous_mode | bool))

    - name: "Hetzner Cloud: Gather information about Load Balancers"
      hetzner.hcloud.load_balancer_info:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
      register: hetzner_load_balancer
      until: hetzner_load_balancer is success
      delay: 5
      retries: 3
  when: state == 'present'

- name: Wait for host to be available via SSH
  ansible.builtin.wait_for:
    host: "{{ item.hcloud_server.ipv4_address }}"
    port: 22
    delay: 5
    timeout: 300
  loop: "{{ server_result.results }}"
  loop_control:
    label: "{{ item.hcloud_server.ipv4_address | default('N/A') }}"
  when:
    - server_result.results is defined
    - item.hcloud_server is defined

# Info
- name: Server info
  ansible.builtin.debug:
    msg:
      id: "{{ item.hcloud_server.id }}"
      name: "{{ item.hcloud_server.name }}"
      image: "{{ item.hcloud_server.image }}"
      type: "{{ item.hcloud_server.server_type }}"
      volume_size: "{{ volume_size }} GB"
      public_ip: "{{ item.hcloud_server.ipv4_address }}"
      private_ip: "{{ item.hcloud_server.private_networks_info[0].ip }}"
  loop: "{{ server_result.results }}"
  loop_control:
    index_var: idx
    label: "{{ item.hcloud_server.ipv4_address | default('N/A') }}"
  when:
    - server_result.results is defined
    - item.hcloud_server is defined

# Inventory
- block:
    - name: "Inventory | Initialize ip_addresses variable"
      ansible.builtin.set_fact:
        ip_addresses: []

    - name: "Inventory | Extract IP addresses"
      ansible.builtin.set_fact:
        ip_addresses: >-
          {{ ip_addresses +
            [{'public_ip': item.hcloud_server.ipv4_address,
              'private_ip': item.hcloud_server.private_networks_info[0].ip}]
          }}
      loop: "{{ server_result.results | selectattr('hcloud_server', 'defined') }}"
      loop_control:
        label: "public_ip: {{ item.hcloud_server.ipv4_address }}, private_ip: {{ item.hcloud_server.private_networks_info[0].ip }}"

    - name: "Inventory | Generate in-memory inventory"
      ansible.builtin.import_tasks: inventory.yml
  when:
    - server_result.results is defined
    - server_result.results | selectattr('hcloud_server', 'defined')

# Delete the temporary ssh key from the cloud after creating the server
- name: "Hetzner Cloud: Remove temporary SSH key {{ ssh_key_name }} from cloud"
  hetzner.hcloud.ssh_key:
    api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
    name: "{{ ssh_key_name }}"
    state: absent
  when:
    - ssh_key_name is defined
    - tmp_ssh_key_name is defined
    - ssh_key_name == tmp_ssh_key_name

# Delete (if state is absent)
- block:
    - name: "Hetzner Cloud: Delete server"
      hetzner.hcloud.server:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        name: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}"
        state: absent
        location: "{{ server_location }}"
      loop: "{{ range(0, server_count | int) | list }}"
      loop_control:
        index_var: idx
        label: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}"

    - name: "Hetzner Cloud: Delete volume"
      hetzner.hcloud.volume:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        name: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}-storage"
        state: absent
        location: "{{ server_location }}"
      loop: "{{ range(0, server_count | int) | list }}"
      loop_control:
        index_var: idx
        label: "{{ server_name | lower }}{{ '%02d' % (idx + 1) }}-storage"

    - name: "Hetzner Cloud: Disable protection for Load Balancer (if exists)"
      hetzner.hcloud.load_balancer:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        name: "{{ patroni_cluster_name }}-{{ item }}"
        location: "{{ server_location }}"
        delete_protection: false
      failed_when: false
      loop:
        - "primary"
        - "replica"
        - "sync"
      loop_control:
        label: "{{ patroni_cluster_name }}-{{ item }}"
      when: cloud_load_balancer | bool and
            (item == 'primary' or
            (item == 'replica' and server_count | int > 1) or
            (item in ['sync', 'async'] and server_count | int > 1 and synchronous_mode | bool))

    - name: "Hetzner Cloud: Delete Load Balancer"
      hetzner.hcloud.load_balancer:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        name: "{{ patroni_cluster_name }}-{{ item }}"
        location: "{{ server_location }}"
        state: absent
      loop:
        - "primary"
        - "replica"
        - "sync"
      loop_control:
        label: "{{ patroni_cluster_name }}-{{ item }}"
      when: cloud_load_balancer | bool and
            (item == 'primary' or
            (item == 'replica' and server_count | int > 1) or
            (item in ['sync', 'async'] and server_count | int > 1 and synchronous_mode | bool))

    - name: "Hetzner Cloud: Delete public firewall"
      hetzner.hcloud.firewall:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        state: "absent"
        name: "{{ patroni_cluster_name }}-public-firewall"

    - name: "Hetzner Cloud: Delete Postgres cluster firewall"
      hetzner.hcloud.firewall:
        api_token: "{{ lookup('ansible.builtin.env', 'HCLOUD_API_TOKEN') }}"
        state: "absent"
        name: "{{ patroni_cluster_name }}-firewall"
  when: state == 'absent'

...
