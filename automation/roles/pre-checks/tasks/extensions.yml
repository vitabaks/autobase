# yamllint disable rule:line-length
---
# Extension Auto-Setup: pre-checks and shared_preload_libraries

# pre-checks
- name: TimescaleDB | Checking PostgreSQL version
  run_once: true
  ansible.builtin.fail:
    msg:
      - "The current PostgreSQL version ({{ postgresql_version }}) is not supported by the TimescaleDB."
      - "PostgreSQL version must be {{ timescale_minimal_pg_version | default(12) }} or higher."
  when:
    - (enable_timescale | default(false) | bool) or (enable_timescaledb | default(false) | bool)
    - postgresql_version | string is version(timescale_minimal_pg_version | default(12) | string, '<')

- name: Timescale (pgvectorscale) | Checking PostgreSQL version
  run_once: true
  ansible.builtin.fail:
    msg:
      - "The current PostgreSQL version ({{ postgresql_version }}) is not supported by the pgvectorscale."
      - "PostgreSQL version must be {{ pgvectorscale_minimal_pg_version | default(13) }} or higher."
  when:
    - enable_pgvectorscale | default(false) | bool
    - postgresql_version | string is version(pgvectorscale_minimal_pg_version | default(13) | string, '<')

- name: Timescale (pgvectorscale) | Checking supported operating system and version
  run_once: true
  ansible.builtin.fail:
    msg:
      - "pgvectorscale is not supported on {{ ansible_distribution }} {{ ansible_distribution_release }}."
      - "Supported OS: Debian (bookworm), Ubuntu (jammy, noble)."
  when:
    - enable_pgvectorscale | default(false) | bool
    - not (ansible_os_family == "Debian" and ansible_distribution_release in ['bookworm', 'jammy', 'noble'])

- name: ParadeDB | Checking PostgreSQL version
  run_once: true
  ansible.builtin.fail:
    msg:
      - "The current PostgreSQL version ({{ postgresql_version }}) is not supported by the ParadeDB (pg_search, pg_analytics)."
      - "PostgreSQL version must be {{ paradedb_minimal_pg_version | default(14) }} or higher."
  when:
    - (enable_paradedb | default(false) | bool) or (enable_pg_search | default(false) | bool) or (enable_pg_analytics | default(false) | bool)
    - postgresql_version | string is version(paradedb_minimal_pg_version | default(14) | string, '<')

- name: ParadeDB | Checking supported operating system and version
  run_once: true
  ansible.builtin.fail:
    msg:
      - "ParadeDB (pg_search, pg_analytics) is not supported on {{ ansible_distribution }} {{ ansible_distribution_release }}."
      - "Supported OS: Debian (bookworm), Ubuntu (jammy, noble) or RedHat (8, 9)."
  when:
    - (enable_paradedb | default(false) | bool) or (enable_pg_search | default(false) | bool) or (enable_pg_analytics | default(false) | bool)
    - not (
        (ansible_os_family == "Debian" and ansible_distribution_release in ['bookworm', 'jammy', 'noble']) or
        (ansible_os_family == "RedHat" and ansible_distribution_major_version in ['8', '9'])
      )

# shared_preload_libraries
- name: Create a list of extensions
  run_once: true
  ansible.builtin.set_fact:
    extensions: >-
      {{
        (extensions | default([]))
        + (['timescaledb'] if ((enable_timescale | default(false) | bool) or (enable_timescaledb | default(false) | bool)) else [])
        + (['citus'] if ((enable_citus | default(false) | bool) and (postgresql_version | int >= 11)) else [])
        + (['pg_cron'] if (enable_pg_cron | default(false) | bool) else [])
        + (['pgaudit'] if (enable_pgaudit | default(false) | bool) else [])
        + (['pg_stat_statements'] if (enable_pg_stat_kcache | default(false) | bool) else [])
        + (['pg_stat_kcache'] if (enable_pg_stat_kcache | default(false) | bool) else [])
        + (['pg_wait_sampling'] if (enable_pg_wait_sampling | default(false) | bool) else [])
        + (['pg_partman_bgw'] if (enable_pg_partman | default(false) | bool) else [])
        + (['pg_search'] if ((enable_paradedb | default(false) | bool) or (enable_pg_search | default(false) | bool)) else [])
        + (['pg_analytics'] if ((enable_paradedb | default(false) | bool) or (enable_pg_analytics | default(false) | bool)) else [])
      }}

- name: Add required extensions to 'shared_preload_libraries' (if missing)
  run_once: true
  ansible.builtin.set_fact:
    # This complex line does several things:
    # 1. It takes the current list of PostgreSQL parameters,
    # 2. Removes any item where the option is 'shared_preload_libraries',
    # 3. Then appends a new 'shared_preload_libraries' item at the end.
    # The new value of this item is based on whether extension is already present in the old value.
    # If it is not present, it appends ',<extension_name>' to the old value. Otherwise, it leaves the value unchanged.
    postgresql_parameters: >-
      {{ postgresql_parameters | rejectattr('option', 'equalto', 'shared_preload_libraries') | list
      + [{'option': 'shared_preload_libraries', 'value': new_value}] }}
  vars:
    # Find the last item in postgresql_parameters where the option is 'shared_preload_libraries'
    shared_preload_libraries_item: >-
      {{
        postgresql_parameters
        | selectattr('option', 'equalto', 'shared_preload_libraries')
        | list | last | default({'value': ''})
      }}
    # Ensure that all required extensions are added to the 'shared_preload_libraries' parameter.
    # 1. If the 'citus' extension is not yet added to 'shared_preload_libraries', it's added to the beginning of the list.
    #    This is necessary as 'citus' needs to be first in the list as per Citus documentation.
    # 2. For all other extensions: if they are not yet added, they are appended to the end of the list.
    new_value: >-
      {{
        (item ~ ',' ~ shared_preload_libraries_item.value if item == 'citus' and item not in shared_preload_libraries_item.value.split(',') else
        (shared_preload_libraries_item.value ~ (',' if shared_preload_libraries_item.value else '')
        if item not in shared_preload_libraries_item.value.split(',') else shared_preload_libraries_item.value))
        ~ (item if item not in shared_preload_libraries_item.value.split(',') and item != 'citus' else '')
      }}
  loop: "{{ extensions | default([]) | unique }}"
  when: extensions | default([]) | length > 0

...
