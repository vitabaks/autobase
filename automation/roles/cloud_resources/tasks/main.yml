---
- name: Ensure that required variables are specified
  ansible.builtin.fail:
    msg:
      - "One or more required variables have empty values."
      - "Please specify value for variables: 'server_type', 'server_image', 'server_location'."
  when: state == 'present' and
    (server_type | length < 1 or
    (server_image | length < 1 and cloud_provider != 'azure') or
    server_location | length < 1)

# if ssh_key_name and ssh_key_content is not specified (for initial deployment)
# with each new execution of the playbook, a new temporary ssh key is created
- block:
    - name: Generate a unique temporary SSH key name
      ansible.builtin.set_fact:
        tmp_ssh_key_name: "ssh_key_tmp_{{ lookup('password', '/dev/null chars=ascii_lowercase length=7') }}"

    - name: Generate a new temporary SSH key to access the server for deployment
      ansible.builtin.user:
        name: "{{ lookup('env', 'USER') }}"
        generate_ssh_key: true
        ssh_key_bits: 2048
        ssh_key_file: ".ssh/{{ tmp_ssh_key_name }}"
        ssh_key_comment: "{{ tmp_ssh_key_name }}"
        force: true
      register: tmp_ssh_key_result

    - name: "Set variable: ssh_key_name and ssh_key_content"
      ansible.builtin.set_fact:
        ssh_key_name: "{{ tmp_ssh_key_name }}"
        ssh_key_content: "{{ tmp_ssh_key_result.ssh_public_key }}"
  when:
    - state == 'present'
    - ssh_key_name | length < 1
    - ssh_key_content | length < 1
    - not (postgresql_cluster_maintenance|default(false)|bool) # exclude for config_pgcluster.yml
    - not (cluster_scaling | default(false) | bool) # exclude for cluster scaling

# if ssh_key_name or ssh_key_content is not specified (for cluster scaling)
- block:
    - name: Generate a unique temporary SSH key name
      ansible.builtin.set_fact:
        tmp_ssh_key_name: "ssh_key_tmp_{{ lookup('password', '/dev/null chars=ascii_lowercase length=7') }}"
      when: ssh_key_name | length < 1

    - name: "Set variable: ssh_key_name"
      ansible.builtin.set_fact:
        ssh_key_name: "{{ tmp_ssh_key_name }}"
      when: tmp_ssh_key_name is defined

    # 1) if there is a .pub nearby, we read it.
    - name: Read existing SSH public key content
      ansible.builtin.slurp:
        src: "{{ (ansible_ssh_private_key_file | default('')) + '.pub' }}"
      register: pub_slurp
      when:
        - ssh_key_content | length < 1
        - ansible_ssh_private_key_file | default('') | length > 0
        - lookup('ansible.builtin.fileglob', (ansible_ssh_private_key_file | default('')) + '.pub', errors='ignore') | length > 0
      changed_when: false

    # 2) otherwise, we extract the pub from the private key.
    - name: Derive SSH public key from private key
      ansible.builtin.command: "ssh-keygen -y -f {{ ansible_ssh_private_key_file }}"
      register: pub_from_priv
      when:
        - ssh_key_content | length < 1
        - ansible_ssh_private_key_file | default('') | length > 0
        - pub_slurp is not defined
      changed_when: false

    - name: Fail if ansible_ssh_private_key_file is not defined
      ansible.builtin.fail:
        msg: "Variable 'ansible_ssh_private_key_file' is not defined. Please provide path to your SSH private key."
      when: ansible_ssh_private_key_file | default('') | length < 1

    - name: "Set variable: ssh_key_content"
      ansible.builtin.set_fact:
        ssh_key_content: >-
          {{
            (pub_slurp.content | default('') | b64decode | trim)
              if (pub_slurp is defined)
              else (pub_from_priv.stdout | trim)
          }}
      when:
        - ssh_key_content | length < 1
        - (pub_slurp is defined or pub_from_priv is defined)
  when:
    - state == 'present'
    - cluster_scaling | default(false) | bool

- name: Import tasks for AWS
  ansible.builtin.import_tasks: aws.yml
  when: cloud_provider | lower == 'aws'

- name: Import tasks for GCP
  ansible.builtin.import_tasks: gcp.yml
  when: cloud_provider | lower == 'gcp'

- name: Import tasks for Azure
  ansible.builtin.import_tasks: azure.yml
  when: cloud_provider | lower == 'azure'

- name: Import tasks for DigitalOcean
  ansible.builtin.import_tasks: digitalocean.yml
  when: cloud_provider | lower in ['digitalocean', 'do']

- name: Import tasks for Hetzner Cloud
  ansible.builtin.import_tasks: hetzner.yml
  when: cloud_provider | lower == 'hetzner'
