# yamllint disable rule:line-length
---
# reusable task file: extensions_github.yml
#
# Incoming options:
# - github_repo (e.q, 'paradedb/paradedb')
# - extension_name (e.q., 'pg_search')
# - extension_version (e.q., '0.15.18') - optional
# - search_pattern
#
# Example of a search pattern:
#      {{
#        '.*' ~ (pg_search_version | default('') ~ '/')
#        ~ (
#          ansible_os_family == 'RedHat'
#          | ternary(
#              'pg_search_' ~ (pg_version | default(postgresql_version)) ~ '.*el' ~ ansible_distribution_major_version ~ '.*' ~ (paradedb_architecture_map_rpm[ansible_architecture]) ~ '\.rpm$',
#              'postgresql-' ~ (pg_version | default(postgresql_version)) ~ '-pg-search_.*' ~ ansible_distribution_release ~ '.*' ~ (paradedb_architecture_map_dep[ansible_architecture]) ~ '\.deb$'
#          )
#        )
#      }}

- name: "Looking up {{ extension_version | default('latest available') }} {{ extension_name }} package"
  ansible.builtin.set_fact:
    # Set the download URL for the matched package (if found)
    github_package_url: "{{ match_asset.browser_download_url | default('') }}"
  vars:
    # Fetch and parse the latest 10 release entries from the GitHub API
    releases: >-
      {{ lookup('url', 'https://api.github.com/repos/' ~ github_repo ~ '/releases?per_page=10', split_lines=False) | from_json }}
    # From all available release assets, find the first one matching our pattern
    match_asset: >-
      {{
        releases
        | map(attribute='assets') | map('default', []) | flatten
        | selectattr('browser_download_url', 'match', search_pattern)
        | list | first | default({})
      }}
  check_mode: false

# If not found, show the error and continue the playbook execution
- name: "ERROR: No matching {{ extension_name }} package found for this system"
  run_once: true
  ansible.builtin.fail:
    msg: >-
      ERROR: No matching {{ extension_name }} package found.
      Search pattern: {{ search_pattern }}
  ignore_errors: true
  check_mode: false
  when: github_package_url | length == 0

# If found, download and install
- name: "Download {{ extension_name }} package ({{ github_package_url | basename }})"
  ansible.builtin.get_url:
    url: "{{ github_package_url }}"
    dest: "/tmp/{{ github_package_url | basename }}"
    timeout: 60
    validate_certs: false
  register: get_url_status
  until: get_url_status is succeeded
  retries: 3
  delay: 5
  check_mode: false
  when: github_package_url | length > 0

- name: "Install {{ extension_name }} package"
  ansible.builtin.apt:
    deb: "/tmp/{{ github_package_url | basename }}"
  register: apt_status
  until: apt_status is succeeded
  retries: 3
  delay: 5
  when: ansible_os_family == 'Debian' and github_package_url | length > 0

- name: "Install {{ extension_name }} package"
  ansible.builtin.dnf:
    name: "/tmp/{{ github_package_url | basename }}"
    state: present
  register: dnf_status
  until: dnf_status is succeeded
  retries: 3
  delay: 5
  when: ansible_os_family == 'RedHat' and github_package_url | length > 0
