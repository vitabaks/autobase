# yamllint disable rule:line-length
---
# reusable task file: extensions_github.yml
#
# Extension Auto-Setup: packages fron GitHub
#
# Incoming options:
# - github_repo (e.q, 'paradedb/paradedb')
# - extension_name (e.q., 'pgvectorscale')
# - extension_version (e.q., '0.7.1') - optional
# - search_pattern (search in assets.browser_download_url)
# - package_name_pattern - required when installing a file extracted from an archive.

- name: "Looking up {{ extension_version if extension_version | default('') | length > 0 else 'latest available' }} {{ extension_name }} package"
  ansible.builtin.set_fact:
    # Set the download URL for the matched package (if found)
    github_package_url: "{{ match_asset.browser_download_url | default('') }}"
  vars:
    # Fetch and parse the latest 10 release entries from the GitHub API
    releases: >-
      {{ lookup('url', 'https://api.github.com/repos/' ~ github_repo ~ '/releases?per_page=10', split_lines=False) | from_json }}
    # From all available release assets, find the first one matching our pattern
    match_asset: >-
      {{
        releases
        | map(attribute='assets') | map('default', []) | flatten
        | selectattr('browser_download_url', 'match', search_pattern)
        | list | first | default({})
      }}
  check_mode: false

# If not found, show the error and continue the playbook execution
- name: "ERROR: No matching {{ extension_name }} package found for this system"
  run_once: true
  ansible.builtin.fail:
    msg: >-
      ERROR: No matching {{ extension_name }} package found.
      Search pattern: {{ search_pattern }}
  ignore_errors: true
  check_mode: false
  when: github_package_url | length == 0

# If found, download it
- name: "Download {{ extension_name }} package ({{ github_package_url | basename }})"
  ansible.builtin.get_url:
    url: "{{ github_package_url }}"
    dest: "/tmp/{{ github_package_url | basename }}"
    timeout: 60
    validate_certs: false
  register: get_url_status
  until: get_url_status is succeeded
  retries: 3
  delay: 5
  when: github_package_url | length > 0

# If it's an archive, unzip it
- block:
    - name: "Unarchive {{ extension_name }} package"
      ansible.builtin.unarchive:
        src: "/tmp/{{ github_package_url | basename }}"
        dest: "/tmp/"
        remote_src: true

    - name: "Search for {{ extension_name }} package in extracted archive"
      ansible.builtin.find:
        paths: "/tmp/"
        patterns: "{{ package_name_pattern }}"
        use_regex: true
      register: extracted_package
      when: package_name_pattern is defined

    - name: "ERROR: No matching {{ extension_name }} package found"
      run_once: true
      ansible.builtin.fail:
        msg: >-
          ERROR: No matching {{ extension_name }} package found.
          Search pattern: {{ package_name_pattern }}
      ignore_errors: true
      check_mode: false
      when: extracted_package is defined and extracted_package.files | default([]) | length == 0
  when:
    - github_package_url | length > 0
    - github_package_url | regex_search('\.(zip|tar\.gz)$')

# Install
- block:
    - name: "Install {{ extension_name }} package"
      ansible.builtin.apt:
        deb: "{{ item }}"
      loop: "{{ files_to_install }}"
      loop_control:
        label: "{{ item | basename }}"
      register: apt_status
      until: apt_status is succeeded
      retries: 3
      delay: 5
      when: ansible_os_family == 'Debian' and item is search('\.deb$')

    - name: "Install {{ extension_name }} package"
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
        disable_gpg_check: true
      loop: "{{ files_to_install }}"
      loop_control:
        label: "{{ item | basename }}"
      register: dnf_status
      until: dnf_status is succeeded
      retries: 3
      delay: 5
      when: ansible_os_family == 'RedHat' and item is search('\.rpm$')
  ignore_errors: true
  vars:
    files_to_install: >-
      {{
        extracted_package.files | map(attribute='path') | reject('search', 'dbgsym') | list
        if extracted_package is defined and extracted_package.files is defined
        else ['/tmp/' ~ github_package_url | basename]
      }}
  when: github_package_url | length > 0
