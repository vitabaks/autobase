---
# Install packages from repository

# RedHat
- name: Update dnf cache
  ansible.builtin.shell: dnf clean all && dnf -y makecache
  args:
    executable: /bin/bash
  register: dnf_status
  until: dnf_status is success
  delay: 5
  retries: 3
  when:
    - installation_method == "packages"
    - ansible_os_family == "RedHat"
  environment: "{{ proxy_env | default({}) }}"
  tags: install_packages, install_postgres

- name: Install system packages
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: present
    disablerepo: "pgdg*"
  loop: "{{ system_packages | flatten }}"
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  environment: "{{ proxy_env | default({}) }}"
  when:
    - installation_method == "packages"
    - ansible_os_family == "RedHat"
    - system_packages | default('') | length > 0
  tags: install_packages

- name: Set Python alternative
  community.general.alternatives:
    name: python3
    path: /usr/bin/python{{ python_version }}
    link: /usr/bin/python3
    priority: 1100
    state: selected
  when:
    - installation_method == "packages"
    - ansible_os_family == "RedHat"
    - python_version | default('') | length > 1
  tags: install_packages

- name: Set Pip alternative
  community.general.alternatives:
    name: pip3
    path: /usr/bin/pip{{ python_version }}
    link: /usr/bin/pip3
    priority: 1100
    state: selected
  when:
    - installation_method == "packages"
    - ansible_os_family == "RedHat"
    - python_version | default('') | length > 1
    - pip_package in system_packages
  vars:
    pip_package: "python{{ python_version | default('3') }}-pip"
  tags: install_packages

# Debian
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
  register: apt_status
  until: apt_status is success
  delay: 5
  retries: 3
  environment: "{{ proxy_env | default({}) }}"
  when:
    - installation_method == "packages"
    - ansible_os_family == "Debian"

- name: Install system packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop: "{{ system_packages | flatten }}"
  register: apt_status
  until: apt_status is success
  delay: 5
  retries: 3
  environment: "{{ proxy_env | default({}) }}"
  when:
    - installation_method == "packages"
    - ansible_os_family == "Debian"
    - system_packages | default('') | length > 0
  tags: install_packages

# Install PostgreSQL from repository

# RedHat
- block:
    - name: Check if postgresql appstream module is enabled
      ansible.builtin.command: "dnf -y -C module list postgresql"
      register: postgresql_module_result
      changed_when: false

    - name: Disable postgresql appstream module
      ansible.builtin.command: "dnf -y -C module disable postgresql"
      when:
        - install_postgresql_repo | bool
        - "'[x] ' not in postgresql_module_result.stdout"

    - name: Enable postgresql appstream module
      ansible.builtin.command: "dnf -y -C module enable postgresql"
      when:
        - not install_postgresql_repo | bool
        - "'[x] ' in postgresql_module_result.stdout"

    - name: Install PostgreSQL packages
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
      loop: "{{ postgresql_packages | default([]) | flatten }}"
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
  environment: "{{ proxy_env | default({}) }}"
  when:
    - installation_method == "packages"
    - ansible_os_family == "RedHat"
    - postgresql_packages | default([]) | length > 0
  tags: install_packages, install_postgres

# Debian
- block:
    - name: Ensure postgresql database-cluster manager package
      ansible.builtin.apt:
        name: postgresql-common
        state: present
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3

    - name: Disable initializing of a default postgresql cluster
      ansible.builtin.replace:
        path: /etc/postgresql-common/createcluster.conf
        replace: create_main_cluster = false
        regexp: ^#?create_main_cluster.*$

    - name: Disable log rotation with logrotate for postgresql
      ansible.builtin.file:
        dest: /etc/logrotate.d/postgresql-common
        state: absent

    - name: Install PostgreSQL packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop: "{{ postgresql_packages | default([]) | flatten }}"
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
  environment: "{{ proxy_env | default({}) }}"
  when:
    - installation_method == "packages"
    - ansible_os_family == "Debian"
    - postgresql_packages | default([]) | length > 0
  tags: install_packages, install_postgres

# Extensions
- name: Install PostgreSQL Extensions
  ansible.builtin.import_tasks: extensions.yml
  when: installation_method == "packages"
  tags: install_packages, install_postgres, install_extensions

# Install perf (if 'install_perf' is 'true')
- name: Install perf
  ansible.builtin.import_tasks: perf.yml
  when: install_perf | bool
  tags: install_packages, install_perf, perf

# Install packages from files (optional)
- block:
    - name: Copy packages into /tmp
      ansible.builtin.copy:
        src: "{{ files_dir | default(playbook_dir ~ '/files') }}/{{ item }}"
        dest: /tmp/
      loop: "{{ packages_from_file }}"
      register: copy_packages_result

    - name: Install packages
      ansible.builtin.apt:
        force_apt_get: true
        deb: "/tmp/{{ item }}"
        state: present
      loop: "{{ packages_from_file | map('basename') | list }}"
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      when: ansible_os_family == "Debian" and copy_packages_result.changed

    - name: Install packages
      ansible.builtin.dnf:
        name: "/tmp/{{ item }}"
        state: present
      loop: "{{ packages_from_file | map('basename') | list }}"
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      when: ansible_os_family == "RedHat" and copy_packages_result.changed
  when: packages_from_file is defined and packages_from_file | length > 0
  tags: install_packages_from_file
