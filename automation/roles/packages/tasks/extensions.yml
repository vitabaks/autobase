---
# Extension Auto-Setup: packages

# TimescaleDB (if 'enable_timescale' is 'true')
- name: Install TimescaleDB package
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ timescaledb_package }}"
  vars:
    timescaledb_package: >-
      [{% if pg_version | default(postgresql_version) | int >= 11 %}
      "timescaledb-2-postgresql-{{ pg_version | default(postgresql_version) }}"
      {% else %}
      "timescaledb-postgresql-{{ pg_version | default(postgresql_version) }}"
      {% endif %}]
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: (enable_timescale | default(false) | bool) or (enable_timescaledb | default(false) | bool)
  tags: timescaledb, timescale

# Citus (if 'enable_citus' is 'true')
- name: Install Citus package
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ citus_package }}"
  vars:
    citus_package: >-
      [{% if ansible_os_family == 'Debian' and pg_version | default(postgresql_version) | int >= 14 %}
      "postgresql-{{ pg_version | default(postgresql_version) }}-citus-{{ citus_version | default('12.1') }}"
      {% elif ansible_os_family == 'Debian' and pg_version | default(postgresql_version) | int == 13 %}
      "postgresql-{{ pg_version | default(postgresql_version) }}-citus-11.3"
      {% elif ansible_os_family == 'Debian' and pg_version | default(postgresql_version) | int == 12 %}
      "postgresql-{{ pg_version | default(postgresql_version) }}-citus-10.2"
      {% elif ansible_os_family == 'Debian' and pg_version | default(postgresql_version) | int == 11 %}
      "postgresql-{{ pg_version | default(postgresql_version) }}-citus-10.0"
      {% else %}
      "citus_{{ pg_version | default(postgresql_version) }}"
      {% endif %}]
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when:
    - enable_citus | default(false) | bool
    - (ansible_os_family == 'Debian' and pg_version | default(postgresql_version) | int >= 11) or
      (ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int >= 12)
  tags: citus

# pg_repack (if 'enable_pg_repack' is 'true')
- name: Install pg_repack package
  ansible.builtin.package:
    name: "{{ pg_repack_package }}"
    state: present
  vars:
    pg_repack_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-repack
      {% else %}
      pg_repack_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pg_repack | default(false) | bool
  tags: pg_repack

# pg_cron (if 'enable_pg_cron' is 'true')
- name: Install pg_cron package
  ansible.builtin.package:
    name: "{{ pg_cron_package }}"
    state: present
  vars:
    pg_cron_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-cron
      {% else %}
      pg_cron_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pg_cron | default(false) | bool
  tags: pg_cron

# pgaudit (if 'enable_pgaudit' is 'true')
- name: Install pgaudit package
  ansible.builtin.package:
    name: "{{ pgaudit_package }}"
    state: present
  vars:
    pgaudit_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-pgaudit
      {% elif ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int >= 16 %}
      pgaudit_{{ pg_version | default(postgresql_version) }}
      {% elif ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int == 15 %}
      pgaudit17_{{ pg_version | default(postgresql_version) }}
      {% elif ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int == 14 %}
      pgaudit16_{{ pg_version | default(postgresql_version) }}
      {% elif ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int == 13 %}
      pgaudit15_{{ pg_version | default(postgresql_version) }}
      {% elif ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int == 12 %}
      pgaudit14_{{ pg_version | default(postgresql_version) }}
      {% elif ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int == 11 %}
      pgaudit13_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pgaudit | default(false) | bool
  tags: pgaudit

# postgis (if 'enable_postgis' is 'true')
- name: Install postgis package
  ansible.builtin.package:
    name: "{{ postgis_package }}"
    state: present
  vars:
    postgis_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-postgis-3
      {% elif ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int == 16 %}
      postgis34_{{ pg_version | default(postgresql_version) }}
      {% else %}
      postgis33_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_postgis | default(false) | bool
  tags: postgis

# pgrouting (if 'enable_pgrouting' is 'true')
- name: Install pgrouting package
  ansible.builtin.package:
    name: "{{ pgrouting_package }}"
    state: present
  vars:
    pgrouting_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-pgrouting
      {% else %}
      pgrouting_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pgrouting | default(false) | bool and
        not (ansible_distribution == 'Ubuntu' and ansible_distribution_version is version('20.04', '<='))
  tags: pgrouting

# pg_stat_kcache (if 'enable_pg_stat_kcache' is 'true')
- name: Install pg_stat_kcache package
  ansible.builtin.package:
    name: "{{ pg_stat_kcache_package }}"
    state: present
  vars:
    pg_stat_kcache_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-pg-stat-kcache
      {% else %}
      pg_stat_kcache_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pg_stat_kcache | default(false) | bool
  tags: pg_stat_kcache

# pg_wait_sampling (if 'enable_pg_wait_sampling' is 'true')
- name: Install pg_wait_sampling package
  ansible.builtin.package:
    name: "{{ pg_wait_sampling_package }}"
    state: present
  vars:
    pg_wait_sampling_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-pg-wait-sampling
      {% else %}
      pg_wait_sampling_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pg_wait_sampling | default(false) | bool
  tags: pg_wait_sampling

# pg_partman (if 'enable_pg_partman' is 'true')
- name: Install pg_partman package
  ansible.builtin.package:
    name: "{{ pg_partman_package }}"
    state: present
  vars:
    pg_partman_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-partman
      {% else %}
      pg_partman_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pg_partman | default(false) | bool
  tags: pg_partman

# pgvector (if 'enable_pgvector' or 'enable_paradedb' is 'true')
- name: Install pgvector package
  ansible.builtin.package:
    name: "{{ pgvector_package }}"
    state: present
  vars:
    pgvector_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-pgvector
      {% else %}
      pgvector_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when:
    - (enable_pgvector | default(false)| bool) or
      (enable_pgvectorscale | default(false) | bool) or
      (enable_paradedb | default(false) | bool)
    - (ansible_os_family == 'Debian' and pg_version | default(postgresql_version) | int >= 11) or
      (ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int >= 12)
  tags: pgvector

# pgvectorscale - https://github.com/timescale/pgvectorscale
# (if 'enable_pgvectorscale' is 'true')
- block:
    - name: Looking up the latest version of pgvectorscale
      ansible.builtin.set_fact:
        pgvectorscale_version: >-
          {{
            (lookup('url', 'https://api.github.com/repos/timescale/pgvectorscale/releases/latest', split_lines=False)
            | from_json).get('tag_name')
            | replace('v', '')
          }}
      when: pgvectorscale_version | default('latest') == 'latest'

    - name: Download pgvectorscale archive
      ansible.builtin.get_url:
        url: "{{ pgvectorscale_repo }}/{{ pgvectorscale_archive }}"
        dest: "/tmp/{{ pgvectorscale_archive }}"
        timeout: 60
        validate_certs: false

    - name: Extract pgvectorscale package
      ansible.builtin.unarchive:
        src: "/tmp/{{ pgvectorscale_archive }}"
        dest: "/tmp/"
        remote_src: true

    # Debian (only deb packages are available)
    - name: "Install pgvectorscale v{{ pgvectorscale_version }} package"
      ansible.builtin.apt:
        deb: "/tmp/{{ pgvectorscale_package }}"
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
  vars:
    pgvectorscale_repo: "https://github.com/timescale/pgvectorscale/releases/download/{{ pgvectorscale_version }}"
    pgvectorscale_archive: "pgvectorscale-{{ pgvectorscale_version }}-pg{{ pg_version | default(postgresql_version) }}-amd64.zip" # yamllint disable rule:line-length
    pgvectorscale_package: "pgvectorscale-postgresql-{{ pg_version | default(postgresql_version) }}_{{ pgvectorscale_version }}-Linux_amd64.deb" # yamllint disable rule:line-length
  when:
    - enable_pgvectorscale | default(false) | bool
    - ansible_os_family == "Debian"
    - ansible_distribution_release in ['bookworm', 'jammy', 'noble']

# ParadeDB (pg_search, pg_analytics) - https://github.com/paradedb/paradedb
# (if 'enable_paradedb' or 'enable_pg_search', 'enable_pg_analytics' is 'true')
- block:
    # pg_search
    - block:
        - name: Looking up the latest version of pg_search
          ansible.builtin.set_fact:
            pg_search_version: >-
              {{
                (lookup('url', 'https://api.github.com/repos/paradedb/paradedb/releases/latest', split_lines=False)
                | from_json).get('tag_name')
                | replace('v', '')
              }}
          when: pg_search_version | default('latest') == 'latest'

        # Debian
        - name: "Install pg_search v{{ pg_search_version }} package"
          ansible.builtin.apt:
            deb: "{{ pg_search_package }}"
          register: apt_status
          until: apt_status is success
          delay: 5
          retries: 3
          vars:
            pg_search_repo: "https://github.com/paradedb/paradedb/releases/download/v{{ pg_search_version }}/"
            pg_search_package: "{{ pg_search_repo }}/postgresql-{{ pg_version | default(postgresql_version) }}-pg-search_{{ pg_search_version }}-1PARADEDB-{{ ansible_distribution_release }}_amd64.deb" # yamllint disable rule:line-length
          when:
            - ansible_os_family == "Debian"
            - ansible_distribution_release in ['bookworm', 'jammy', 'noble']

        # RedHat
        - name: "Install pg_search v{{ pg_search_version }} package"
          ansible.builtin.dnf:
            name: "{{ pg_search_package }}"
            disable_gpg_check: true
          register: dnf_status
          until: dnf_status is success
          delay: 5
          retries: 3
          vars:
            pg_search_repo: "https://github.com/paradedb/paradedb/releases/download/v{{ pg_search_version }}/"
            pg_search_package: "{{ pg_search_repo }}/pg_search_{{ pg_version | default(postgresql_version) }}-{{ pg_search_version }}-1PARADEDB.el{{ ansible_distribution_major_version }}.x86_64.rpm" # yamllint disable rule:line-length
          when:
            - ansible_os_family == "RedHat"
            - ansible_distribution_major_version in ['8', '9']
      when: (enable_paradedb | default(false) | bool) or (enable_pg_search | default(false) | bool)

    # pg_analytics
    - block:
        - name: Looking up the latest version of pg_analytics
          ansible.builtin.set_fact:
            pg_analytics_version: >-
              {{
                (lookup('url', 'https://api.github.com/repos/paradedb/pg_analytics/releases/latest', split_lines=False)
                | from_json).get('tag_name')
                | replace('v', '')
              }}
          when: pg_analytics_version | default('latest') == 'latest'

        # Debian
        - name: "Install pg_analytics v{{ pg_analytics_version }} package"
          ansible.builtin.apt:
            deb: "{{ pg_analytics_package }}"
          register: apt_status
          until: apt_status is success
          delay: 5
          retries: 3
          vars:
            pg_analytics_repo: "https://github.com/paradedb/pg_analytics/releases/download/v{{ pg_analytics_version }}/"
            pg_analytics_package: "{{ pg_analytics_repo }}/postgresql-{{ pg_version | default(postgresql_version) }}-pg-analytics_{{ pg_analytics_version }}-1PARADEDB-{{ ansible_distribution_release }}_amd64.deb" # yamllint disable rule:line-length
          when:
            - ansible_os_family == "Debian"
            - ansible_distribution_release in ['bookworm', 'jammy', 'noble']

        # RedHat
        - name: "Install pg_analytics v{{ pg_analytics_version }} package"
          ansible.builtin.dnf:
            name: "{{ pg_analytics_package }}"
            disable_gpg_check: true
          register: dnf_status
          until: dnf_status is success
          delay: 5
          retries: 3
          vars:
            pg_analytics_repo: "https://github.com/paradedb/pg_analytics/releases/download/v{{ pg_analytics_version }}/"
            pg_analytics_package: "{{ pg_analytics_repo }}/pg_analytics_{{ pg_version | default(postgresql_version) }}-{{ pg_analytics_version }}-1PARADEDB.el{{ ansible_distribution_major_version }}.x86_64.rpm" # yamllint disable rule:line-length
          when:
            - ansible_os_family == "RedHat"
            - ansible_distribution_major_version in ['8', '9']
      when: (enable_paradedb | default(false) | bool) or (enable_pg_analytics | default(false) | bool)
  when: (enable_paradedb | default(false) | bool) or (enable_pg_search | default(false) | bool) or (enable_pg_analytics | default(false) | bool)
  tags: paradedb, pg_search, pg_analytics

# Note: We use the 'pg_version' variable to be able to reuse this code in the upgrade role.

...
