---
# Extension Auto-Setup: packages

# Note: We use the 'pg_version' variable to be able to reuse this code in the upgrade role.

# TimescaleDB (if 'enable_timescale' is 'true')
- name: Install TimescaleDB package
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ timescaledb_package }}"
  vars:
    timescaledb_package: >-
      [{% if pg_version | default(postgresql_version) | int >= 11 %}
      "timescaledb-2-postgresql-{{ pg_version | default(postgresql_version) }}"
      {% else %}
      "timescaledb-postgresql-{{ pg_version | default(postgresql_version) }}"
      {% endif %}]
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: (enable_timescale | default(false) | bool) or (enable_timescaledb | default(false) | bool)
  tags: timescaledb, timescale

# Citus (if 'enable_citus' is 'true')
- name: Install Citus package
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ citus_package }}"
  vars:
    citus_package: >-
      [{% if ansible_os_family == 'Debian' and pg_version | default(postgresql_version) | int >= 15 %}
      "postgresql-{{ pg_version | default(postgresql_version) }}-citus-{{ citus_version | default('13.0') }}"
      {% elif ansible_os_family == 'Debian' and pg_version | default(postgresql_version) | int == 14 %}
      "postgresql-{{ pg_version | default(postgresql_version) }}-citus-12.1"
      {% elif ansible_os_family == 'Debian' and pg_version | default(postgresql_version) | int == 13 %}
      "postgresql-{{ pg_version | default(postgresql_version) }}-citus-11.3"
      {% elif ansible_os_family == 'Debian' and pg_version | default(postgresql_version) | int == 12 %}
      "postgresql-{{ pg_version | default(postgresql_version) }}-citus-10.2"
      {% elif ansible_os_family == 'Debian' and pg_version | default(postgresql_version) | int == 11 %}
      "postgresql-{{ pg_version | default(postgresql_version) }}-citus-10.0"
      {% else %}
      "citus_{{ pg_version | default(postgresql_version) }}"
      {% endif %}]
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when:
    - enable_citus | default(false) | bool
    - (ansible_os_family == 'Debian' and pg_version | default(postgresql_version) | int >= 11) or
      (ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int >= 12)
    - ansible_architecture in ["x86_64", "amd64"] # no arm64 support
  tags: citus

# pg_repack (if 'enable_pg_repack' is 'true')
- name: Install pg_repack package
  ansible.builtin.package:
    name: "{{ pg_repack_package }}"
    state: present
  vars:
    pg_repack_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-repack
      {% else %}
      pg_repack_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pg_repack | default(false) | bool
  tags: pg_repack

# pg_cron (if 'enable_pg_cron' is 'true')
- name: Install pg_cron package
  ansible.builtin.package:
    name: "{{ pg_cron_package }}"
    state: present
  vars:
    pg_cron_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-cron
      {% else %}
      pg_cron_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pg_cron | default(false) | bool
  tags: pg_cron

# pgaudit (if 'enable_pgaudit' is 'true')
- name: Install pgaudit package
  ansible.builtin.package:
    name: "{{ pgaudit_package }}"
    state: present
  vars:
    pgaudit_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-pgaudit
      {% elif ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int >= 16 %}
      pgaudit_{{ pg_version | default(postgresql_version) }}
      {% elif ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int == 15 %}
      pgaudit17_{{ pg_version | default(postgresql_version) }}
      {% elif ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int == 14 %}
      pgaudit16_{{ pg_version | default(postgresql_version) }}
      {% elif ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int == 13 %}
      pgaudit15_{{ pg_version | default(postgresql_version) }}
      {% elif ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int == 12 %}
      pgaudit14_{{ pg_version | default(postgresql_version) }}
      {% elif ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int == 11 %}
      pgaudit13_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pgaudit | default(false) | bool
  tags: pgaudit

# postgis (if 'enable_postgis' is 'true')
- name: Install postgis package
  ansible.builtin.package:
    name: "{{ postgis_package }}"
    state: present
  vars:
    postgis_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-postgis-3
      {% elif ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int == 16 %}
      postgis34_{{ pg_version | default(postgresql_version) }}
      {% else %}
      postgis33_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_postgis | default(false) | bool
  tags: postgis

# pgrouting (if 'enable_pgrouting' is 'true')
- name: Install pgrouting package
  ansible.builtin.package:
    name: "{{ pgrouting_package }}"
    state: present
  vars:
    pgrouting_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-pgrouting
      {% else %}
      pgrouting_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pgrouting | default(false) | bool and
    not (ansible_distribution == 'Ubuntu' and ansible_distribution_version is version('20.04', '<='))
  tags: pgrouting

# pg_stat_kcache (if 'enable_pg_stat_kcache' is 'true')
- name: Install pg_stat_kcache package
  ansible.builtin.package:
    name: "{{ pg_stat_kcache_package }}"
    state: present
  vars:
    pg_stat_kcache_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-pg-stat-kcache
      {% else %}
      pg_stat_kcache_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pg_stat_kcache | default(false) | bool
  tags: pg_stat_kcache

# pg_wait_sampling (if 'enable_pg_wait_sampling' is 'true')
- name: Install pg_wait_sampling package
  ansible.builtin.package:
    name: "{{ pg_wait_sampling_package }}"
    state: present
  vars:
    pg_wait_sampling_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-pg-wait-sampling
      {% else %}
      pg_wait_sampling_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pg_wait_sampling | default(false) | bool
  tags: pg_wait_sampling

# pg_partman (if 'enable_pg_partman' is 'true')
- name: Install pg_partman package
  ansible.builtin.package:
    name: "{{ pg_partman_package }}"
    state: present
  vars:
    pg_partman_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-partman
      {% else %}
      pg_partman_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: enable_pg_partman | default(false) | bool
  tags: pg_partman

# pgvector (if 'enable_pgvector' or 'enable_paradedb' is 'true')
- name: Install pgvector package
  ansible.builtin.package:
    name: "{{ pgvector_package }}"
    state: present
  vars:
    pgvector_package: >-
      {% if ansible_os_family == 'Debian' %}
      postgresql-{{ pg_version | default(postgresql_version) }}-pgvector
      {% else %}
      pgvector_{{ pg_version | default(postgresql_version) }}
      {% endif %}
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when:
    - (enable_pgvector | default(false)| bool) or
      (enable_pgvectorscale | default(false) | bool) or
      (enable_paradedb | default(false) | bool)
    - (ansible_os_family == 'Debian' and pg_version | default(postgresql_version) | int >= 11) or
      (ansible_os_family == 'RedHat' and pg_version | default(postgresql_version) | int >= 12)
  tags: pgvector

# pgvectorscale - https://github.com/timescale/pgvectorscale
# (if 'enable_pgvectorscale' is 'true')
- block:
    - name: Looking up the latest version of pgvectorscale
      ansible.builtin.set_fact:
        pgvectorscale_version: >-
          {{
            (lookup('url', 'https://api.github.com/repos/timescale/pgvectorscale/releases/latest', split_lines=False)
            | from_json).get('tag_name')
            | replace('v', '')
          }}
      check_mode: false
      when: pgvectorscale_version | default('latest') == 'latest'

    - name: Download pgvectorscale archive
      ansible.builtin.get_url:
        url: "{{ pgvectorscale_repo }}/{{ pgvectorscale_archive }}"
        dest: "/tmp/{{ pgvectorscale_archive }}"
        timeout: 60
        validate_certs: false
      check_mode: false

    - name: Extract pgvectorscale package
      ansible.builtin.unarchive:
        src: "/tmp/{{ pgvectorscale_archive }}"
        dest: "/tmp/"
        remote_src: true
      check_mode: false

    # Debian (only deb packages are available)
    - name: "Install pgvectorscale v{{ pgvectorscale_version }} package"
      ansible.builtin.apt:
        deb: "/tmp/{{ pgvectorscale_package }}"
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
  vars:
    pgvectorscale_repo: "https://github.com/timescale/pgvectorscale/releases/download/{{ pgvectorscale_version }}"
    pgvectorscale_archive: "pgvectorscale-{{ pgvectorscale_version }}-pg{{ pg_version | default(postgresql_version) }}-{{ pgvectorscale_architecture_map[ansible_architecture] }}.zip" # yamllint disable rule:line-length
    pgvectorscale_package: "pgvectorscale-postgresql-{{ pg_version | default(postgresql_version) }}_{{ pgvectorscale_version }}-Linux_{{ pgvectorscale_architecture_map[ansible_architecture] }}.deb" # yamllint disable rule:line-length
  when:
    - enable_pgvectorscale | default(false) | bool
    - ansible_os_family == "Debian"
    - ansible_distribution_release in ['bookworm', 'jammy', 'noble']

# ParadeDB - https://github.com/paradedb/paradedb
# pg_search (if 'enable_paradedb' or 'enable_pg_search' is 'true')
- block:
    - name: Looking up the latest available of pg_search package
      ansible.builtin.set_fact:
        pg_search_package_url: "{{ match.browser_download_url }}"
        pg_search_version: "{{ match.release_tag }}"
      vars:
        pg_version: "{{ pg_version | default(postgresql_version) }}"
        releases: >-
          {{ lookup('url', 'https://api.github.com/repos/paradedb/paradedb/releases?per_page=10', split_lines=False) | from_json }}
        pattern: >-
          {{
            (ansible_os_family == 'RedHat')
            | ternary(
                'pg_search_' ~ pg_version ~ '.*el' ~ ansible_distribution_major_version ~ '.*' ~ ansible_architecture ~ '\\.rpm$',
                'postgresql-' ~ pg_version ~ '-pg-search_.*' ~ ansible_distribution_release ~ '.*' ~ ansible_architecture ~ '\\.deb$'
            )
          }}
        match: >-
          {{
            releases
            | map('extract', 'assets') | map('default', [])
            | zip(releases)
            | map('flatten')
            | selectattr(0, 'name', 'search', pattern)
            | map('combine', {
                'browser_download_url': attribute(0, 'browser_download_url'),
                'release_tag': attribute(1, 'tag_name')
            })
            | first
          }}
      when: pg_search_version | default('latest') == 'latest'

    - name: Download pg_search {{ pg_search_version }} package
      ansible.builtin.get_url:
        url: "{{ pg_search_package_url }}"
        dest: "/tmp/{{ pg_search_package_url | basename }}"
        timeout: 60
        validate_certs: false
      register: get_url_status
      until: get_url_status is succeeded
      retries: 3
      delay: 5

    - name: Install pg_search {{ pg_search_version }} package
      ansible.builtin.package:
        name: "/tmp/{{ pg_search_package_url | basename }}"
        state: present
      register: package_status
      until: package_status is succeeded
      retries: 3
      delay: 5
  when: enable_paradedb | default(false) | bool or pg_search | default(false) | bool
  tags: paradedb, pg_search

# pg_analytics (if 'enable_paradedb' or 'enable_pg_analytics' is 'true')
- block:
    - name: Looking up the latest available of pg_analytics package
      ansible.builtin.set_fact:
        pg_analytics_package_url: "{{ match.browser_download_url }}"
        pg_analytics_version: "{{ match.release_tag }}"
      vars:
        pg_version: "{{ pg_version | default(postgresql_version) }}"
        releases: >-
          {{ lookup('url', 'https://api.github.com/repos/paradedb/pg_analytics/releases?per_page=10', split_lines=False) | from_json }}
        pattern: >-
          {{
            (ansible_os_family == 'RedHat')
            | ternary(
                'pg_analytics_' ~ pg_version ~ '.*el' ~ ansible_distribution_major_version ~ '.*' ~ ansible_architecture ~ '\\.rpm$',
                'postgresql-' ~ pg_version ~ '-pg-analytics_.*' ~ ansible_distribution_release ~ '.*' ~ ansible_architecture ~ '\\.deb$'
            )
          }}
        match: >-
          {{
            releases
            | map('extract', 'assets') | map('default', [])
            | zip(releases)
            | map('flatten')
            | selectattr(0, 'name', 'search', pattern)
            | map('combine', {
                'browser_download_url': attribute(0, 'browser_download_url'),
                'release_tag': attribute(1, 'tag_name')
            })
            | first
          }}

    - name: Download pg_analytics {{ pg_analytics_version }} package
      ansible.builtin.get_url:
        url: "{{ pg_analytics_package_url }}"
        dest: "/tmp/{{ pg_analytics_package_url | basename }}"
        timeout: 60
        validate_certs: false
      register: get_url_status
      until: get_url_status is succeeded
      retries: 3
      delay: 5

    - name: Install pg_analytics {{ pg_analytics_version }} package
      ansible.builtin.package:
        name: "/tmp/{{ pg_analytics_package_url | basename }}"
        state: present
      register: package_status
      until: package_status is succeeded
      retries: 3
      delay: 5
  when: enable_paradedb | default(false) | bool or pg_analytics | default(false) | bool
  tags: paradedb, pg_analytics
