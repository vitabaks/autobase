---
- name: Update dnf cache
  ansible.builtin.shell: dnf clean all && dnf -y makecache
  args:
    executable: /bin/bash
  ignore_errors: true
  when: ansible_os_family == "RedHat" and not (skip_dnf_makecache | default(false) | bool)

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
  register: apt_status
  until: apt_status is success
  delay: 5
  retries: 3
  ignore_errors: true
  when: ansible_os_family == "Debian"

- name: Update all system packages
  ansible.builtin.package:
    name: "*"
    state: latest
  register: update_system_packages_debian
  until: update_system_packages_debian is success
  delay: 5
  retries: 3
  ignore_errors: true
  when: ansible_os_family == "Debian"

- name: Update all system packages
  ansible.builtin.dnf:
    name: "*"
    state: latest
    disablerepo: "pgdg*"
  register: update_system_packages_rhel
  until: update_system_packages_rhel is success
  delay: 5
  retries: 3
  ignore_errors: true
  when: ansible_os_family == "RedHat"

# Reboot (if 'reboot_host_after_update' is 'true')
- name: Check if a reboot is required
  ansible.builtin.stat:
    path: /var/run/reboot-required
  register: reboot_required_debian
  failed_when: false
  changed_when: false
  when:
    - ansible_os_family == "Debian"
    - ansible_virtualization_type not in ['container', 'docker', 'lxc', 'podman'] # exclude for containers to prevent test failures in CI.
    - reboot_host_after_update | bool

- name: Check if a reboot is required
  ansible.builtin.command: needs-restarting -r
  register: reboot_required_rhel
  failed_when: false
  changed_when: false
  when:
    - ansible_os_family == "RedHat"
    - ansible_virtualization_type not in ['container', 'docker', 'lxc', 'podman'] # exclude for containers to prevent test failures in CI.
    - reboot_host_after_update | bool

- name: Rebooting host
  ansible.builtin.reboot:
    msg: "Reboot initiated by Ansible due to required system updates"
    reboot_timeout: "{{ reboot_host_timeout | int }}"
    test_command: uptime
  register: reboot_result
  when: (reboot_required_debian.stat.exists is defined and reboot_required_debian.stat.exists) or
    (reboot_required_rhel.rc is defined and reboot_required_rhel.rc != 0)

# Set flag if any update failed
- name: "Set variable: update_system_failed"
  ansible.builtin.set_fact:
    update_system_failed: true
  when: >
    (update_system_packages_debian is defined and update_system_packages_debian is failed) or
    (update_system_packages_rhel is defined and update_system_packages_rhel is failed) or
    (update_system_packages_rhel7 is defined and update_system_packages_rhel7 is failed)
