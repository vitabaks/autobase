---
- name: Gather package facts
  ansible.builtin.package_facts:
    manager: auto
  when: ansible_facts.packages is not defined
  check_mode: false

- block:
    # Try to detect an empty disk (if 'cloud_provider' is defined)
    - name: Detect empty volume
      ansible.builtin.shell: |
        set -o pipefail;
        lsblk -e7 --output NAME,FSTYPE,TYPE --json \
          | jq -r '.blockdevices[] | select(.children == null and .fstype == null and .type == "disk") | .name'
      args:
        executable: /bin/bash
      register: lsblk_disk
      changed_when: false
      when: (cloud_provider | default('') | length > 0) and mount[0].src | length < 1

    # Show the error message, if empty volume is not detected
    - name: Empty volume is not detected
      ansible.builtin.fail:
        msg: "Whoops! The empty volume is not detected. Skip mounting."
      ignore_errors: true
      when: lsblk_disk.stdout is defined and lsblk_disk.stdout | length < 1

    # Filesystem
    - name: Create "{{ pg_data_mount_fstype | default('ext4') }}" filesystem on the disk "/dev/{{ lsblk_disk.stdout }}"
      community.general.filesystem:
        dev: "/dev/{{ lsblk_disk.stdout }}"
        fstype: "{{ pg_data_mount_fstype | default('ext4') }}"
      when:
        - (lsblk_disk.stdout is defined and lsblk_disk.stdout | length > 0)
        - ((pg_data_mount_fstype is defined and pg_data_mount_fstype != 'zfs') or
          (pg_data_mount_fstype is not defined and mount[0].fstype != 'zfs'))

    # UUID
    - name: Get UUID of the disk "/dev/{{ lsblk_disk.stdout }}"
      ansible.builtin.shell: |
        set -o pipefail;
        lsblk -no UUID /dev/{{ lsblk_disk.stdout }} | tr -d '\n'
      args:
        executable: /bin/bash
      register: lsblk_uuid
      changed_when: false
      when:
        - (lsblk_disk.stdout is defined and lsblk_disk.stdout | length > 0)
        - ((pg_data_mount_fstype is defined and pg_data_mount_fstype != 'zfs') or
          (pg_data_mount_fstype is not defined and mount[0].fstype != 'zfs'))

    - name: "Set mount variables"
      ansible.builtin.set_fact:
        mount:
          - src: "UUID={{ lsblk_uuid.stdout }}"
            path: "{{ pg_data_mount_path | default('/pgdata', true) }}"
            fstype: "{{ pg_data_mount_fstype | default('ext4', true) }}"
      when: lsblk_uuid.stdout is defined

    # Mount
    - name: Mount the filesystem
      ansible.posix.mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: "{{ item.fstype | default(pg_data_mount_fstype | default('ext4', true), true) }}"
        opts: "{{ item.opts | default('defaults,noatime') }}"
        state: "{{ item.state | default('mounted') }}"
      loop: "{{ mount }}"
      when:
        - (item.src | length > 0 and item.path | length > 0)
        - ((pg_data_mount_fstype is defined and pg_data_mount_fstype != 'zfs') or
          (pg_data_mount_fstype is not defined and item.fstype != 'zfs'))

    # ZFS Pool (if fstype is 'zfs')
    - block:
        - name: Install zfs
          ansible.builtin.apt:
            name: zfsutils-linux
            state: present
          register: package_status
          until: package_status is success
          delay: 5
          retries: 3
          when:
            - ansible_distribution == 'Ubuntu'
            - "'zfsutils-linux' not in ansible_facts.packages"

        - name: Install zfs
          ansible.builtin.apt:
            name: "{{ item }}"
            state: present
          register: package_status
          loop:
            - "linux-headers-{{ ansible_kernel }}"
            - dpkg-dev
            - zfs-dkms
            - zfsutils-linux
          until: package_status is success
          delay: 5
          retries: 3
          when:
            - ansible_distribution == 'Debian'
            - item not in ansible_facts.packages

        - block: # RedHat based
            - name: Download zfs-release
              ansible.builtin.get_url:
                url: "https://zfsonlinux.org/epel/zfs-release-2-3.el{{ ansible_distribution_major_version }}.noarch.rpm"
                dest: /tmp/zfs-release.rpm

            - name: Install zfs-release
              ansible.builtin.package:
                name: /tmp/zfs-release.rpm
                state: present
                disable_gpg_check: true
              register: package_status
              until: package_status is success
              delay: 5
              retries: 3

            - name: Install zfs
              ansible.builtin.dnf:
                name: "{{ item }}"
                state: present
              register: package_status
              until: package_status is success
              delay: 5
              retries: 3
              loop:
                - kernel-devel
                - zfs
              when: item not in ansible_facts.packages
          when: ansible_os_family == 'RedHat'

        - name: Load the ZFS module
          community.general.modprobe:
            name: zfs
            state: present

        - name: Ensure zfs is loaded at boot
          ansible.builtin.lineinfile:
            path: /etc/modules-load.d/zfs.conf
            line: zfs
            create: true

        - name: Create zpool (use {{ mount[0].src | default("/dev/" + lsblk_disk.stdout, true) }})
          ansible.builtin.command: >-
            zpool create -f
            -O compression=on
            -O atime=off
            -O recordsize=128k
            -O logbias=throughput
            -m {{ pg_data_mount_path | default(mount[0].path | default('/pgdata', true), true) }}
            pgdata {{ mount[0].src | default("/dev/" + lsblk_disk.stdout, true) }}
      when:
        - (mount[0].src | length > 0 or lsblk_disk.stdout | default('') | length > 0)
        - ((pg_data_mount_fstype is defined and pg_data_mount_fstype == 'zfs') or
          (pg_data_mount_fstype is not defined and mount[0].fstype == 'zfs'))
  tags: mount, zpool
