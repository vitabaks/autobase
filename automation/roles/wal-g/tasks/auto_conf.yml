# yamllint disable rule:line-length
---
# AWS S3 bucket (if 'cloud_provider=aws')
- name: "Set variable 'wal_g_json' for backup in AWS S3 bucket"
  ansible.builtin.set_fact:
    wal_g_json:
      - { option: "AWS_ACCESS_KEY_ID", value: "{{ WALG_AWS_ACCESS_KEY_ID | default(lookup('ansible.builtin.env', 'AWS_ACCESS_KEY_ID')) }}" }
      - { option: "AWS_SECRET_ACCESS_KEY", value: "{{ WALG_AWS_SECRET_ACCESS_KEY | default(lookup('ansible.builtin.env', 'AWS_SECRET_ACCESS_KEY')) }}" }
      - { option: "WALG_S3_PREFIX", value: "{{ WALG_S3_PREFIX | default('s3://' + (aws_s3_bucket_name | default(patroni_cluster_name + '-backup'))) }}" }
      - { option: "AWS_REGION", value: "{{ WALG_AWS_REGION | default(aws_s3_bucket_region | default(server_location)) }}" }
      - { option: "WALG_COMPRESSION_METHOD", value: "{{ WALG_COMPRESSION_METHOD | default('brotli') }}" }
      - { option: "WALG_DELTA_MAX_STEPS", value: "{{ WALG_DELTA_MAX_STEPS | default('6') }}" }
      - { option: "WALG_DOWNLOAD_CONCURRENCY", value: "{{ WALG_DOWNLOAD_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
      - { option: "WALG_PREFETCH_DIR", value: "{{ wal_g_prefetch_dir_path | default(postgresql_home_dir + '/wal-g-prefetch') }}" }
      - { option: "WALG_UPLOAD_CONCURRENCY", value: "{{ WALG_UPLOAD_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
      - { option: "WALG_UPLOAD_DISK_CONCURRENCY", value: "{{ WALG_UPLOAD_DISK_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
      - { option: "PGDATA", value: "{{ postgresql_data_dir }}" }
      - { option: "PGHOST", value: "{{ postgresql_unix_socket_dir | default('/var/run/postgresql') }}" }
      - { option: "PGPORT", value: "{{ postgresql_port | default('5432') }}" }
      - { option: "PGUSER", value: "{{ patroni_superuser_username | default('postgres') }}" }
  delegate_to: localhost
  run_once: true # noqa run-once
  no_log: true # do not output contents to the ansible log
  when: cloud_provider | default('') | lower == 'aws'

# GCS Bucket (if 'cloud_provider=gcp')
- block:
    - name: "Set variable 'wal_g_json' for backup in GCS Bucket"
      ansible.builtin.set_fact:
        wal_g_json:
          - { option: "GOOGLE_APPLICATION_CREDENTIALS", value: "{{ WALG_GS_KEY | default(postgresql_home_dir + '/gcs-key.json') }}" }
          - { option: "WALG_GS_PREFIX", value: "{{ WALG_GS_PREFIX | default('gs://' + (gcp_bucket_name | default(patroni_cluster_name + '-backup'))) }}" }
          - { option: "WALG_COMPRESSION_METHOD", value: "{{ WALG_COMPRESSION_METHOD | default('brotli') }}" }
          - { option: "WALG_DELTA_MAX_STEPS", value: "{{ WALG_DELTA_MAX_STEPS | default('6') }}" }
          - { option: "WALG_DOWNLOAD_CONCURRENCY", value: "{{ WALG_DOWNLOAD_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
          - { option: "WALG_PREFETCH_DIR", value: "{{ wal_g_prefetch_dir_path | default(postgresql_home_dir + '/wal-g-prefetch') }}" }
          - { option: "WALG_UPLOAD_CONCURRENCY", value: "{{ WALG_UPLOAD_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
          - { option: "WALG_UPLOAD_DISK_CONCURRENCY", value: "{{ WALG_UPLOAD_DISK_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
          - { option: "PGDATA", value: "{{ postgresql_data_dir }}" }
          - { option: "PGHOST", value: "{{ postgresql_unix_socket_dir | default('/var/run/postgresql') }}" }
          - { option: "PGPORT", value: "{{ postgresql_port | default('5432') }}" }
          - { option: "PGUSER", value: "{{ patroni_superuser_username | default('postgres') }}" }
      no_log: true # do not output contents to the ansible log

    # if 'gcs_key_file' is not defined, copy GCS key file from GCP_SERVICE_ACCOUNT_CONTENTS environment variable.
    - block:
        - name: "Get GCP service account contents from localhost"
          ansible.builtin.set_fact:
            gcp_service_account_contents: "{{ lookup('ansible.builtin.env', 'GCP_SERVICE_ACCOUNT_CONTENTS') }}"
          delegate_to: localhost
          run_once: true # noqa run-once
          no_log: true # do not output GCP service account contents to the ansible log

        - name: "Copy GCP service account contents to {{ WALG_GS_KEY | default(postgresql_home_dir + '/gcs-key.json') }}"
          ansible.builtin.copy:
            content: "{{ gcp_service_account_contents }}"
            dest: "{{ WALG_GS_KEY | default(postgresql_home_dir + '/gcs-key.json') }}"
            mode: "0600"
            owner: "postgres"
            group: "postgres"
          no_log: true # do not output GCP service account contents to the ansible log
      when: gcs_key_file is not defined

    # if 'gcs_key_file' is defined, copy this GCS key file.
    - name: "Copy GCS key file to {{ WALG_GS_KEY | default(postgresql_home_dir + '/gcs-key.json') }}"
      ansible.builtin.copy:
        src: "{{ gcs_key_file }}"
        dest: "{{ WALG_GS_KEY | default(postgresql_home_dir + '/gcs-key.json') }}"
        mode: "0600"
        owner: "postgres"
        group: "postgres"
      no_log: true # do not output GCP service account contents to the ansible log
      when: gcs_key_file is defined and gcs_key_file | length > 0
  when: cloud_provider | default('') | lower == 'gcp'

# Azure Blob Storage (if 'cloud_provider=azure')
- name: "Set variable 'wal_g_json' for backup in Azure Blob Storage"
  ansible.builtin.set_fact:
    wal_g_json:
      - {
          option: "AZURE_STORAGE_ACCOUNT",
          value: "{{ WALG_AZURE_STORAGE_ACCOUNT | default(azure_blob_storage_account_name | default(patroni_cluster_name | lower | replace('-', '') | truncate(24, true, ''))) }}",
        }
      - {
          option: "AZURE_STORAGE_ACCESS_KEY",
          value: "{{ WALG_AZURE_STORAGE_ACCESS_KEY | default(hostvars['localhost']['azure_storage_account_key'] | default('')) }}",
        }
      - {
          option: "WALG_AZ_PREFIX",
          value: "{{ WALG_AZ_PREFIX | default('azure://' + (azure_blob_storage_name | default(patroni_cluster_name + '-backup'))) }}",
        }
      - { option: "WALG_COMPRESSION_METHOD", value: "{{ WALG_COMPRESSION_METHOD | default('brotli') }}" }
      - { option: "WALG_DELTA_MAX_STEPS", value: "{{ WALG_DELTA_MAX_STEPS | default('6') }}" }
      - { option: "WALG_DOWNLOAD_CONCURRENCY", value: "{{ WALG_DOWNLOAD_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
      - { option: "WALG_PREFETCH_DIR", value: "{{ wal_g_prefetch_dir_path | default(postgresql_home_dir + '/wal-g-prefetch') }}" }
      - { option: "WALG_UPLOAD_CONCURRENCY", value: "{{ WALG_UPLOAD_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
      - { option: "WALG_UPLOAD_DISK_CONCURRENCY", value: "{{ WALG_UPLOAD_DISK_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
      - { option: "PGDATA", value: "{{ postgresql_data_dir }}" }
      - { option: "PGHOST", value: "{{ postgresql_unix_socket_dir | default('/var/run/postgresql') }}" }
      - { option: "PGPORT", value: "{{ postgresql_port | default('5432') }}" }
      - { option: "PGUSER", value: "{{ patroni_superuser_username | default('postgres') }}" }
  no_log: true # do not output contents to the ansible log
  when: cloud_provider | default('') | lower == 'azure'

# DigitalOcean Spaces Object Storage (if 'cloud_provider=digitalocean')
# Note: requires the Spaces access keys "AWS_ACCESS_KEY_ID" and "AWS_SECRET_ACCESS_KEY" (https://cloud.digitalocean.com/account/api/spaces)
- name: "Set variable 'wal_g_json' for backup in DigitalOcean Spaces Object Storage"
  ansible.builtin.set_fact:
    wal_g_json:
      - { option: "AWS_ACCESS_KEY_ID", value: "{{ WALG_AWS_ACCESS_KEY_ID | default(AWS_ACCESS_KEY_ID | default('')) }}" }
      - { option: "AWS_SECRET_ACCESS_KEY", value: "{{ WALG_AWS_SECRET_ACCESS_KEY | default(AWS_SECRET_ACCESS_KEY | default('')) }}" }
      - {
          option: "AWS_ENDPOINT",
          value: "{{ WALG_S3_ENDPOINT | default('https://' + (digital_ocean_spaces_region | default(server_location)) + '.digitaloceanspaces.com') }}",
        }
      - { option: "AWS_REGION", value: "{{ WALG_S3_REGION | default(digital_ocean_spaces_region | default(server_location)) }}" }
      - { option: "AWS_S3_FORCE_PATH_STYLE", value: "{{ AWS_S3_FORCE_PATH_STYLE | default(true) }}" }
      - { option: "WALG_S3_PREFIX", value: "{{ WALG_S3_PREFIX | default('s3://' + (digital_ocean_spaces_name | default(patroni_cluster_name + '-backup'))) }}" }
      - { option: "WALG_COMPRESSION_METHOD", value: "{{ WALG_COMPRESSION_METHOD | default('brotli') }}" }
      - { option: "WALG_DELTA_MAX_STEPS", value: "{{ WALG_DELTA_MAX_STEPS | default('6') }}" }
      - { option: "WALG_DOWNLOAD_CONCURRENCY", value: "{{ WALG_DOWNLOAD_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
      - { option: "WALG_PREFETCH_DIR", value: "{{ wal_g_prefetch_dir_path | default(postgresql_home_dir + '/wal-g-prefetch') }}" }
      - { option: "WALG_UPLOAD_CONCURRENCY", value: "{{ WALG_UPLOAD_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
      - { option: "WALG_UPLOAD_DISK_CONCURRENCY", value: "{{ WALG_UPLOAD_DISK_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
      - { option: "PGDATA", value: "{{ postgresql_data_dir }}" }
      - { option: "PGHOST", value: "{{ postgresql_unix_socket_dir | default('/var/run/postgresql') }}" }
      - { option: "PGPORT", value: "{{ postgresql_port | default('5432') }}" }
      - { option: "PGUSER", value: "{{ patroni_superuser_username | default('postgres') }}" }
  no_log: true # do not output contents to the ansible log
  when: cloud_provider | default('') | lower == 'digitalocean'

# Hetzner Object Storage (if 'cloud_provider=hetzner')
- name: "Set variable 'wal_g_json' for backup in AWS S3 bucket"
  ansible.builtin.set_fact:
    wal_g_json:
      - { option: "AWS_ACCESS_KEY_ID", value: "{{ WALG_AWS_ACCESS_KEY_ID | default(hetzner_object_storage_access_key | default('')) }}" }
      - { option: "AWS_SECRET_ACCESS_KEY", value: "{{ WALG_AWS_SECRET_ACCESS_KEY | default(hetzner_object_storage_secret_key | default('')) }}" }
      - {
          option: "AWS_ENDPOINT",
          value: "{{ WALG_S3_ENDPOINT | default(hetzner_object_storage_endpoint | default('https://' + (hetzner_object_storage_region | default(server_location)) + '.your-objectstorage.com')) }}",
        }
      - { option: "AWS_S3_FORCE_PATH_STYLE", value: "{{ AWS_S3_FORCE_PATH_STYLE | default(true) }}" }
      - { option: "AWS_REGION", value: "{{ WALG_S3_REGION | default(hetzner_object_storage_region | default(server_location)) }}" }
      - {
          option: "WALG_S3_PREFIX",
          value: "{{ WALG_S3_PREFIX | default('s3://' + (hetzner_object_storage_name | default(patroni_cluster_name + '-backup'))) }}",
        }
      - { option: "WALG_COMPRESSION_METHOD", value: "{{ WALG_COMPRESSION_METHOD | default('brotli') }}" }
      - { option: "WALG_DELTA_MAX_STEPS", value: "{{ WALG_DELTA_MAX_STEPS | default('6') }}" }
      - { option: "WALG_DOWNLOAD_CONCURRENCY", value: "{{ WALG_DOWNLOAD_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
      - { option: "WALG_PREFETCH_DIR", value: "{{ wal_g_prefetch_dir_path | default(postgresql_home_dir + '/wal-g-prefetch') }}" }
      - { option: "WALG_UPLOAD_CONCURRENCY", value: "{{ WALG_UPLOAD_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
      - { option: "WALG_UPLOAD_DISK_CONCURRENCY", value: "{{ WALG_UPLOAD_DISK_CONCURRENCY | default([ansible_processor_vcpus | int // 2, 1] | max) }}" }
      - { option: "PGDATA", value: "{{ postgresql_data_dir }}" }
      - { option: "PGHOST", value: "{{ postgresql_unix_socket_dir | default('/var/run/postgresql') }}" }
      - { option: "PGPORT", value: "{{ postgresql_port | default('5432') }}" }
      - { option: "PGUSER", value: "{{ patroni_superuser_username | default('postgres') }}" }
  delegate_to: localhost
  run_once: true # noqa run-once
  no_log: true # do not output contents to the ansible log
  when: cloud_provider | default('') | lower == 'hetzner'
