---
- name: config_pgcluster.yml | Configuration PostgreSQL HA Cluster (based on "Patroni")
  hosts: localhost
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always
    # set_fact: 'pgbackrest_install' to configure Postgres backups (TODO: Add the ability to configure backups in the UI)
    # Note: Applicable only for "aws", "gcp", "azure", because:
      # "digitalocean" - requires the Spaces access keys "AWS_ACCESS_KEY_ID" and "AWS_SECRET_ACCESS_KEY"
      # "hetzner" - currently, Hetzner Cloud does not provide S3 storage
    - name: "Set variable: 'pgbackrest_install' to configure Postgres backups"
      ansible.builtin.set_fact:
        pgbackrest_install: true
      when:
        - not (pgbackrest_install | bool or wal_g_install | bool)
        - cloud_provider | default('') | lower in ['aws', 'gcp', 'azure']
        - pgbackrest_auto_conf | default(true) | bool  # to be able to disable auto backup settings
      tags: always
  roles:
    - role: cloud-resources
      when: cloud_provider | default('') | length > 0
      vars:
        postgresql_cluster_maintenance: true
      tags: always

- name: config_pgcluster.yml | Check the PostgreSQL cluster state and perform pre-checks
  hosts: postgres_cluster
  become: true
  become_method: sudo
  gather_facts: true
  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"

    - name: Include system variables
      ansible.builtin.include_vars: "vars/system.yml"

    - name: Include OS-specific variables
      ansible.builtin.include_vars: "vars/{{ ansible_os_family }}.yml"

    - name: '[Prepare] Set maintenance variable'
      ansible.builtin.set_fact:
        postgresql_cluster_maintenance: true

    - name: '[Prepare] Get Patroni Cluster Leader Node'
      ansible.builtin.uri:
        url: http://{{ inventory_hostname }}:{{ patroni_restapi_port }}/leader
        status_code: 200
      register: patroni_leader_result
      changed_when: false
      failed_when: false
      check_mode: false
      environment:
        no_proxy: "{{ inventory_hostname }}"

    # Stop, if Patroni is unavailable
    - name: The Patroni cluster is unhealthy
      ansible.builtin.fail:
        msg: "Patroni is unavailable on {{ ansible_hostname }}. Please check the cluster status."
      changed_when: false
      when: patroni_leader_result is undefined or patroni_leader_result.status == -1

    - name: '[Prepare] Add host to group "primary" (in-memory inventory)'
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: primary
        is_master: true
        postgresql_exists: true
      when: hostvars[item]['patroni_leader_result']['status'] == 200
      loop: "{{ groups['postgres_cluster'] }}"
      changed_when: false
      check_mode: false

    - name: '[Prepare] Add hosts to group "secondary" (in-memory inventory)'
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: secondary
        is_master: false
        postgresql_exists: true
      when: hostvars[item]['patroni_leader_result']['status'] != 200
      loop: "{{ groups['postgres_cluster'] }}"
      changed_when: false
      check_mode: false

    - name: "Print Patroni Cluster info"
      ansible.builtin.debug:
        msg:
          - "Cluster Name: {{ patroni_cluster_name }}"
          - "Cluster Leader: {{ ansible_hostname }}"
      when: inventory_hostname in groups['primary']

    # if 'cloud_provider' is 'aws', 'gcp', or 'azure'
    # set_fact: 'pgbackrest_install' to configure Postgres backups (TODO: Add the ability to configure backups in the UI)
    - name: "Set variable: 'pgbackrest_install' to configure Postgres backups"
      ansible.builtin.set_fact:
        pgbackrest_install: true
      when:
        - not (pgbackrest_install | bool or wal_g_install | bool)
        - cloud_provider | default('') | lower in ['aws', 'gcp', 'azure']
        - pgbackrest_auto_conf | default(true) | bool  # to be able to disable auto backup settings
      tags: always

  roles:
    - role: pre-checks
      vars:
        minimal_ansible_version: 2.15.0
        timescale_minimal_pg_version: 12 # if enable_timescale is defined
  tags:
    - always

- name: config_pgcluster.yml | Configure PostgreSQL Cluster
  hosts: 'primary:secondary'
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"
  handlers:
    - ansible.builtin.import_tasks: roles/patroni/handlers/main.yml
    - ansible.builtin.import_tasks: roles/pgbouncer/handlers/main.yml
  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - name: Include system variables
      ansible.builtin.include_vars: "vars/system.yml"
      tags: always

    - name: Include OS-specific variables
      ansible.builtin.include_vars: "vars/{{ ansible_os_family }}.yml"
      tags: always

    - name: Build a firewall_ports_dynamic_var
      ansible.builtin.set_fact:
        firewall_ports_dynamic_var: "{{ firewall_ports_dynamic_var | default([]) + (firewall_allowed_tcp_ports_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when: firewall_enabled_at_boot | bool
      tags: config_firewall, firewall

    - name: Build a firewall_rules_dynamic_var
      ansible.builtin.set_fact:
        firewall_rules_dynamic_var: "{{ firewall_rules_dynamic_var | default([]) + (firewall_additional_rules_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when: firewall_enabled_at_boot | bool
      tags: firewall

    # if 'dcs_type' is 'consul'
    - name: Add a nameserver entry poining to localhost for dnsmasq
      ansible.builtin.set_fact:
        nameservers: "{{ ['127.0.0.1'] + (nameservers | default([])) }}"
      when: dcs_type == "consul" and consul_dnsmasq_enable | bool and ('127.0.0.1' not in (nameservers | default([])))

  roles:
    - role: ansible-role-firewall
      vars:
        firewall_allowed_tcp_ports: "{{ firewall_ports_dynamic_var | default([]) | unique }}"
        firewall_additional_rules: "{{ firewall_rules_dynamic_var | default([]) | unique }}"
      when: firewall_enabled_at_boot | bool
      tags: firewall

    - role: hostname
    - role: resolv_conf
    - role: etc_hosts
    - role: timezone
    - role: add-repository
    - role: packages
    - role: sudo
    - role: swap
    - role: sysctl
    - role: transparent_huge_pages
    - role: pam_limits
    - role: io-scheduler
    - role: locales
    - role: ntp
    - role: ssh-keys
    - role: copy
    - role: pgpass
    - role: cron

    - role: patroni/config

    - role: pgbouncer/config
      when: pgbouncer_install | bool

    - role: vip-manager
      when: not with_haproxy_load_balancing | bool and
        (cluster_vip is defined and cluster_vip | length > 0)

    - role: postgresql-users
      when: inventory_hostname in groups['primary']

    - role: postgresql-databases
      when: inventory_hostname in groups['primary']

    - role: postgresql-schemas
      when: inventory_hostname in groups['primary']

    - role: postgresql-privs
      when: inventory_hostname in groups['primary']

    - role: wal-g
      when: wal_g_install | bool

- name: config_pgcluster | Configure pgBackRest
  hosts: pgbackrest:postgres_cluster
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - name: Include OS-specific variables
      ansible.builtin.include_vars: "vars/{{ ansible_os_family }}.yml"
      tags: always

    # if 'cloud_provider' is 'aws', 'gcp', or 'azure'
    # set_fact: 'pgbackrest_install' to configure Postgres backups (TODO: Add the ability to configure backups in the UI)
    - name: "Set variable: 'pgbackrest_install' to configure Postgres backups"
      ansible.builtin.set_fact:
        pgbackrest_install: true
      when:
        - not (pgbackrest_install | bool or wal_g_install | bool)
        - cloud_provider | default('') | lower in ['aws', 'gcp', 'azure']
        - pgbackrest_auto_conf | default(true) | bool  # to be able to disable auto backup settings
      tags: always
  roles:
    - role: pgbackrest
      when: pgbackrest_install | bool

- name: config_pgcluster.yml | Restart patroni on secondary after config settings if need
  hosts: secondary
  serial: 1 # restart replicas one by one
  gather_facts: false
  become: true
  become_method: sudo
  any_errors_fatal: true
  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - name: Include OS-specific variables
      ansible.builtin.include_vars: "vars/{{ ansible_os_family }}.yml"
      tags: always

  tasks:
    - name: Stop read-only traffic
      ansible.builtin.include_role:
        name: update
        tasks_from: stop_traffic
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

    - name: Stop Services
      ansible.builtin.include_role:
        name: update
        tasks_from: stop_services
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

    - name: Start Services
      ansible.builtin.include_role:
        name: update
        tasks_from: start_services
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

    - name: Start read-only traffic
      ansible.builtin.include_role:
        name: update
        tasks_from: start_traffic
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0
  tags:
    - patroni_conf

- name: config_pgcluster.yml | Restart patroni on master after config settings if need
  hosts: primary
  gather_facts: false
  become: true
  become_method: sudo
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"
  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - name: Include OS-specific variables
      ansible.builtin.include_vars: "vars/{{ ansible_os_family }}.yml"
      tags: always

  tasks:
    - name: Switchover Patroni leader role
      ansible.builtin.include_role:
        name: update
        tasks_from: switchover
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

    - name: Stop read-only traffic
      ansible.builtin.include_role:
        name: update
        tasks_from: stop_traffic
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

    - name: Stop Services
      ansible.builtin.include_role:
        name: update
        tasks_from: stop_services
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

    - name: Start Services
      ansible.builtin.include_role:
        name: update
        tasks_from: start_services
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0

    - name: Start read-only traffic
      ansible.builtin.include_role:
        name: update
        tasks_from: start_traffic
      when:
        - pending_restart | bool
        - pg_pending_restart_settings | length > 0
  tags:
    - patroni_conf

- name: config_pgcluster.yml | Configure PostgreSQL Cluster and info
  hosts: primary
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - name: Include main variables
      ansible.builtin.include_vars: "vars/main.yml"
      tags: always

    - name: Include system variables
      ansible.builtin.include_vars: "vars/system.yml"
      tags: always

    - name: Include OS-specific variables
      ansible.builtin.include_vars: "vars/{{ ansible_os_family }}.yml"
      tags: always
  roles:
    - role: postgresql-extensions

    # finish (info)
    - role: deploy-finish
