---
- name: vitabaks.autobase.consul | Configure Consul instances
  hosts: consul_instances
  become: true
  become_method: sudo
  any_errors_fatal: true
  gather_facts: true
  environment: "{{ proxy_env | default({}) }}"

  pre_tasks:
    - name: Gather package facts
      ansible.builtin.package_facts:
        manager: auto
      when: ansible_facts.packages is not defined
      check_mode: false
      tags: always

    - name: Define bind_address
      ansible.builtin.include_role:
        name: vitabaks.autobase.bind_address
      tags: always

    - name: Gather ansible_distribution from localhost
      ansible.builtin.setup:
        gather_subset:
        - '!all'
        - '!min'
        - distribution
      become: false
      delegate_to: localhost
      delegate_facts: true

    - name: Check if the consul role requirements (ansible.utils) are installed
      ansible.builtin.command: ansible-galaxy collection list ansible.utils
      changed_when: false
      failed_when: false
      register: ansible_utils_result
      become: false
      delegate_to: localhost
      run_once: true # noqa run-once

    - name: Consul role requirements
      ansible.builtin.fail:
        msg:
          - "Please install consul role requirements (ansible.utils)"
          - "ansible-galaxy install -r roles/consul/requirements.yml"
      delegate_to: localhost
      run_once: true # noqa run-once
      when:
        - ansible_utils_result.stderr is defined
        - ansible_utils_result.stderr is search("unable to find")

    - name: Make sure the unzip package are present on the control host
      ansible.builtin.package:
        name: unzip
        state: present
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      delegate_to: localhost
      become: false
      run_once: true # noqa run-once
      ignore_errors: true
      when: hostvars['localhost']['ansible_distribution'] != "MacOSX"

    - name: Make sure the python3-pip package are present on the control host
      ansible.builtin.package:
        name: python3-pip
        state: present
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      delegate_to: localhost
      become: false
      run_once: true # noqa run-once
      ignore_errors: true
      when: hostvars['localhost']['ansible_distribution'] != "MacOSX"

    - name: Install netaddr dependency on the control host
      ansible.builtin.pip:
        name: netaddr
        executable: pip3
      become: false
      environment:
        PIP_BREAK_SYSTEM_PACKAGES: "1"
      delegate_to: localhost
      run_once: true # noqa run-once

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      when: ansible_os_family == "Debian" and installation_method | default('packages') == "packages"

    - name: Make sure the gnupg and apt-transport-https packages are present
      ansible.builtin.apt:
        pkg:
          - gnupg
          - apt-transport-https
        state: present
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      when:
        - ansible_os_family == "Debian"
        - installation_method | default('packages') == "packages"
        - "'gnupg' not in ansible_facts.packages or 'apt-transport-https' not in ansible_facts.packages"

    - name: Install python3-pip package
      ansible.builtin.package:
        name: python3-pip
        state: present
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3
      when: "'python3-pip' not in ansible_facts.packages"

    - name: Build a firewall_ports_dynamic_var
      ansible.builtin.set_fact:
        firewall_ports_dynamic_var: "{{ firewall_ports_dynamic_var | default([]) + (firewall_allowed_tcp_ports_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when: firewall_enabled_at_boot | default(false) | bool
      tags: firewall

    - name: Build a firewall_rules_dynamic_var
      ansible.builtin.set_fact:
        firewall_rules_dynamic_var: "{{ firewall_rules_dynamic_var | default([]) + (firewall_additional_rules_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when: firewall_enabled_at_boot | default(false) | bool
      tags: firewall

    - name: Add a nameserver entry poining to localhost for dnsmasq
      ansible.builtin.set_fact:
        nameservers: "{{ ['127.0.0.1'] + (nameservers | default([])) }}"
      when: dcs_type | default('etcd') == "consul" and consul_dnsmasq_enable | default(true) | bool and ('127.0.0.1' not in (nameservers | default([])))

    - name: Redefine the consul_dnsmasq_servers variable
      ansible.builtin.set_fact:
        consul_dnsmasq_servers: "{{ consul_dnsmasq_servers | reject('equalto', '127.0.0.1') | list }}"
      when: dcs_type | default('etcd') == "consul" and consul_dnsmasq_enable | default(true) | bool and ('127.0.0.1' in (consul_dnsmasq_servers | default([])))

    # Setting variables for Consul during cloud deployment
    - name: Redefine the consul_node_role and consul_bootstrap_expect variables
      ansible.builtin.set_fact:
        consul_node_role: "{{ 'server' if not dcs_exists | default(false) else 'client' }}"
        consul_bootstrap_expect: "{{ not dcs_exists | default(false) }}"
        consul_datacenter: "{{ server_location | default('dc1') }}"
      when: cloud_provider | default('') | length > 0

  roles:
    - role: vitabaks.autobase.firewall
      vars:
        firewall_allowed_tcp_ports: "{{ firewall_ports_dynamic_var | default([]) | unique }}"
        firewall_additional_rules: "{{ firewall_rules_dynamic_var | default([]) | unique }}"
      when: firewall_enabled_at_boot | default(false) | bool
      tags: firewall

    - role: vitabaks.autobase.hostname
    - role: vitabaks.autobase.resolv_conf
    - role: vitabaks.autobase.etc_hosts
    - role: vitabaks.autobase.timezone
    - role: vitabaks.autobase.ntp

    - role: vitabaks.autobase.consul
