---
- name: vitabaks.autobase.add_node | PostgreSQL HA Cluster Scaling (add a new node)
  hosts: localhost
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    # set_fact: 'pgbackrest_install' to configure Postgres backups (TODO: Add the ability to configure backups in the UI)
    # Note: Applicable only for "aws", "gcp", "azure", because:
    # "digitalocean" - requires the Spaces access keys ("AWS_ACCESS_KEY_ID" and "AWS_SECRET_ACCESS_KEY" variables)
    # "hetzner" - requires the S3 credentials ("hetzner_object_storage_access_key" and "hetzner_object_storage_secret_key" variables).
    - name: "Set variable: 'pgbackrest_install' to configure Postgres backups"
      ansible.builtin.set_fact:
        pgbackrest_install: true
      when:
        - not (pgbackrest_install | default(false) | bool or wal_g_install | default(false) | bool)
        - cloud_provider | default('') | lower in ['aws', 'gcp', 'azure']
        - pgbackrest_auto_conf | default(true) | bool # to be able to disable auto backup settings
      tags: always
  roles:
    - role: vitabaks.autobase.cloud_resources
      when: cloud_provider | default('') | length > 0
      vars:
        cluster_scaling: true
      tags: always

- name: vitabaks.autobase.add_node | Prepare and perform pre-checks
  hosts: postgres_cluster:etcd_cluster:consul_instances:balancers
  become: true
  become_method: sudo
  any_errors_fatal: true
  gather_facts: true
  environment: "{{ proxy_env | default({}) }}"

  pre_tasks:
    - name: Define bind_address
      ansible.builtin.include_role:
        name: vitabaks.autobase.bind_address
      tags: always

    - name: Set maintenance variable
      ansible.builtin.set_fact:
        postgresql_cluster_maintenance: true
      tags: always

    - name: Build lists of nodes marked as new_node
      run_once: true # noqa run-once
      ansible.builtin.set_fact:
        new_postgres_nodes: >-
          {{
            (groups['postgres_cluster'] | default([]))
            | map('extract', hostvars)
            | selectattr('new_node', 'defined')
            | selectattr('new_node')
            | map(attribute='inventory_hostname')
            | list
          }}
        new_etcd_nodes: >-
          {{
            (groups['etcd_cluster'] | default([]))
            | map('extract', hostvars)
            | selectattr('new_node', 'defined')
            | selectattr('new_node')
            | map(attribute='inventory_hostname')
            | list
          }}
        new_consul_nodes: >-
          {{
            (groups['consul_instances'] | default([]))
            | map('extract', hostvars)
            | selectattr('new_node', 'defined')
            | selectattr('new_node')
            | map(attribute='inventory_hostname')
            | list
          }}
        new_balancer_nodes: >-
          {{
            (groups['balancers'] | default([]))
            | map('extract', hostvars)
            | selectattr('new_node', 'defined')
            | selectattr('new_node')
            | map(attribute='inventory_hostname')
            | list
          }}
      tags: always

    # Stop, if no nodes found with new_node variable
    - name: No nodes found with new_node set to true
      run_once: true # noqa run-once
      ansible.builtin.fail:
        msg: "Please specify the new_node=true variable for the new server to add it to the existing cluster."
      when: (new_postgres_nodes + new_etcd_nodes + new_consul_nodes + new_balancer_nodes) | length < 1
      tags: always

    - name: Print a list of new nodes
      run_once: true # noqa run-once
      ansible.builtin.debug:
        msg:
          new_postgres_nodes: "{{ new_postgres_nodes | join(', ') if new_postgres_nodes | default([]) | length > 0 else omit }}"
          new_etcd_nodes: "{{ new_etcd_nodes | join(', ') if new_etcd_nodes | default([]) | length > 0 else omit }}"
          new_consul_nodes: "{{ new_consul_nodes | join(', ') if new_consul_nodes | default([]) | length > 0 else omit }}"
          new_balancer_nodes: "{{ new_balancer_nodes | join(', ') if new_balancer_nodes | default([]) | length > 0 else omit }}"
      tags: always

    - name: Gather package facts
      ansible.builtin.package_facts:
        manager: auto
      check_mode: false
      tags: always

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      when:
        - new_node | default(false) | bool
        - ansible_os_family == "Debian"
        - installation_method | default('packages') == "packages"

    - name: Make sure the gnupg and apt-transport-https packages are present
      ansible.builtin.apt:
        pkg:
          - gnupg
          - apt-transport-https
        state: present
      register: apt_status
      until: apt_status is success
      delay: 5
      retries: 3
      when:
        - new_node | default(false) | bool
        - ansible_os_family == "Debian"
        - installation_method | default('packages') == "packages"
        - "'gnupg' not in ansible_facts.packages or 'apt-transport-https' not in ansible_facts.packages"

    - name: Build a firewall_ports_dynamic_var
      ansible.builtin.set_fact:
        firewall_ports_dynamic_var: "{{ firewall_ports_dynamic_var | default([]) + (firewall_allowed_tcp_ports_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when:
        - new_node | default(false) | bool
        - firewall_enabled_at_boot | default(false) | bool
      tags: firewall

    - name: Build a firewall_rules_dynamic_var
      ansible.builtin.set_fact:
        firewall_rules_dynamic_var: "{{ firewall_rules_dynamic_var | default([]) + (firewall_additional_rules_for[item] | default([])) }}"
      loop: "{{ hostvars[inventory_hostname].group_names }}"
      when:
        - new_node | default(false) | bool
        - firewall_enabled_at_boot | default(false) | bool
      tags: firewall

  roles:
    - role: vitabaks.autobase.pre_checks
      vars:
        minimal_ansible_version: 2.17.0
        timescale_minimal_pg_version: 12 # if enable_timescale is defined
      when: new_postgres_nodes | default([]) | length > 0

    - role: vitabaks.autobase.ssh_keys
      when:
        - new_postgres_nodes | default([]) | length > 0
        - enable_ssh_key_based_authentication | default(false) | bool

    - role: vitabaks.autobase.firewall
      vars:
        firewall_allowed_tcp_ports: "{{ firewall_ports_dynamic_var | default([]) | unique }}"
        firewall_additional_rules: "{{ firewall_rules_dynamic_var | default([]) | unique }}"
      when:
        - new_node | default(false) | bool
        - firewall_enabled_at_boot | default(false)| bool

  tasks:
    - name: Add a new node to pg_hba.conf on existing cluster nodes
      ansible.builtin.include_role:
        name: vitabaks.autobase.patroni
        tasks_from: pg_hba
      when:
        - new_postgres_nodes | default([]) | length > 0
        - not new_node | default(false) | bool

    - name: Add a new node to new_replica group (in-memory inventory)
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: new_replica
      loop: "{{ new_postgres_nodes }}"
      changed_when: false
      when: new_postgres_nodes | default([]) | length > 0

    - name: Add a new node to new_balancer group (in-memory inventory)
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: new_balancer
      loop: "{{ new_balancer_nodes }}"
      changed_when: false
      when: new_balancer_nodes | default([]) | length > 0

- name: vitabaks.autobase.add_node | Import etcd cluster playbook
  ansible.builtin.import_playbook: etcd_cluster.yml
  vars:
    cluster_scaling: true
  when:
    - dcs_type | default('etcd') == "etcd"
    - new_etcd_nodes | default([]) | length > 0
  tags: etcd

- name: vitabaks.autobase.add_node | Import Consul playbook
  ansible.builtin.import_playbook: consul_cluster.yml
  vars:
    cluster_scaling: true
  when:
    - dcs_type | default('etcd') == "consul"
    - new_consul_nodes | default([]) | length > 0
  tags: consul

- name: vitabaks.autobase.add_node | Configure new balancer node
  hosts: new_balancer
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  vars:
    add_balancer: true
  roles:
    - role: vitabaks.autobase.hostname
    - role: vitabaks.autobase.resolv_conf
    - role: vitabaks.autobase.sysctl

    - role: vitabaks.autobase.haproxy
      when: with_haproxy_load_balancing | default(false) | bool

    - role: vitabaks.autobase.confd
      when:
        - dcs_type | default('etcd') == "etcd"
        - with_haproxy_load_balancing | default(false) | bool

    - role: vitabaks.autobase.keepalived
      when:
        - cluster_vip is defined and cluster_vip | length > 0
        - with_haproxy_load_balancing | default(false) | bool

- name: vitabaks.autobase.add_node | Configure new PostgreSQL node
  hosts: new_replica
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"

  pre_tasks:
    # if 'dcs_type' is 'consul'
    - name: Add a nameserver entry poining to localhost for dnsmasq
      ansible.builtin.set_fact:
        nameservers: "{{ ['127.0.0.1'] + (nameservers | default([])) }}"
      when:
        - dcs_type | default('etcd') == "consul"
        - consul_dnsmasq_enable | default(true) | bool
        - ('127.0.0.1' not in (nameservers | default([])))

  roles:
    - role: vitabaks.autobase.hostname
    - role: vitabaks.autobase.resolv_conf
    - role: vitabaks.autobase.etc_hosts
    - role: vitabaks.autobase.add_repository
    - role: vitabaks.autobase.packages
    - role: vitabaks.autobase.sudo
    - role: vitabaks.autobase.swap
    - role: vitabaks.autobase.sysctl
    - role: vitabaks.autobase.transparent_huge_pages
    - role: vitabaks.autobase.pam_limits
    - role: vitabaks.autobase.io_scheduler
    - role: vitabaks.autobase.locales
    - role: vitabaks.autobase.timezone
    - role: vitabaks.autobase.ntp
    - role: vitabaks.autobase.copy
    - role: vitabaks.autobase.cron

- name: vitabaks.autobase.add_node | Configure pgBackRest
  hosts: pgbackrest:postgres_cluster
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  roles:
    - role: vitabaks.autobase.pgbackrest
      when: pgbackrest_install | bool

- name: vitabaks.autobase.add_node | Regenerate Postgres TLS certificates
  hosts: postgres_cluster
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  vars:
    cluster_scaling: true
  tasks:
    - name: Generate Postgres TLS certificate
      ansible.builtin.include_role:
        name: vitabaks.autobase.tls_certificate
      vars:
        tls_group_name: "postgres_cluster"
        tls_cert_regenerate: true
      when: tls_cert_generate | default(true) | bool

    - name: Copy Postgres TLS certificate, key and CA to all nodes
      ansible.builtin.include_role:
        name: vitabaks.autobase.tls_certificate
        tasks_from: copy
      when: tls_cert_generate | default(true) | bool

- name: vitabaks.autobase.add_node | Add new PostgreSQL replica to the cluster
  hosts: new_replica
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  vars:
    cluster_scaling: true
  roles:
    - role: vitabaks.autobase.wal_g
      when: wal_g_install | default(false) | bool

    - role: vitabaks.autobase.pg_probackup
      when: pg_probackup_install | default(false) | bool

    - role: vitabaks.autobase.pgbouncer
      when: pgbouncer_install | default(false) | bool

    - role: vitabaks.autobase.pgpass

    - role: vitabaks.autobase.patroni

    - role: vitabaks.autobase.vip_manager
      when: not with_haproxy_load_balancing | default(false) | bool and
        (cluster_vip is defined and cluster_vip | length > 0)

    - role: vitabaks.autobase.netdata

    # finish (info)
    - role: vitabaks.autobase.deploy_finish
