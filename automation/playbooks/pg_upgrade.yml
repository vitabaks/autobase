---
# TODO:
# - Citus support
- name: "vitabaks.autobase.pg_upgrade | Upgrade PostgreSQL {{ pg_old_version }} to the new version {{ pg_new_version }}"
  hosts: postgres_cluster
  gather_facts: true
  become: true
  become_user: postgres
  any_errors_fatal: true
  pre_tasks:
    - name: Gather network facts
      ansible.builtin.setup:
        gather_subset:
          - network
      when: ansible_all_ipv4_addresses is not defined

    - name: Expose bind_address as facts
      ansible.builtin.set_fact:
        bind_address: "{{ ansible_all_ipv4_addresses | ansible.utils.ipaddr('private') | first }}"
      when: bind_address is not defined

    - name: "[Prepare] Get Patroni Cluster Leader Node"
      ansible.builtin.uri:
        url: http://{{ patroni_bind_address | default(bind_address, true) }}:{{ patroni_restapi_port | default('8008') }}/leader
        status_code: 200
      register: patroni_leader_result
      changed_when: false
      failed_when: false
      environment:
        no_proxy: "{{ patroni_bind_address | default(bind_address, true) }}"

    # Stop, if Patroni is unavailable
    - name: The Patroni cluster is unhealthy
      ansible.builtin.fail:
        msg: "Patroni is unavailable on {{ ansible_hostname }}. Please check the cluster status."
      changed_when: false
      when: patroni_leader_result is undefined or patroni_leader_result.status == -1

    - name: '[Prepare] Add host to group "primary" (in-memory inventory)'
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: primary
      when: hostvars[item]['patroni_leader_result']['status'] == 200
      loop: "{{ groups['postgres_cluster'] }}"
      changed_when: false

    - name: '[Prepare] Add hosts to group "secondary" (in-memory inventory)'
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: secondary
      when: hostvars[item]['patroni_leader_result']['status'] != 200
      loop: "{{ groups['postgres_cluster'] }}"
      changed_when: false

    - name: "Print Patroni Cluster info"
      ansible.builtin.debug:
        msg:
          - "Cluster Name: {{ patroni_cluster_name | default('postgres-cluster') }}"
          - "Cluster Leader: {{ ansible_hostname }}"
      when: inventory_hostname in groups['primary']
  tags:
    - always

- name: "(1/6) PRE-UPGRADE: Perform Pre-Checks"
  hosts: "primary:secondary"
  gather_facts: false
  become: true
  become_user: postgres
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"
  tasks:
    - name: Running Pre-Checks
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: pre_checks
  tags:
    - upgrade
    - pre-checks

- name: "(2/6) PRE-UPGRADE: Install new PostgreSQL packages"
  hosts: "primary:secondary"
  gather_facts: false
  become: true
  become_user: root
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"
  tasks:
    - name: Install packages
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: packages
  tags:
    - upgrade
    - upgrade-check
    - packages

- name: "(3/6) PRE-UPGRADE: Initialize new db, schema compatibility check, and pg_upgrade --check"
  hosts: "primary:secondary"
  gather_facts: false
  become: true
  become_user: postgres
  any_errors_fatal: true
  tasks:
    - name: Create Data directory and initdb
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: initdb

    # (optional) copy files specified in variable:
    # 'copy_files_to_all_server'
    - name: Copy files
      ansible.builtin.include_role:
        name: vitabaks.autobase.copy
      vars:
        copy_files_to_all_server: "{{ upgrade_copy_files_to_all_server | default([]) }}"

    - name: Check Schema Compatibility
      ansible.builtin.import_role:
        name: vitabaks.autobase.upgrade
        tasks_from: schema_compatibility
      when: schema_compatibility_check | default(true) | bool

    - name: Check pg_upgrade
      ansible.builtin.import_role:
        name: vitabaks.autobase.upgrade
        tasks_from: upgrade_check
  tags:
    - upgrade
    - upgrade-check
    - schema-compatibility-check

- name: "(4/6) PRE-UPGRADE: Prepare the Patroni configuration"
  hosts: "primary:secondary"
  gather_facts: false
  become: true
  become_user: postgres
  any_errors_fatal: true
  tasks:
    - name: Patroni config
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: update_config
  tags:
    - upgrade
    - update-config

- name: "(5/6) UPGRADE: Upgrade PostgreSQL"
  hosts: "primary:secondary"
  gather_facts: false
  become: true
  become_user: postgres
  any_errors_fatal: true
  tasks:
    - name: Enable maintenance mode
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: maintenance_enable

    - name: Stop Services
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: stop_services

    - name: Check 'Latest checkpoint location'
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: checkpoint_location

    - name: Upgrade Primary
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: upgrade_primary

    - name: Upgrade Secondary
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: upgrade_secondary

    # if pg_new_wal_dir is defined
    - name: Create WAL dir symlink
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: custom_wal_dir
      when: pg_new_wal_dir | default('') | length > 0

    - name: Remove old cluster from DCS
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: dcs_remove_cluster

    - name: Start Services
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: start_services

    - name: Disable maintenance mode
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: maintenance_disable
  tags:
    - upgrade

- name: "(6/6) POST-UPGRADE: Analyze a PostgreSQL database (update optimizer statistics) and Post-Upgrade tasks"
  hosts: "primary:secondary"
  gather_facts: false
  become: true
  become_user: postgres
  any_errors_fatal: true
  tasks:
    - name: Analyze database
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: statistics
      tags: analyze, statistics

    - name: Update extensions
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: extensions
      when: update_extensions | default(true) | bool
      tags: update_extensions

    - name: Running Post-Checks
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: post_checks

    - name: Running Post-Upgrade tasks
      ansible.builtin.include_role:
        name: vitabaks.autobase.upgrade
        tasks_from: post_upgrade
  tags:
    - upgrade
    - post-upgrade
