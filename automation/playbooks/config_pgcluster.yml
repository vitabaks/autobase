---
- name: vitabaks.autobase.config_pgcluster | Configuration PostgreSQL HA Cluster (based on "Patroni")
  hosts: localhost
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    # set_fact: 'pgbackrest_install' to configure Postgres backups (TODO: Add the ability to configure backups in the UI)
    # Note: Applicable only for "aws", "gcp", "azure", because:
    # "digitalocean" - requires the Spaces access keys ("AWS_ACCESS_KEY_ID" and "AWS_SECRET_ACCESS_KEY" variables)
    # "hetzner" - requires the S3 credentials ("hetzner_object_storage_access_key" and "hetzner_object_storage_secret_key" variables).
    - name: "Set variable: 'pgbackrest_install' to configure Postgres backups"
      ansible.builtin.set_fact:
        pgbackrest_install: true
      when:
        - not (pgbackrest_install | default(false) | bool or wal_g_install | default(false) | bool)
        - cloud_provider | default('') | lower in ['aws', 'gcp', 'azure']
        - pgbackrest_auto_conf | default(true) | bool # to be able to disable auto backup settings
      tags: always
  roles:
    - role: vitabaks.autobase.cloud_resources
      when: cloud_provider | default('') | length > 0
      vars:
        postgresql_cluster_maintenance: true
      tags: always

- name: vitabaks.autobase.config_pgcluster | Check the PostgreSQL cluster state and perform pre-checks
  hosts: postgres_cluster
  become: true
  become_method: sudo
  gather_facts: true
  pre_tasks:
    - name: Gather network facts
      ansible.builtin.setup:
        gather_subset:
          - network
      when: ansible_all_ipv4_addresses is not defined

    - name: Expose bind_address as facts
      ansible.builtin.set_fact:
        bind_address: "{{ ansible_all_ipv4_addresses | ansible.utils.ipaddr('private') | first }}"
      when: bind_address is not defined

    - name: "[Prepare] Set maintenance variable"
      ansible.builtin.set_fact:
        postgresql_cluster_maintenance: true

    - name: "[Prepare] Get Patroni Cluster Leader Node"
      ansible.builtin.uri:
        url: http://{{ patroni_bind_address | default(bind_address, true) }}:{{ patroni_restapi_port | default('8008') }}/leader
        status_code: 200
      register: patroni_leader_result
      changed_when: false
      failed_when: false
      check_mode: false
      environment:
        no_proxy: "{{ patroni_bind_address | default(bind_address, true) }}"

    # Stop, if Patroni is unavailable
    - name: The Patroni cluster is unhealthy
      ansible.builtin.fail:
        msg: "Patroni is unavailable on {{ ansible_hostname }}. Please check the cluster status."
      changed_when: false
      when: patroni_leader_result is undefined or patroni_leader_result.status == -1

  roles:
    - role: vitabaks.autobase.pre_checks
      vars:
        minimal_ansible_version: 2.16.0
        timescale_minimal_pg_version: 12 # if enable_timescale is defined

  tasks:
    - name: '[Prepare] Add host to group "primary" (in-memory inventory)'
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: primary
        postgresql_exists: true
      when: hostvars[item]['patroni_leader_result']['status'] == 200
      loop: "{{ groups['postgres_cluster'] }}"
      changed_when: false
      check_mode: false

    - name: '[Prepare] Add hosts to group "secondary" (in-memory inventory)'
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: secondary
        postgresql_exists: true
      when: hostvars[item]['patroni_leader_result']['status'] != 200
      loop: "{{ groups['postgres_cluster'] }}"
      changed_when: false
      check_mode: false

    - name: "Print Patroni Cluster info"
      ansible.builtin.debug:
        msg:
          - "Cluster Name: {{ patroni_cluster_name | default('postgres-cluster') }}"
          - "Cluster Leader: {{ ansible_hostname }}"
      when: inventory_hostname in groups['primary']

    # if 'cloud_provider' is 'aws', 'gcp', or 'azure'
    # set_fact: 'pgbackrest_install' to configure Postgres backups (TODO: Add the ability to configure backups in the UI)
    - name: "Set variable: 'pgbackrest_install' to configure Postgres backups"
      ansible.builtin.set_fact:
        pgbackrest_install: true
      when:
        - not (pgbackrest_install | default(false) | bool or wal_g_install | default(false) | bool)
        - cloud_provider | default('') | lower in ['aws', 'gcp', 'azure']
        - pgbackrest_auto_conf | default(true) | bool # to be able to disable auto backup settings
  tags:
    - always

- name: vitabaks.autobase.config_pgcluster | Configure PostgreSQL Cluster
  hosts: "primary:secondary"
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"
  pre_tasks:
    - name: Build a firewall_ports_dynamic_var
      ansible.builtin.set_fact:
        firewall_ports_dynamic_var: "{{ firewall_ports_dynamic_var | default([]) + (firewall_allowed_tcp_ports_for[item] | default([])) }}"
      loop: "{{ hostvars[patroni_bind_address | default(bind_address, true)].group_names }}"
      when: firewall_enabled_at_boot | default(false) | bool
      tags: config_firewall, firewall

    - name: Build a firewall_rules_dynamic_var
      ansible.builtin.set_fact:
        firewall_rules_dynamic_var: "{{ firewall_rules_dynamic_var | default([]) + (firewall_additional_rules_for[item] | default([])) }}"
      loop: "{{ hostvars[patroni_bind_address | default(bind_address, true)].group_names }}"
      when: firewall_enabled_at_boot | default(false) | bool
      tags: firewall

    # if 'dcs_type' is 'consul'
    - name: Add a nameserver entry poining to localhost for dnsmasq
      ansible.builtin.set_fact:
        nameservers: "{{ ['127.0.0.1'] + (nameservers | default([])) }}"
      when: dcs_type | default('etcd') == "consul" and consul_dnsmasq_enable | default(true) | bool and ('127.0.0.1' not in (nameservers | default([])))

  roles:
    - role: vitabaks.autobase.firewall
      vars:
        firewall_allowed_tcp_ports: "{{ firewall_ports_dynamic_var | default([]) | unique }}"
        firewall_additional_rules: "{{ firewall_rules_dynamic_var | default([]) | unique }}"
      when: firewall_enabled_at_boot | default(false) | bool
      tags: firewall

    - role: vitabaks.autobase.hostname
    - role: vitabaks.autobase.resolv_conf
    - role: vitabaks.autobase.etc_hosts
    - role: vitabaks.autobase.timezone
    - role: vitabaks.autobase.add_repository
    - role: vitabaks.autobase.packages
    - role: vitabaks.autobase.sudo
    - role: vitabaks.autobase.swap
    - role: vitabaks.autobase.sysctl
    - role: vitabaks.autobase.transparent_huge_pages
    - role: vitabaks.autobase.pam_limits
    - role: vitabaks.autobase.io_scheduler
    - role: vitabaks.autobase.locales
    - role: vitabaks.autobase.ntp
    - role: vitabaks.autobase.ssh_keys
    - role: vitabaks.autobase.copy
    - role: vitabaks.autobase.pgpass
    - role: vitabaks.autobase.cron

    - role: vitabaks.autobase.vip_manager
      when: not with_haproxy_load_balancing | default(false) | bool and
        (cluster_vip is defined and cluster_vip | length > 0)

    - role: vitabaks.autobase.postgresql_users
      when: inventory_hostname in groups['primary']

    - role: vitabaks.autobase.postgresql_databases
      when: inventory_hostname in groups['primary']

    - role: vitabaks.autobase.postgresql_schemas
      when: inventory_hostname in groups['primary']

    - role: vitabaks.autobase.postgresql_privs
      when: inventory_hostname in groups['primary']

    - role: vitabaks.autobase.wal_g
      when: wal_g_install | default(false) | bool

  tasks:
    - name: Configure patroni
      ansible.builtin.include_role:
        name: vitabaks.autobase.patroni
        tasks_from: config

    - name: Configure pgbouncer
      ansible.builtin.include_role:
        name: vitabaks.autobase.pgbouncer
        tasks_from: config
      when: pgbouncer_install | default(true) | bool

- name: config_pgcluster | Configure pgBackRest
  hosts: pgbackrest:postgres_cluster
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    # if 'cloud_provider' is 'aws', 'gcp', or 'azure'
    # set_fact: 'pgbackrest_install' to configure Postgres backups (TODO: Add the ability to configure backups in the UI)
    - name: "Set variable: 'pgbackrest_install' to configure Postgres backups"
      ansible.builtin.set_fact:
        pgbackrest_install: true
      when:
        - not (pgbackrest_install | default(false) | bool or wal_g_install | default(false) | bool)
        - cloud_provider | default('') | lower in ['aws', 'gcp', 'azure']
        - pgbackrest_auto_conf | default(true) | bool # to be able to disable auto backup settings
      tags: always
  roles:
    - role: vitabaks.autobase.pgbackrest
      when: pgbackrest_install | default(false) | bool

- name: vitabaks.autobase.config_pgcluster | Restart patroni on secondary after config settings if need
  hosts: secondary
  serial: 1 # restart replicas one by one
  gather_facts: false
  become: true
  become_method: sudo
  any_errors_fatal: true
  tasks:
    - name: Stop read-only traffic
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: stop_traffic
      when:
        - pending_restart | default(false) | bool
        - pg_pending_restart_settings | default('') | length > 0

    - name: Stop Services
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: stop_services
      when:
        - pending_restart | default(false) | bool
        - pg_pending_restart_settings | default('') | length > 0

    - name: Start Services
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: start_services
      when:
        - pending_restart | default(false) | bool
        - pg_pending_restart_settings | default('') | length > 0

    - name: Start read-only traffic
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: start_traffic
      when:
        - pending_restart | default(false) | bool
        - pg_pending_restart_settings | default('') | length > 0
  tags:
    - patroni_conf

- name: vitabaks.autobase.config_pgcluster | Restart patroni on master after config settings if need
  hosts: primary
  gather_facts: false
  become: true
  become_method: sudo
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"
  tasks:
    - name: Switchover Patroni leader role
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: switchover
      when:
        - pending_restart | default(false) | bool
        - pg_pending_restart_settings | default('') | length > 0

    - name: Stop read-only traffic
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: stop_traffic
      when:
        - pending_restart | default(false) | bool
        - pg_pending_restart_settings | default('') | length > 0

    - name: Stop Services
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: stop_services
      when:
        - pending_restart | default(false) | bool
        - pg_pending_restart_settings | default('') | length > 0

    - name: Start Services
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: start_services
      when:
        - pending_restart | default(false) | bool
        - pg_pending_restart_settings | default('') | length > 0

    - name: Start read-only traffic
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: start_traffic
      when:
        - pending_restart | default(false) | bool
        - pg_pending_restart_settings | default('') | length > 0
  tags:
    - patroni_conf

- name: vitabaks.autobase.config_pgcluster | Configure PostgreSQL Cluster and info
  hosts: primary
  become: true
  become_method: sudo
  gather_facts: true
  any_errors_fatal: true
  roles:
    - role: vitabaks.autobase.postgresql_extensions

    # finish (info)
    - role: vitabaks.autobase.deploy_finish
