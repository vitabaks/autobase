---
- name: vitabaks.autobase.update_pgcluster | Update PostgreSQL HA Cluster (based on "Patroni")
  hosts: postgres_cluster
  gather_facts: true
  become: true
  become_method: sudo
  any_errors_fatal: true
  tasks:
    - name: Gather network facts
      ansible.builtin.setup:
        gather_subset:
          - network
      when: ansible_all_ipv4_addresses is not defined

    - name: Expose bind_address as facts
      ansible.builtin.set_fact:
        bind_address: "{{ ansible_all_ipv4_addresses | ansible.utils.ipaddr('private') | first }}"
      when: bind_address is not defined

    - name: "[Prepare] Get Patroni Cluster Leader Node"
      ansible.builtin.uri:
        url: http://{{ patroni_bind_address | default(bind_address, true) }}:{{ patroni_restapi_port | default('8008') }}/leader
        status_code: 200
      register: patroni_leader_result
      changed_when: false
      failed_when: false
      environment:
        no_proxy: "{{ patroni_bind_address | default(bind_address, true) }}"
      tags: always

    - name: '[Prepare] Add host to group "primary" (in-memory inventory)'
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: primary
      when: hostvars[item]['patroni_leader_result']['status'] == 200
      loop: "{{ groups['postgres_cluster'] }}"
      changed_when: false
      tags: always

    - name: '[Prepare] Add hosts to group "secondary" (in-memory inventory)'
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: secondary
      when: hostvars[item]['patroni_leader_result']['status'] != 200
      loop: "{{ groups['postgres_cluster'] }}"
      changed_when: false
      tags: always

    - name: "Print Patroni Cluster info"
      ansible.builtin.debug:
        msg:
          - "Cluster Name: {{ patroni_cluster_name | default('postgres-cluster') }}"
          - "Cluster Leader: {{ ansible_hostname }}"
      when: inventory_hostname in groups['primary']
      tags: always

- name: "(1/4) PRE-UPDATE: Perform pre-update tasks"
  hosts: "primary:secondary"
  gather_facts: true
  become: true
  become_user: postgres
  any_errors_fatal: true
  tasks:
    - name: Running Pre-Checks
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: pre_checks

    # This task updates the pgBackRest package on the backup server (Dedicated Repository Host).
    # It runs only if the 'pgbackrest' group is defined in the inventory and the update target is set to 'system'.
    - name: Update pgBackRest package (Dedicated Repository Host)
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: pgbackrest_host
      when: groups['pgbackrest'] | default([]) | length > 0 and target | default('postgres') == 'system'
  tags:
    - update
    - pre-checks

- name: "(2/4) UPDATE: Secondary"
  hosts: secondary
  serial: 1 # update replicas one by one
  gather_facts: true
  become: true
  become_method: sudo
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"
  tasks:
    - name: Stop read-only traffic
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: stop_traffic

    - name: Stop Services
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: stop_services

    - name: Update PostgreSQL
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: postgres
      when: target | default('postgres') == 'postgres' or target | default('postgres') == 'system'

    - name: Update Patroni
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: patroni
      when: target | default('postgres') == 'patroni' or target | default('postgres') == 'system'

    - name: Update all system packages
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: system
      when: target | default('postgres') == 'system'

    - name: Start Services
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: start_services

    - name: Start read-only traffic
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: start_traffic
  tags:
    - update
    - update-secondary

- name: "(3/4) UPDATE: Primary"
  hosts: primary
  gather_facts: true
  become: true
  become_method: sudo
  any_errors_fatal: true
  environment: "{{ proxy_env | default({}) }}"
  tasks:
    - name: "Switchover Patroni leader role"
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: switchover

    - name: Stop read-only traffic
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: stop_traffic

    - name: Stop Services
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: stop_services

    - name: Update PostgreSQL
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: postgres
      when: target | default('postgres') == 'postgres' or target | default('postgres') == 'system'

    - name: Update Patroni
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: patroni
      when: target | default('postgres') == 'patroni' or target | default('postgres') == 'system'

    - name: Update all system packages
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: system
      when: target | default('postgres') == 'system'

    - name: Start Services
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: start_services

    - name: Start read-only traffic
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: start_traffic
  tags:
    - update
    - update-primary

- name: "(4/4) POST-UPDATE: Update extensions"
  hosts: postgres_cluster
  gather_facts: true
  become: true
  become_user: postgres
  any_errors_fatal: true
  tasks:
    - name: Update extensions
      ansible.builtin.include_role:
        name: vitabaks.autobase.update
        tasks_from: extensions
      when: update_extensions | default(true) | bool

    # finish (info)
    - name: Check for any update failure
      run_once: true # noqa run-once
      ansible.builtin.set_fact:
        any_update_failed: "{{ any_update_failed | default(false) or
          hostvars[item].update_postgres_failed | default(false) or
          hostvars[item].update_patroni_failed | default(false) or
          hostvars[item].update_system_failed | default(false) }}"
      loop: "{{ groups['postgres_cluster'] }}"

    - name: Check the Patroni cluster state
      run_once: true # noqa run-once
      become: true
      become_user: postgres
      ansible.builtin.command: patronictl -c /etc/patroni/patroni.yml list
      register: patronictl_result
      changed_when: false
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/bin:/usr/local/bin"

    - name: Check the current PostgreSQL version
      run_once: true # noqa run-once
      ansible.builtin.command: |
        psql -p {{ postgresql_port | default(5432) }} \
          -U {{ patroni_superuser_username | default('postgres') }} \
          -d postgres -tAXc "select current_setting('server_version')"
      register: postgres_version
      changed_when: false

    - name: List the Patroni cluster members
      run_once: true # noqa run-once
      ansible.builtin.debug:
        msg: "{{ patronictl_result.stdout_lines }}"
      when: patronictl_result.stdout_lines is defined

    # if there are no update errors
    - name: Update completed
      run_once: true # noqa run-once
      ansible.builtin.debug:
        msg:
          - "PostgreSQL HA cluster update completed."
          - "Current version: {{ postgres_version.stdout }}"
      when: not any_update_failed

    # if there were errors during the update
    - name: Update completed with error
      run_once: true # noqa run-once
      ansible.builtin.debug:
        msg:
          - "Update of PostgreSQL HA cluster completed with errors. Check the Ansible log."
          - "Current version: {{ postgres_version.stdout }}"
      when: any_update_failed
  tags:
    - update
    - update-extensions
