// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentCloudImage deployment cloud image
//
// swagger:model Deployment.CloudImage
type DeploymentCloudImage struct {

	// arch
	// Example: amd64
	Arch string `json:"arch,omitempty"`

	// image
	// Example: {\"server_image\": \"ami-078b3985bbc361448\"}
	Image interface{} `json:"image,omitempty"`

	// os name
	// Example: Ubuntu
	OsName string `json:"os_name,omitempty"`

	// os version
	// Example: 22.04 LTS
	OsVersion string `json:"os_version,omitempty"`

	// updated at
	// Format: datetime
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this deployment cloud image
func (m *DeploymentCloudImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentCloudImage) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "datetime", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this deployment cloud image based on context it is used
func (m *DeploymentCloudImage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentCloudImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentCloudImage) UnmarshalBinary(b []byte) error {
	var res DeploymentCloudImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
