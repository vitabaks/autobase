// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResponsePostgresVersion response postgres version
//
// swagger:model Response.PostgresVersion
type ResponsePostgresVersion struct {

	// end of life
	// Example: 2022-11-10
	// Format: date
	EndOfLife strfmt.Date `json:"end_of_life,omitempty"`

	// major version
	// Example: 10
	MajorVersion int64 `json:"major_version,omitempty"`

	// release date
	// Example: 2017-10-05
	// Format: date
	ReleaseDate strfmt.Date `json:"release_date,omitempty"`
}

// Validate validates this response postgres version
func (m *ResponsePostgresVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndOfLife(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponsePostgresVersion) validateEndOfLife(formats strfmt.Registry) error {
	if swag.IsZero(m.EndOfLife) { // not required
		return nil
	}

	if err := validate.FormatOf("end_of_life", "body", "date", m.EndOfLife.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResponsePostgresVersion) validateReleaseDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("release_date", "body", "date", m.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this response postgres version based on context it is used
func (m *ResponsePostgresVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResponsePostgresVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponsePostgresVersion) UnmarshalBinary(b []byte) error {
	var res ResponsePostgresVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
