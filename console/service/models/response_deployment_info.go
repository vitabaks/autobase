// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResponseDeploymentInfo Deployment info
//
// swagger:model Response.DeploymentInfo
type ResponseDeploymentInfo struct {

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// List of available regions for current deployment
	CloudRegions []*DeploymentInfoCloudRegion `json:"cloud_regions"`

	// code
	// Example: aws
	Code string `json:"code,omitempty"`

	// description
	// Example: Amazon web services
	Description string `json:"description,omitempty"`

	// instance types
	InstanceTypes *ResponseDeploymentInfoInstanceTypes `json:"instance_types,omitempty"`

	// Hardware disks info
	Volumes []*ResponseDeploymentInfoVolumesItems0 `json:"volumes"`
}

// Validate validates this response deployment info
func (m *ResponseDeploymentInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseDeploymentInfo) validateCloudRegions(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudRegions) { // not required
		return nil
	}

	for i := 0; i < len(m.CloudRegions); i++ {
		if swag.IsZero(m.CloudRegions[i]) { // not required
			continue
		}

		if m.CloudRegions[i] != nil {
			if err := m.CloudRegions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_regions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResponseDeploymentInfo) validateInstanceTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceTypes) { // not required
		return nil
	}

	if m.InstanceTypes != nil {
		if err := m.InstanceTypes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance_types")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instance_types")
			}
			return err
		}
	}

	return nil
}

func (m *ResponseDeploymentInfo) validateVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	for i := 0; i < len(m.Volumes); i++ {
		if swag.IsZero(m.Volumes[i]) { // not required
			continue
		}

		if m.Volumes[i] != nil {
			if err := m.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this response deployment info based on the context it is used
func (m *ResponseDeploymentInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudRegions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstanceTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseDeploymentInfo) contextValidateCloudRegions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CloudRegions); i++ {

		if m.CloudRegions[i] != nil {

			if swag.IsZero(m.CloudRegions[i]) { // not required
				return nil
			}

			if err := m.CloudRegions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cloud_regions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cloud_regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResponseDeploymentInfo) contextValidateInstanceTypes(ctx context.Context, formats strfmt.Registry) error {

	if m.InstanceTypes != nil {

		if swag.IsZero(m.InstanceTypes) { // not required
			return nil
		}

		if err := m.InstanceTypes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance_types")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("instance_types")
			}
			return err
		}
	}

	return nil
}

func (m *ResponseDeploymentInfo) contextValidateVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Volumes); i++ {

		if m.Volumes[i] != nil {

			if swag.IsZero(m.Volumes[i]) { // not required
				return nil
			}

			if err := m.Volumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResponseDeploymentInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseDeploymentInfo) UnmarshalBinary(b []byte) error {
	var res ResponseDeploymentInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResponseDeploymentInfoInstanceTypes Lists of available instance types
//
// swagger:model ResponseDeploymentInfoInstanceTypes
type ResponseDeploymentInfoInstanceTypes struct {

	// large
	Large []*DeploymentInstanceType `json:"large"`

	// medium
	Medium []*DeploymentInstanceType `json:"medium"`

	// small
	Small []*DeploymentInstanceType `json:"small"`
}

// Validate validates this response deployment info instance types
func (m *ResponseDeploymentInfoInstanceTypes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLarge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedium(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmall(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseDeploymentInfoInstanceTypes) validateLarge(formats strfmt.Registry) error {
	if swag.IsZero(m.Large) { // not required
		return nil
	}

	for i := 0; i < len(m.Large); i++ {
		if swag.IsZero(m.Large[i]) { // not required
			continue
		}

		if m.Large[i] != nil {
			if err := m.Large[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instance_types" + "." + "large" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instance_types" + "." + "large" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResponseDeploymentInfoInstanceTypes) validateMedium(formats strfmt.Registry) error {
	if swag.IsZero(m.Medium) { // not required
		return nil
	}

	for i := 0; i < len(m.Medium); i++ {
		if swag.IsZero(m.Medium[i]) { // not required
			continue
		}

		if m.Medium[i] != nil {
			if err := m.Medium[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instance_types" + "." + "medium" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instance_types" + "." + "medium" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResponseDeploymentInfoInstanceTypes) validateSmall(formats strfmt.Registry) error {
	if swag.IsZero(m.Small) { // not required
		return nil
	}

	for i := 0; i < len(m.Small); i++ {
		if swag.IsZero(m.Small[i]) { // not required
			continue
		}

		if m.Small[i] != nil {
			if err := m.Small[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instance_types" + "." + "small" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instance_types" + "." + "small" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this response deployment info instance types based on the context it is used
func (m *ResponseDeploymentInfoInstanceTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLarge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMedium(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmall(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseDeploymentInfoInstanceTypes) contextValidateLarge(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Large); i++ {

		if m.Large[i] != nil {

			if swag.IsZero(m.Large[i]) { // not required
				return nil
			}

			if err := m.Large[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instance_types" + "." + "large" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instance_types" + "." + "large" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResponseDeploymentInfoInstanceTypes) contextValidateMedium(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Medium); i++ {

		if m.Medium[i] != nil {

			if swag.IsZero(m.Medium[i]) { // not required
				return nil
			}

			if err := m.Medium[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instance_types" + "." + "medium" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instance_types" + "." + "medium" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResponseDeploymentInfoInstanceTypes) contextValidateSmall(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Small); i++ {

		if m.Small[i] != nil {

			if swag.IsZero(m.Small[i]) { // not required
				return nil
			}

			if err := m.Small[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instance_types" + "." + "small" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("instance_types" + "." + "small" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResponseDeploymentInfoInstanceTypes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseDeploymentInfoInstanceTypes) UnmarshalBinary(b []byte) error {
	var res ResponseDeploymentInfoInstanceTypes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ResponseDeploymentInfoVolumesItems0 response deployment info volumes items0
//
// swagger:model ResponseDeploymentInfoVolumesItems0
type ResponseDeploymentInfoVolumesItems0 struct {

	// Price currency
	// Example: $
	Currency string `json:"currency,omitempty"`

	// Default volume
	// Example: false
	IsDefault *bool `json:"is_default,omitempty"`

	// Sets in GB
	// Example: 256
	MaxSize int64 `json:"max_size,omitempty"`

	// Sets in GB
	// Example: 10
	MinSize int64 `json:"min_size,omitempty"`

	// Price for disk by months
	// Example: 0.1
	PriceMonthly float64 `json:"price_monthly,omitempty"`

	// Volume description
	// Example: General purpose SSD disk
	VolumeDescription string `json:"volume_description,omitempty"`

	// Volume type
	// Example: gp3
	VolumeType string `json:"volume_type,omitempty"`
}

// Validate validates this response deployment info volumes items0
func (m *ResponseDeploymentInfoVolumesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this response deployment info volumes items0 based on context it is used
func (m *ResponseDeploymentInfoVolumesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResponseDeploymentInfoVolumesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseDeploymentInfoVolumesItems0) UnmarshalBinary(b []byte) error {
	var res ResponseDeploymentInfoVolumesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
