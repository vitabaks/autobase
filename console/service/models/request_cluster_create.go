// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RequestClusterCreate Request struct for cluster creation
//
// swagger:model Request.ClusterCreate
type RequestClusterCreate struct {

	// auth info
	AuthInfo *RequestClusterCreateAuthInfo `json:"auth_info,omitempty"`

	// Info about cluster
	Description string `json:"description,omitempty"`

	// Project environment
	EnvironmentID int64 `json:"environment_id,omitempty"`

	// envs
	Envs []string `json:"envs"`

	// extra vars
	ExtraVars []string `json:"extra_vars"`

	// name
	// Example: drm-prod-pgcluster
	Name string `json:"name,omitempty"`

	// Project for new cluster
	ProjectID int64 `json:"project_id,omitempty"`
}

// Validate validates this request cluster create
func (m *RequestClusterCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestClusterCreate) validateAuthInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthInfo) { // not required
		return nil
	}

	if m.AuthInfo != nil {
		if err := m.AuthInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth_info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this request cluster create based on the context it is used
func (m *RequestClusterCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestClusterCreate) contextValidateAuthInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthInfo != nil {

		if swag.IsZero(m.AuthInfo) { // not required
			return nil
		}

		if err := m.AuthInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RequestClusterCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestClusterCreate) UnmarshalBinary(b []byte) error {
	var res RequestClusterCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RequestClusterCreateAuthInfo Info for deployment system authorization
//
// swagger:model RequestClusterCreateAuthInfo
type RequestClusterCreateAuthInfo struct {

	// secret id
	// Example: 1
	SecretID int64 `json:"secret_id,omitempty"`
}

// Validate validates this request cluster create auth info
func (m *RequestClusterCreateAuthInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this request cluster create auth info based on context it is used
func (m *RequestClusterCreateAuthInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestClusterCreateAuthInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestClusterCreateAuthInfo) UnmarshalBinary(b []byte) error {
	var res RequestClusterCreateAuthInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
