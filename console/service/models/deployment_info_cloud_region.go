// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeploymentInfoCloudRegion deployment info cloud region
//
// swagger:model DeploymentInfo.CloudRegion
type DeploymentInfoCloudRegion struct {

	// unique parameter for DB
	// Example: north_america
	Code string `json:"code,omitempty"`

	// List of datacenters for this region
	Datacenters []*DeploymentInfoCloudRegionDatacentersItems0 `json:"datacenters"`

	// Field for web
	// Example: North America
	Name string `json:"name,omitempty"`
}

// Validate validates this deployment info cloud region
func (m *DeploymentInfoCloudRegion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatacenters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentInfoCloudRegion) validateDatacenters(formats strfmt.Registry) error {
	if swag.IsZero(m.Datacenters) { // not required
		return nil
	}

	for i := 0; i < len(m.Datacenters); i++ {
		if swag.IsZero(m.Datacenters[i]) { // not required
			continue
		}

		if m.Datacenters[i] != nil {
			if err := m.Datacenters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datacenters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datacenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this deployment info cloud region based on the context it is used
func (m *DeploymentInfoCloudRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatacenters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentInfoCloudRegion) contextValidateDatacenters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Datacenters); i++ {

		if m.Datacenters[i] != nil {

			if swag.IsZero(m.Datacenters[i]) { // not required
				return nil
			}

			if err := m.Datacenters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datacenters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("datacenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentInfoCloudRegion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentInfoCloudRegion) UnmarshalBinary(b []byte) error {
	var res DeploymentInfoCloudRegion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeploymentInfoCloudRegionDatacentersItems0 deployment info cloud region datacenters items0
//
// swagger:model DeploymentInfoCloudRegionDatacentersItems0
type DeploymentInfoCloudRegionDatacentersItems0 struct {

	// cloud image
	CloudImage *DeploymentCloudImage `json:"cloud_image,omitempty"`

	// code
	// Example: ca-central-1
	Code string `json:"code,omitempty"`

	// location
	// Example: Canada (central)
	Location string `json:"location,omitempty"`
}

// Validate validates this deployment info cloud region datacenters items0
func (m *DeploymentInfoCloudRegionDatacentersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentInfoCloudRegionDatacentersItems0) validateCloudImage(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudImage) { // not required
		return nil
	}

	if m.CloudImage != nil {
		if err := m.CloudImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_image")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deployment info cloud region datacenters items0 based on the context it is used
func (m *DeploymentInfoCloudRegionDatacentersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentInfoCloudRegionDatacentersItems0) contextValidateCloudImage(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudImage != nil {

		if swag.IsZero(m.CloudImage) { // not required
			return nil
		}

		if err := m.CloudImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_image")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentInfoCloudRegionDatacentersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentInfoCloudRegionDatacentersItems0) UnmarshalBinary(b []byte) error {
	var res DeploymentInfoCloudRegionDatacentersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
