// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SecretType secret type
//
// swagger:model Secret.Type
type SecretType string

func NewSecretType(value SecretType) *SecretType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SecretType.
func (m SecretType) Pointer() *SecretType {
	return &m
}

const (

	// SecretTypeAws captures enum value "aws"
	SecretTypeAws SecretType = "aws"

	// SecretTypeGcp captures enum value "gcp"
	SecretTypeGcp SecretType = "gcp"

	// SecretTypeHetzner captures enum value "hetzner"
	SecretTypeHetzner SecretType = "hetzner"

	// SecretTypeSSHKey captures enum value "ssh_key"
	SecretTypeSSHKey SecretType = "ssh_key"

	// SecretTypeDigitalocean captures enum value "digitalocean"
	SecretTypeDigitalocean SecretType = "digitalocean"

	// SecretTypePassword captures enum value "password"
	SecretTypePassword SecretType = "password"

	// SecretTypeAzure captures enum value "azure"
	SecretTypeAzure SecretType = "azure"
)

// for schema
var secretTypeEnum []interface{}

func init() {
	var res []SecretType
	if err := json.Unmarshal([]byte(`["aws","gcp","hetzner","ssh_key","digitalocean","password","azure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		secretTypeEnum = append(secretTypeEnum, v)
	}
}

func (m SecretType) validateSecretTypeEnum(path, location string, value SecretType) error {
	if err := validate.EnumCase(path, location, value, secretTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this secret type
func (m SecretType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecretTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this secret type based on context it is used
func (m SecretType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
