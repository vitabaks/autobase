// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResponseOperation response operation
//
// swagger:model Response.Operation
type ResponseOperation struct {

	// cluster name
	// Example: drm-prod-cluster
	ClusterName string `json:"cluster_name,omitempty"`

	// environment
	// Example: production
	Environment string `json:"environment,omitempty"`

	// finished
	// Example: 16.10.2023T11:20:00Z
	// Format: date-time
	Finished *strfmt.DateTime `json:"finished,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// started
	// Example: 16.10.2023T11:20:00Z
	// Format: date-time
	Started strfmt.DateTime `json:"started,omitempty"`

	// status
	// Example: success
	Status string `json:"status,omitempty"`

	// type
	// Example: deploy
	Type string `json:"type,omitempty"`
}

// Validate validates this response operation
func (m *ResponseOperation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinished(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarted(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseOperation) validateFinished(formats strfmt.Registry) error {
	if swag.IsZero(m.Finished) { // not required
		return nil
	}

	if err := validate.FormatOf("finished", "body", "date-time", m.Finished.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResponseOperation) validateStarted(formats strfmt.Registry) error {
	if swag.IsZero(m.Started) { // not required
		return nil
	}

	if err := validate.FormatOf("started", "body", "date-time", m.Started.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this response operation based on context it is used
func (m *ResponseOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResponseOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseOperation) UnmarshalBinary(b []byte) error {
	var res ResponseOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
