---
swagger: '2.0'
info:
  title: autobase console
  description: API for autobase console
  version: 2.1.0
host: localhost:8080
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json
basePath: "/api/v1"

paths:
  /version:
    get:
      summary: Get version of API service
      tags:
        - system
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.Version"

  /external/deployments:
    get:
      summary: Get full info about available external deployments
      tags:
        - dictionary
      parameters:
        - name: offset
          in: query
          required: false
          type: integer
        - name: limit
          in: query
          required: false
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.DeploymentsInfo"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /database/extensions:
    get:
      summary: "Info about available database extensions"
      tags:
        - dictionary
      parameters:
        - name: offset
          in: query
          required: false
          type: integer
        - name: limit
          in: query
          required: false
          type: integer
        - name: extension_type
          in: query
          required: false
          type: string
          default: "all"
          enum:
            - "all"
            - "contrib"
            - "third_party"
        - name: postgres_version
          in: query
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.DatabaseExtensions"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"
  /environments:
    get:
      summary: "Get environments list"
      tags:
        - environment
      parameters:
        - name: limit
          in: query
          required: false
          type: integer
        - name: offset
          in: query
          required: false
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.EnvironmentsList"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

    post:
      summary: "Create environment"
      tags:
        - environment
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request.Environment'
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.Environment"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /environments/{id}:
    delete:
      summary: "Delete environment"
      tags:
        - environment
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        '204':
          description: OK
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /postgres_versions:
    get:
      summary: "Get supported postgres versions"
      tags:
        - dictionary
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.PostgresVersions"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /settings:
    post:
      summary: "Create new setting"
      tags:
        - setting
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request.CreateSetting'
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.Setting"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

    get:
      summary: "Get settings"
      tags:
        - setting
      parameters:
        - name: name
          in: query
          required: false
          type: string
          description: "Filter by name"
        - name: offset
          in: query
          required: false
          type: integer
        - name: limit
          in: query
          required: false
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.Settings"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /settings/{name}:
    patch:
      summary: "Changed setting"
      tags:
        - setting
      parameters:
        - name: name
          in: path
          type: string
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request.ChangeSetting'
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.Setting"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /clusters:
    post:
      summary: "Create new cluster"
      tags:
        - cluster
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request.ClusterCreate'
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.ClusterCreate"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"
    get:
      summary: "Get info about clusters"
      tags:
        - cluster
      parameters:
        - name: offset
          in: query
          required: false
          type: integer
        - name: limit
          in: query
          required: false
          type: integer
        - name: project_id
          in: query
          required: true
          type: integer
        - name: name
          in: query
          required: false
          type: string
          description: "Filter by name"
        - name: status
          type: string
          in: query
          required: false
          description: "Filter by status"
        - name: location
          type: string
          in: query
          required: false
          description: "Filter by location"
        - name: environment
          type: string
          in: query
          required: false
          description: "Filter by environment"
        - name: server_count
          type: integer
          in: query
          required: false
          description: "Filter by server_count"
        - name: postgres_version
          type: integer
          in: query
          required: false
          description: "Filter by postgres_version"
        - name: created_at_from
          required: false
          type: string
          format: date-time
          in: query
          description: "Created at after this date"
        - name: created_at_to
          required: false
          type: string
          format: date-time
          in: query
          description: "Created at till this date"
        - name: sort_by
          in: query
          required: false
          type: string
          description: "Sort by fields. Example: sort_by=id,-name,created_at,updated_at\n
          Supported values:\n
           - id\n
           - name\n
           - created_at\n
           - updated_at\n
           - environment\n
           - project\n
           - status\n
           - location\n
           - server_count\n
           - postgres_version\n"
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.ClustersInfo"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /clusters/default_name:
    get:
      summary: "Get cluster default name"
      tags:
        - cluster
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.ClusterDefaultName"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /clusters/{id}:
    get:
      summary: "Get cluster info"
      tags:
        - cluster
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/ClusterInfo"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

    delete:
      summary: "Delete cluster (from the console database)"
      tags:
        - cluster
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        '204':
          description: OK
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /servers/{id}:
    delete:
      summary: "Delete server (from the console database)"
      tags:
        - cluster
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        '204':
          description: OK
          headers:
            x-cluster-id:
              type: integer
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /clusters/{id}/refresh:
    post:
      summary: "Refresh cluster info (from Patroni API)"
      tags:
        - cluster
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/ClusterInfo"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"


  # TODO: not implemented yet
  /clusters/{id}/reinit:
    post:
      summary: "Reinit cluster"
      deprecated: true
      tags:
        - cluster
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request.ClusterReinit'
        - name: id
          in: path
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.ClusterCreate"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  # TODO: not implemented yet
  /clusters/{id}/reload:
    post:
      summary: "Reload cluster"
      deprecated: true
      tags:
        - cluster
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request.ClusterReload'
        - name: id
          in: path
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.ClusterCreate"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  # TODO: not implemented yet
  /clusters/{id}/restart:
    post:
      summary: "Restart cluster"
      deprecated: true
      tags:
        - cluster
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request.ClusterRestart'
        - name: id
          in: path
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.ClusterCreate"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  # TODO: not implemented yet
  /clusters/{id}/stop:
    post:
      summary: "Stop cluster"
      deprecated: true
      tags:
        - cluster
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request.ClusterStop'
        - name: id
          in: path
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.ClusterCreate"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  # TODO: not implemented yet
  /clusters/{id}/start:
    post:
      summary: "Start cluster"
      deprecated: true
      tags:
        - cluster
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request.ClusterStart'
        - name: id
          in: path
          required: true
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.ClusterCreate"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  # TODO: not implemented yet
  /clusters/{id}/remove:
    post:
      summary: "Remove cluster"
      deprecated: true
      tags:
        - cluster
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request.ClusterRemove'
        - name: id
          in: path
          required: true
          type: integer
      responses:
        '204':
          description: OK
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /projects:
    post:
      summary: "Create new project"
      tags:
        - project
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request.ProjectCreate'
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.Project"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

    get:
      summary: "Get projects list"
      tags:
        - project
      parameters:
        - name: limit
          in: query
          required: false
          type: integer
        - name: offset
          in: query
          required: false
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.ProjectsList"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /projects/{id}:
    patch:
      summary: "Change project"
      tags:
        - project
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request.ProjectPatch'
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.Project"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

    delete:
      summary: "Delete project"
      tags:
        - project
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        '204':
          description: OK
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /secrets:
    post:
      summary: "Create new secret"
      tags:
        - secret
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request.SecretCreate'
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.SecretInfo"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

    get:
      summary: "Get secrets list"
      tags:
        - secret
      parameters:
        - name: limit
          in: query
          required: false
          type: integer
        - name: offset
          in: query
          required: false
          type: integer
        - name: project_id
          in: query
          required: true
          type: integer
        - name: name
          in: query
          required: false
          type: string
          description: "Filter by name"
        - name: type
          in: query
          required: false
          type: string
          description: "Filter by type"
        - name: sort_by
          in: query
          required: false
          type: string
          description: "Sort by fields. Example: sort_by=id,name,-type,created_at,updated_at"
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.SecretInfoList"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /secrets/{id}:
    patch:
      summary: "Change secret"
      tags:
        - secret
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request.SecretPatch'
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.SecretInfo"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

    delete:
      summary: "Delete secret"
      tags:
        - secret
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        '204':
          description: OK
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /operations:
    get:
      summary: "Get operations list for current project"
      tags:
        - operation
      parameters:
        - name: project_id
          in: query
          required: true
          type: integer
          description: "Required parameter for filter"
        - name: start_date
          required: true
          type: string
          format: date-time
          in: query
          description: "Operations started after this date"
        - name: end_date
          required: true
          type: string
          format: date-time
          in: query
          description: "Operations started till this date"
        - name: cluster_name
          in: query
          required: false
          type: string
          description: "Filter by cluster_name"
        - name: type
          in: query
          required: false
          type: string
          description: "Filter by type"
        - name: status
          in: query
          required: false
          type: string
          description: "Filter by status"
        - name: environment
          in: query
          required: false
          type: string
          description: "Filter by environment"
        - name: sort_by
          in: query
          required: false
          type: string
          description: "Sort by fields. Example: sort_by=cluster_name,-type,status,id,created_at,updated_at\n
          Supported valuese:\n
           - id\n
           - cluster_name\n
           - type\n
           - status\n
           - started_at\n
           - updated_at\n
           - cluster\n
           - environment\n"
        - name: limit
          in: query
          required: false
          type: integer
        - name: offset
          in: query
          required: false
          type: integer
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/Response.OperationsList"
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

  /operations/{id}/log:
    get:
      summary: "Get operation log by operation_id"
      tags:
        - operation
      consumes:
        - plain/text
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "Operation id"
      responses:
        '200':
          description: OK
          schema:
            type: string
          headers:
            content-type:
              type: string
            x-log-completed:
              type: boolean
        '400':
          description: Error
          schema:
            $ref: "#/definitions/Response.Error"

definitions:
  Response.Version:
    title: Version response
    type: object
    properties:
      version:
        type: string
        example: v1.0.0

  Response.Error:
    title: Error object
    type: object
    properties:
      code:
        type: integer
      title:
        type: string
      description:
        type: string

  Meta.Pagination:
    title: Pagination info for list requests
    type: object
    properties:
      offset:
        type: integer
        x-nullable: true
      limit:
        type: integer
        x-nullable: true
      count:
        type: integer
        x-nullable: true

  Response.DeploymentsInfo:
    title: Deployments info
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Response.DeploymentInfo"
      meta:
        $ref: '#/definitions/Meta.Pagination'

  Response.DeploymentInfo:
    description: Deployment info
    type: object
    properties:
      code:
        type: string
        example: "aws"
      description:
        type: string
        example: "Amazon web services"
      avatar_url:
        type: string
      cloud_regions:
        description: "List of available regions for current deployment"
        type: array
        items:
          $ref: '#/definitions/DeploymentInfo.CloudRegion'
      instance_types:
        description: "Lists of available instance types"
        type: object
        properties:
          small:
            type: array
            x-nullable: true
            items:
              $ref: '#/definitions/Deployment.InstanceType'
          medium:
            type: array
            items:
              $ref: '#/definitions/Deployment.InstanceType'
          large:
            type: array
            items:
              $ref: '#/definitions/Deployment.InstanceType'
      volumes:
        type: array
        description: "Hardware disks info"
        items:
          type: object
          properties:
            volume_type:
              type: string
              description: "Volume type"
              example: "gp3"
            volume_description:
              type: string
              description: "Volume description"
              example: "General purpose SSD disk"
            min_size:
              type: integer
              description: "Sets in GB"
              example: 10
            max_size:
              type: integer
              description: "Sets in GB"
              example: 256
            price_monthly:
              type: number
              description: "Price for disk by months"
              example: 0.1
            currency:
              type: string
              description: "Price currency"
              example: "$"
            is_default:
              type: boolean
              x-nullable: true
              description: "Default volume"
              example: false

  DeploymentInfo.CloudRegion:
    type: object
    properties:
      code:
        type: string
        description: "unique parameter for DB"
        example: "north_america"
      name:
        type: string
        description: "Field for web"
        example: "North America"
      datacenters:
        type: array
        description: "List of datacenters for this region"
        items:
          type: object
          properties:
            code:
              type: string
              example: "ca-central-1"
            location:
              type: string
              example: "Canada (central)"
            cloud_image:
              $ref: '#/definitions/Deployment.CloudImage'

  Deployment.CloudImage:
    type: object
    properties:
      image:
        type: object
        example: '{"server_image": "ami-078b3985bbc361448"}'
      arch:
        type: string
        example: "amd64"
      os_name:
        type: string
        example: "Ubuntu"
      os_version:
        type: string
        example: "22.04 LTS"
      updated_at:
        type: string
        format: datetime

  Deployment.InstanceType:
    type: object
    properties:
      code:
        type: string
        example: "m5.2xlarge"
      cpu:
        type: integer
        example: 8
      shared_cpu:
        type: boolean
        example: false
      ram:
        type: integer
        example: 256
      price_hourly:
        type: number
        description: "Price for 1 instance by hour"
        example: 0.01
      price_monthly:
        type: number
        description: "Price for 1 instance by month"
        example: 1.2
      currency:
        type: string
        description: "Price currency"
        example: "$"

  Response.DatabaseExtensions:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Response.DatabaseExtension'
      meta:
        $ref: '#/definitions/Meta.Pagination'

  Response.DatabaseExtension:
    type: object
    description: "Info about database extension"
    properties:
      name:
        type: string
        example: "Citus"
      description:
        type: string
        x-nullable: true
        example: "Citus is PostgreSQL extension that transforms..."
      url:
        type: string
        x-nullable: true
        example: "https://github.com/citusdata/citus"
      image:
        type: string
        x-nullable: true
        example: "citus.png"
      postgres_min_version:
        type: string
        x-nullable: true
        example: "11"
      postgres_max_version:
        type: string
        x-nullable: true
        example: "16"
      contrib:
        type: boolean
        example: false

  Request.ClusterCreate:
    type: object
    description: "Request struct for cluster creation"
    properties:
      name:
        type: string
        example: "drm-prod-pgcluster"
      description:
        type: string
        description: "Info about cluster"
      auth_info:
        type: object
        description: "Info for deployment system authorization"
        properties:
          secret_id:
            type: integer
            example: 1
      project_id:
        type: integer
        description: "Project for new cluster"
      environment_id:
        type: integer
        description: "Project environment"
      envs:
        type: array
        items:
          type: string
      extra_vars:
        type: array
        items:
          type: string

  Response.ClusterDefaultName:
    type: object
    description: "Response struct for cluster default name"
    properties:
      name:
        type: string
        example: "postgres-cluster-01"

  Response.ClusterCreate:
    type: object
    description: "Response struct for cluster creation"
    properties:
      cluster_id:
        type: integer
        description: "unique code for cluster"
      operation_id:
        type: integer
        description: "operation id"

  Response.ClusterLogs:
    type: object
    description: "Logs for cluster"
    properties:
      logs:
        type: string
        description: "all available logs"

  Response.ClustersInfo:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/ClusterInfo'
      meta:
        $ref: '#/definitions/Meta.Pagination'

  ClusterInfo:
    type: object
    description: "Cluster info"
    properties:
      id:
        type: integer
      name:
        type: string
        example: "drm-prod-pgcluster"
      description:
        type: string
      status:
        type: string
        example: "healthy"
      creation_time:
        type: string
        format: date-time
        example: "16.10.2023T11:20:00Z"
      environment:
        type: string
        example: "production"
      servers:
        type: array
        items:
          $ref: "#/definitions/ClusterInfo.Instance"
      postgres_version:
        type: integer
        format: int32
        example: 15
      cluster_location:
        type: string
        description: "Code of location"
        example: "eu-north-1"
      project_name:
        type: string
        description: "Project for cluster"
      connection_info:
        type: object

  ClusterInfo.AdditionalSettings:
    type: object
    description: "Additional settings for cluster"
    properties:
      connection_info:
        type: object

  ClusterInfo.Instance:
    type: object
    description: "Instance info for current cluster"
    properties:
      id:
        type: integer
      name:
        type: string
        example: "pgnode1"
      ip:
        type: string
        example: "10.128.64.141"
      status:
        type: string
      role:
        type: string
        example: "leader"
      timeline:
        type: integer
        format: int64
        example: 1
        x-nullable: true
      lag:
        type: integer
        format: int64
        example: 0
        x-nullable: true
      tags:
        type: object
      pending_restart:
        type: boolean
        example: false
        x-nullable: true

  Request.ClusterReinit:
    type: object
    description: "Reinit cluster"

  Request.ClusterReload:
    type: object
    description: "Reload cluster"

  Request.ClusterRestart:
    type: object
    description: "Restart cluster"

  Request.ClusterStop:
    type: object
    description: "Stop cluster"

  Request.ClusterStart:
    type: object
    description: "Start cluster"

  Request.ClusterRemove:
    type: object
    description: "Remove cluster"

  Request.ProjectCreate:
    type: object
    properties:
      name:
        type: string
        example: "default"
      description:
        type: string
        example: "Default project"

  Request.ProjectPatch:
    type: object
    properties:
      name:
        type: string
        x-nullable: true
      description:
        type: string
        x-nullable: true

  Response.Project:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
        x-nullable: true
      created_at:
        type: string
        format: date-time
        example: "16.10.2023T11:20:00Z"
      updated_at:
        type: string
        format: date-time
        x-nullable: true
        example: "16.10.2023T11:20:00Z"

  Response.ProjectsList:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Response.Project'
      meta:
        type: object
        $ref: '#/definitions/Meta.Pagination'

  Request.SecretCreate:
    type: object
    properties:
      project_id:
        type: integer
        example: 1
      name:
        type: string
        example: "aws key"
      type:
        $ref: '#/definitions/Secret.Type'
      value:
        type: object
        $ref: '#/definitions/Request.SecretValue'

  Secret.Type:
    type: string
    enum:
      - "aws"
      - "gcp"
      - "hetzner"
      - "ssh_key"
      - "digitalocean"
      - "password"
      - "azure"

  Request.SecretValue:
    type: object
    properties:
      aws:
        type: object
        $ref: '#/definitions/Request.SecretValue.Aws'
        x-nullable: true
      gcp:
        type: object
        $ref: '#/definitions/Request.SecretValue.Gcp'
        x-nullable: true
      hetzner:
        type: object
        $ref: '#/definitions/Request.SecretValue.Hetzner'
        x-nullable: true
      ssh_key:
        type: object
        $ref: '#/definitions/Request.SecretValue.SshKey'
        x-nullable: true
      digitalocean:
        type: object
        $ref: '#/definitions/Request.SecretValue.DigitalOcean'
        x-nullable: true
      password:
        type: object
        $ref: '#/definitions/Request.SecretValue.Password'
        x-nullable: true
      azure:
        type: object
        $ref: '#/definitions/Request.SecretValue.Azure'
        x-nullable: true

  Request.SecretValue.Aws:
    type: object
    properties:
      AWS_ACCESS_KEY_ID:
        type: string
      AWS_SECRET_ACCESS_KEY:
        type: string

  Request.SecretValue.Gcp:
    type: object
    properties:
      GCP_SERVICE_ACCOUNT_CONTENTS:
        type: string

  Request.SecretValue.Hetzner:
    type: object
    properties:
      HCLOUD_API_TOKEN:
        type: string

  Request.SecretValue.SshKey:
    type: object
    properties:
      SSH_PRIVATE_KEY:
        type: string

  Request.SecretValue.DigitalOcean:
    type: object
    properties:
      DO_API_TOKEN:
        type: string

  Request.SecretValue.Password:
    type: object
    properties:
      USERNAME:
        type: string
      PASSWORD:
        type: string

  Request.SecretValue.Azure:
    type: object
    properties:
      AZURE_SUBSCRIPTION_ID:
        type: string
      AZURE_CLIENT_ID:
        type: string
      AZURE_SECRET:
        type: string
      AZURE_TENANT:
        type: string

  Request.SecretPatch:
    type: object
    properties:
      name:
        type: string
        example: "aws key"
        x-nullable: true
      type:
        type: string
        example: "aws"
        x-nullable: true
      value:
        type: string
        example: "c2VjcmV0"
        description: "Secret value in base64"
        x-nullable: true

  Response.SecretInfo:
    type: object
    properties:
      id:
        type: integer
        example: 1
      project_id:
        type: integer
        example: 1
      name:
        type: string
        example: "aws key"
      type:
        $ref: '#/definitions/Secret.Type'
      created_at:
        type: string
        format: date-time
        example: "16.10.2023T11:20:00Z"
      updated_at:
        type: string
        format: date-time
        x-nullable: true
        example: "16.10.2023T11:20:00Z"
      is_used:
        type: boolean
        example: "true"
      used_by_clusters:
        type: string
        x-nullable: true
        example: "mds-prod, drm-prod"

  Response.SecretInfoList:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Response.SecretInfo'
      meta:
        type: object
        $ref: '#/definitions/Meta.Pagination'

  Response.Operation:
    type: object
    properties:
      id:
        type: integer
        example: 1
      cluster_name:
        type: string
        example: "drm-prod-cluster"
      started:
        type: string
        format: date-time
        example: "16.10.2023T11:20:00Z"
      finished:
        type: string
        format: date-time
        example: "16.10.2023T11:20:00Z"
        x-nullable: true
      type:
        type: string
        example: "deploy"
      status:
        type: string
        example: "success"
      environment:
        type: string
        example: "production"

  Request.Environment:
    type: object
    properties:
      name:
        type: string
        example: "production"
      description:
        type: string
        example: "environment for production"


  Response.OperationsList:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Response.Operation'
      meta:
        type: object
        $ref: '#/definitions/Meta.Pagination'

  Response.Environment:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: "production"
      description:
        type: string
        x-nullable: true
        example: "environment for production"
      created_at:
        type: string
        format: date-time
        example: "16.10.2023T11:20:00Z"
      updated_at:
        type: string
        format: date-time
        x-nullable: true
        example: "16.10.2023T11:20:00Z"

  Response.EnvironmentsList:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Response.Environment'
      meta:
        type: object
        $ref: '#/definitions/Meta.Pagination'

  Response.PostgresVersions:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Response.PostgresVersion'

  Response.PostgresVersion:
    type: object
    properties:
      major_version:
        type: integer
        example: 10
      release_date:
        type: string
        format: date
        example: "2017-10-05"
      end_of_life:
        type: string
        format: date
        example: "2022-11-10"

  Request.CreateSetting:
    type: object
    description: "Create new setting"
    properties:
      name:
        type: string
      value:
        type: object

  Request.ChangeSetting:
    type: object
    description: "Change setting"
    properties:
      value:
        type: object
        x-nullable: true

  Response.Setting:
    type: object
    description: "Setting"
    properties:
      id:
        type: integer
      name:
        type: string
      value:
        type: object
      created_at:
        type: string
        format: datetime
      updated_at:
        type: string
        format: datetime
        x-nullable: true

  Response.Settings:
    type: object
    description: "List of settings"
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Response.Setting'
      mete:
        type: object
        $ref: '#/definitions/Meta.Pagination'
