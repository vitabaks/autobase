// Code generated by go-swagger; DO NOT EDIT.

package environment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"postgresql-cluster-console/models"
)

// PostEnvironmentsOKCode is the HTTP code returned for type PostEnvironmentsOK
const PostEnvironmentsOKCode int = 200

/*
PostEnvironmentsOK OK

swagger:response postEnvironmentsOK
*/
type PostEnvironmentsOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseEnvironment `json:"body,omitempty"`
}

// NewPostEnvironmentsOK creates PostEnvironmentsOK with default headers values
func NewPostEnvironmentsOK() *PostEnvironmentsOK {

	return &PostEnvironmentsOK{}
}

// WithPayload adds the payload to the post environments o k response
func (o *PostEnvironmentsOK) WithPayload(payload *models.ResponseEnvironment) *PostEnvironmentsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post environments o k response
func (o *PostEnvironmentsOK) SetPayload(payload *models.ResponseEnvironment) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostEnvironmentsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostEnvironmentsBadRequestCode is the HTTP code returned for type PostEnvironmentsBadRequest
const PostEnvironmentsBadRequestCode int = 400

/*
PostEnvironmentsBadRequest Error

swagger:response postEnvironmentsBadRequest
*/
type PostEnvironmentsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseError `json:"body,omitempty"`
}

// NewPostEnvironmentsBadRequest creates PostEnvironmentsBadRequest with default headers values
func NewPostEnvironmentsBadRequest() *PostEnvironmentsBadRequest {

	return &PostEnvironmentsBadRequest{}
}

// WithPayload adds the payload to the post environments bad request response
func (o *PostEnvironmentsBadRequest) WithPayload(payload *models.ResponseError) *PostEnvironmentsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post environments bad request response
func (o *PostEnvironmentsBadRequest) SetPayload(payload *models.ResponseError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostEnvironmentsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
