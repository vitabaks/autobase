// Code generated by go-swagger; DO NOT EDIT.

package environment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostEnvironmentsHandlerFunc turns a function with the right signature into a post environments handler
type PostEnvironmentsHandlerFunc func(PostEnvironmentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostEnvironmentsHandlerFunc) Handle(params PostEnvironmentsParams) middleware.Responder {
	return fn(params)
}

// PostEnvironmentsHandler interface for that can handle valid post environments params
type PostEnvironmentsHandler interface {
	Handle(PostEnvironmentsParams) middleware.Responder
}

// NewPostEnvironments creates a new http.Handler for the post environments operation
func NewPostEnvironments(ctx *middleware.Context, handler PostEnvironmentsHandler) *PostEnvironments {
	return &PostEnvironments{Context: ctx, Handler: handler}
}

/*
	PostEnvironments swagger:route POST /environments environment postEnvironments

Create environment
*/
type PostEnvironments struct {
	Context *middleware.Context
	Handler PostEnvironmentsHandler
}

func (o *PostEnvironments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostEnvironmentsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
