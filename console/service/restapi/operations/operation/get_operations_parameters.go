// Code generated by go-swagger; DO NOT EDIT.

package operation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetOperationsParams creates a new GetOperationsParams object
//
// There are no default values defined in the spec.
func NewGetOperationsParams() GetOperationsParams {

	return GetOperationsParams{}
}

// GetOperationsParams contains all the bound params for the get operations operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetOperations
type GetOperationsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Filter by cluster_name
	  In: query
	*/
	ClusterName *string
	/*Operations started till this date
	  Required: true
	  In: query
	*/
	EndDate strfmt.DateTime
	/*Filter by environment
	  In: query
	*/
	Environment *string
	/*
	  In: query
	*/
	Limit *int64
	/*
	  In: query
	*/
	Offset *int64
	/*Required parameter for filter
	  Required: true
	  In: query
	*/
	ProjectID int64
	/*Sort by fields. Example: sort_by=cluster_name,-type,status,id,created_at,updated_at
	Supported valuese:
	- id
	- cluster_name
	- type
	- status
	- started_at
	- updated_at
	- cluster
	- environment

	 In: query
	*/
	SortBy *string
	/*Operations started after this date
	  Required: true
	  In: query
	*/
	StartDate strfmt.DateTime
	/*Filter by status
	  In: query
	*/
	Status *string
	/*Filter by type
	  In: query
	*/
	Type *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetOperationsParams() beforehand.
func (o *GetOperationsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qClusterName, qhkClusterName, _ := qs.GetOK("cluster_name")
	if err := o.bindClusterName(qClusterName, qhkClusterName, route.Formats); err != nil {
		res = append(res, err)
	}

	qEndDate, qhkEndDate, _ := qs.GetOK("end_date")
	if err := o.bindEndDate(qEndDate, qhkEndDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qEnvironment, qhkEnvironment, _ := qs.GetOK("environment")
	if err := o.bindEnvironment(qEnvironment, qhkEnvironment, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qProjectID, qhkProjectID, _ := qs.GetOK("project_id")
	if err := o.bindProjectID(qProjectID, qhkProjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy, qhkSortBy, _ := qs.GetOK("sort_by")
	if err := o.bindSortBy(qSortBy, qhkSortBy, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartDate, qhkStartDate, _ := qs.GetOK("start_date")
	if err := o.bindStartDate(qStartDate, qhkStartDate, route.Formats); err != nil {
		res = append(res, err)
	}

	qStatus, qhkStatus, _ := qs.GetOK("status")
	if err := o.bindStatus(qStatus, qhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	qType, qhkType, _ := qs.GetOK("type")
	if err := o.bindType(qType, qhkType, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClusterName binds and validates parameter ClusterName from query.
func (o *GetOperationsParams) bindClusterName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ClusterName = &raw

	return nil
}

// bindEndDate binds and validates parameter EndDate from query.
func (o *GetOperationsParams) bindEndDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("end_date", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("end_date", "query", raw); err != nil {
		return err
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("end_date", "query", "strfmt.DateTime", raw)
	}
	o.EndDate = *(value.(*strfmt.DateTime))

	if err := o.validateEndDate(formats); err != nil {
		return err
	}

	return nil
}

// validateEndDate carries on validations for parameter EndDate
func (o *GetOperationsParams) validateEndDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("end_date", "query", "date-time", o.EndDate.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindEnvironment binds and validates parameter Environment from query.
func (o *GetOperationsParams) bindEnvironment(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Environment = &raw

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetOperationsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetOperationsParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

// bindProjectID binds and validates parameter ProjectID from query.
func (o *GetOperationsParams) bindProjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("project_id", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("project_id", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("project_id", "query", "int64", raw)
	}
	o.ProjectID = value

	return nil
}

// bindSortBy binds and validates parameter SortBy from query.
func (o *GetOperationsParams) bindSortBy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SortBy = &raw

	return nil
}

// bindStartDate binds and validates parameter StartDate from query.
func (o *GetOperationsParams) bindStartDate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("start_date", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("start_date", "query", raw); err != nil {
		return err
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("start_date", "query", "strfmt.DateTime", raw)
	}
	o.StartDate = *(value.(*strfmt.DateTime))

	if err := o.validateStartDate(formats); err != nil {
		return err
	}

	return nil
}

// validateStartDate carries on validations for parameter StartDate
func (o *GetOperationsParams) validateStartDate(formats strfmt.Registry) error {

	if err := validate.FormatOf("start_date", "query", "date-time", o.StartDate.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindStatus binds and validates parameter Status from query.
func (o *GetOperationsParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Status = &raw

	return nil
}

// bindType binds and validates parameter Type from query.
func (o *GetOperationsParams) bindType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Type = &raw

	return nil
}
