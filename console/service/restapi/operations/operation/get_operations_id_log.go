// Code generated by go-swagger; DO NOT EDIT.

package operation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetOperationsIDLogHandlerFunc turns a function with the right signature into a get operations ID log handler
type GetOperationsIDLogHandlerFunc func(GetOperationsIDLogParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOperationsIDLogHandlerFunc) Handle(params GetOperationsIDLogParams) middleware.Responder {
	return fn(params)
}

// GetOperationsIDLogHandler interface for that can handle valid get operations ID log params
type GetOperationsIDLogHandler interface {
	Handle(GetOperationsIDLogParams) middleware.Responder
}

// NewGetOperationsIDLog creates a new http.Handler for the get operations ID log operation
func NewGetOperationsIDLog(ctx *middleware.Context, handler GetOperationsIDLogHandler) *GetOperationsIDLog {
	return &GetOperationsIDLog{Context: ctx, Handler: handler}
}

/*
	GetOperationsIDLog swagger:route GET /operations/{id}/log operation getOperationsIdLog

Get operation log by operation_id
*/
type GetOperationsIDLog struct {
	Context *middleware.Context
	Handler GetOperationsIDLogHandler
}

func (o *GetOperationsIDLog) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetOperationsIDLogParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
