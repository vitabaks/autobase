// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"postgresql-cluster-console/restapi/operations/cluster"
	"postgresql-cluster-console/restapi/operations/dictionary"
	"postgresql-cluster-console/restapi/operations/environment"
	"postgresql-cluster-console/restapi/operations/operation"
	"postgresql-cluster-console/restapi/operations/project"
	"postgresql-cluster-console/restapi/operations/secret"
	"postgresql-cluster-console/restapi/operations/setting"
	"postgresql-cluster-console/restapi/operations/system"
)

// NewPgConsoleAPI creates a new PgConsole instance
func NewPgConsoleAPI(spec *loads.Document) *PgConsoleAPI {
	return &PgConsoleAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),
		PlainTextConsumer: runtime.ConsumerFunc(func(r io.Reader, target interface{}) error {
			return errors.NotImplemented("plainText consumer has not yet been implemented")
		}),

		JSONProducer: runtime.JSONProducer(),

		ClusterDeleteClustersIDHandler: cluster.DeleteClustersIDHandlerFunc(func(params cluster.DeleteClustersIDParams) middleware.Responder {
			return middleware.NotImplemented("operation cluster.DeleteClustersID has not yet been implemented")
		}),
		EnvironmentDeleteEnvironmentsIDHandler: environment.DeleteEnvironmentsIDHandlerFunc(func(params environment.DeleteEnvironmentsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation environment.DeleteEnvironmentsID has not yet been implemented")
		}),
		ProjectDeleteProjectsIDHandler: project.DeleteProjectsIDHandlerFunc(func(params project.DeleteProjectsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation project.DeleteProjectsID has not yet been implemented")
		}),
		SecretDeleteSecretsIDHandler: secret.DeleteSecretsIDHandlerFunc(func(params secret.DeleteSecretsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation secret.DeleteSecretsID has not yet been implemented")
		}),
		ClusterDeleteServersIDHandler: cluster.DeleteServersIDHandlerFunc(func(params cluster.DeleteServersIDParams) middleware.Responder {
			return middleware.NotImplemented("operation cluster.DeleteServersID has not yet been implemented")
		}),
		ClusterGetClustersHandler: cluster.GetClustersHandlerFunc(func(params cluster.GetClustersParams) middleware.Responder {
			return middleware.NotImplemented("operation cluster.GetClusters has not yet been implemented")
		}),
		ClusterGetClustersDefaultNameHandler: cluster.GetClustersDefaultNameHandlerFunc(func(params cluster.GetClustersDefaultNameParams) middleware.Responder {
			return middleware.NotImplemented("operation cluster.GetClustersDefaultName has not yet been implemented")
		}),
		ClusterGetClustersIDHandler: cluster.GetClustersIDHandlerFunc(func(params cluster.GetClustersIDParams) middleware.Responder {
			return middleware.NotImplemented("operation cluster.GetClustersID has not yet been implemented")
		}),
		DictionaryGetDatabaseExtensionsHandler: dictionary.GetDatabaseExtensionsHandlerFunc(func(params dictionary.GetDatabaseExtensionsParams) middleware.Responder {
			return middleware.NotImplemented("operation dictionary.GetDatabaseExtensions has not yet been implemented")
		}),
		EnvironmentGetEnvironmentsHandler: environment.GetEnvironmentsHandlerFunc(func(params environment.GetEnvironmentsParams) middleware.Responder {
			return middleware.NotImplemented("operation environment.GetEnvironments has not yet been implemented")
		}),
		DictionaryGetExternalDeploymentsHandler: dictionary.GetExternalDeploymentsHandlerFunc(func(params dictionary.GetExternalDeploymentsParams) middleware.Responder {
			return middleware.NotImplemented("operation dictionary.GetExternalDeployments has not yet been implemented")
		}),
		OperationGetOperationsHandler: operation.GetOperationsHandlerFunc(func(params operation.GetOperationsParams) middleware.Responder {
			return middleware.NotImplemented("operation operation.GetOperations has not yet been implemented")
		}),
		OperationGetOperationsIDLogHandler: operation.GetOperationsIDLogHandlerFunc(func(params operation.GetOperationsIDLogParams) middleware.Responder {
			return middleware.NotImplemented("operation operation.GetOperationsIDLog has not yet been implemented")
		}),
		DictionaryGetPostgresVersionsHandler: dictionary.GetPostgresVersionsHandlerFunc(func(params dictionary.GetPostgresVersionsParams) middleware.Responder {
			return middleware.NotImplemented("operation dictionary.GetPostgresVersions has not yet been implemented")
		}),
		ProjectGetProjectsHandler: project.GetProjectsHandlerFunc(func(params project.GetProjectsParams) middleware.Responder {
			return middleware.NotImplemented("operation project.GetProjects has not yet been implemented")
		}),
		SecretGetSecretsHandler: secret.GetSecretsHandlerFunc(func(params secret.GetSecretsParams) middleware.Responder {
			return middleware.NotImplemented("operation secret.GetSecrets has not yet been implemented")
		}),
		SettingGetSettingsHandler: setting.GetSettingsHandlerFunc(func(params setting.GetSettingsParams) middleware.Responder {
			return middleware.NotImplemented("operation setting.GetSettings has not yet been implemented")
		}),
		SystemGetVersionHandler: system.GetVersionHandlerFunc(func(params system.GetVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation system.GetVersion has not yet been implemented")
		}),
		ProjectPatchProjectsIDHandler: project.PatchProjectsIDHandlerFunc(func(params project.PatchProjectsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation project.PatchProjectsID has not yet been implemented")
		}),
		SecretPatchSecretsIDHandler: secret.PatchSecretsIDHandlerFunc(func(params secret.PatchSecretsIDParams) middleware.Responder {
			return middleware.NotImplemented("operation secret.PatchSecretsID has not yet been implemented")
		}),
		SettingPatchSettingsNameHandler: setting.PatchSettingsNameHandlerFunc(func(params setting.PatchSettingsNameParams) middleware.Responder {
			return middleware.NotImplemented("operation setting.PatchSettingsName has not yet been implemented")
		}),
		ClusterPostClustersHandler: cluster.PostClustersHandlerFunc(func(params cluster.PostClustersParams) middleware.Responder {
			return middleware.NotImplemented("operation cluster.PostClusters has not yet been implemented")
		}),
		ClusterPostClustersIDRefreshHandler: cluster.PostClustersIDRefreshHandlerFunc(func(params cluster.PostClustersIDRefreshParams) middleware.Responder {
			return middleware.NotImplemented("operation cluster.PostClustersIDRefresh has not yet been implemented")
		}),
		ClusterPostClustersIDReinitHandler: cluster.PostClustersIDReinitHandlerFunc(func(params cluster.PostClustersIDReinitParams) middleware.Responder {
			return middleware.NotImplemented("operation cluster.PostClustersIDReinit has not yet been implemented")
		}),
		ClusterPostClustersIDReloadHandler: cluster.PostClustersIDReloadHandlerFunc(func(params cluster.PostClustersIDReloadParams) middleware.Responder {
			return middleware.NotImplemented("operation cluster.PostClustersIDReload has not yet been implemented")
		}),
		ClusterPostClustersIDRemoveHandler: cluster.PostClustersIDRemoveHandlerFunc(func(params cluster.PostClustersIDRemoveParams) middleware.Responder {
			return middleware.NotImplemented("operation cluster.PostClustersIDRemove has not yet been implemented")
		}),
		ClusterPostClustersIDRestartHandler: cluster.PostClustersIDRestartHandlerFunc(func(params cluster.PostClustersIDRestartParams) middleware.Responder {
			return middleware.NotImplemented("operation cluster.PostClustersIDRestart has not yet been implemented")
		}),
		ClusterPostClustersIDStartHandler: cluster.PostClustersIDStartHandlerFunc(func(params cluster.PostClustersIDStartParams) middleware.Responder {
			return middleware.NotImplemented("operation cluster.PostClustersIDStart has not yet been implemented")
		}),
		ClusterPostClustersIDStopHandler: cluster.PostClustersIDStopHandlerFunc(func(params cluster.PostClustersIDStopParams) middleware.Responder {
			return middleware.NotImplemented("operation cluster.PostClustersIDStop has not yet been implemented")
		}),
		EnvironmentPostEnvironmentsHandler: environment.PostEnvironmentsHandlerFunc(func(params environment.PostEnvironmentsParams) middleware.Responder {
			return middleware.NotImplemented("operation environment.PostEnvironments has not yet been implemented")
		}),
		ProjectPostProjectsHandler: project.PostProjectsHandlerFunc(func(params project.PostProjectsParams) middleware.Responder {
			return middleware.NotImplemented("operation project.PostProjects has not yet been implemented")
		}),
		SecretPostSecretsHandler: secret.PostSecretsHandlerFunc(func(params secret.PostSecretsParams) middleware.Responder {
			return middleware.NotImplemented("operation secret.PostSecrets has not yet been implemented")
		}),
		SettingPostSettingsHandler: setting.PostSettingsHandlerFunc(func(params setting.PostSettingsParams) middleware.Responder {
			return middleware.NotImplemented("operation setting.PostSettings has not yet been implemented")
		}),
	}
}

/*PgConsoleAPI API for autobase console */
type PgConsoleAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// PlainTextConsumer registers a consumer for the following mime types:
	//   - plain/text
	PlainTextConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// ClusterDeleteClustersIDHandler sets the operation handler for the delete clusters ID operation
	ClusterDeleteClustersIDHandler cluster.DeleteClustersIDHandler
	// EnvironmentDeleteEnvironmentsIDHandler sets the operation handler for the delete environments ID operation
	EnvironmentDeleteEnvironmentsIDHandler environment.DeleteEnvironmentsIDHandler
	// ProjectDeleteProjectsIDHandler sets the operation handler for the delete projects ID operation
	ProjectDeleteProjectsIDHandler project.DeleteProjectsIDHandler
	// SecretDeleteSecretsIDHandler sets the operation handler for the delete secrets ID operation
	SecretDeleteSecretsIDHandler secret.DeleteSecretsIDHandler
	// ClusterDeleteServersIDHandler sets the operation handler for the delete servers ID operation
	ClusterDeleteServersIDHandler cluster.DeleteServersIDHandler
	// ClusterGetClustersHandler sets the operation handler for the get clusters operation
	ClusterGetClustersHandler cluster.GetClustersHandler
	// ClusterGetClustersDefaultNameHandler sets the operation handler for the get clusters default name operation
	ClusterGetClustersDefaultNameHandler cluster.GetClustersDefaultNameHandler
	// ClusterGetClustersIDHandler sets the operation handler for the get clusters ID operation
	ClusterGetClustersIDHandler cluster.GetClustersIDHandler
	// DictionaryGetDatabaseExtensionsHandler sets the operation handler for the get database extensions operation
	DictionaryGetDatabaseExtensionsHandler dictionary.GetDatabaseExtensionsHandler
	// EnvironmentGetEnvironmentsHandler sets the operation handler for the get environments operation
	EnvironmentGetEnvironmentsHandler environment.GetEnvironmentsHandler
	// DictionaryGetExternalDeploymentsHandler sets the operation handler for the get external deployments operation
	DictionaryGetExternalDeploymentsHandler dictionary.GetExternalDeploymentsHandler
	// OperationGetOperationsHandler sets the operation handler for the get operations operation
	OperationGetOperationsHandler operation.GetOperationsHandler
	// OperationGetOperationsIDLogHandler sets the operation handler for the get operations ID log operation
	OperationGetOperationsIDLogHandler operation.GetOperationsIDLogHandler
	// DictionaryGetPostgresVersionsHandler sets the operation handler for the get postgres versions operation
	DictionaryGetPostgresVersionsHandler dictionary.GetPostgresVersionsHandler
	// ProjectGetProjectsHandler sets the operation handler for the get projects operation
	ProjectGetProjectsHandler project.GetProjectsHandler
	// SecretGetSecretsHandler sets the operation handler for the get secrets operation
	SecretGetSecretsHandler secret.GetSecretsHandler
	// SettingGetSettingsHandler sets the operation handler for the get settings operation
	SettingGetSettingsHandler setting.GetSettingsHandler
	// SystemGetVersionHandler sets the operation handler for the get version operation
	SystemGetVersionHandler system.GetVersionHandler
	// ProjectPatchProjectsIDHandler sets the operation handler for the patch projects ID operation
	ProjectPatchProjectsIDHandler project.PatchProjectsIDHandler
	// SecretPatchSecretsIDHandler sets the operation handler for the patch secrets ID operation
	SecretPatchSecretsIDHandler secret.PatchSecretsIDHandler
	// SettingPatchSettingsNameHandler sets the operation handler for the patch settings name operation
	SettingPatchSettingsNameHandler setting.PatchSettingsNameHandler
	// ClusterPostClustersHandler sets the operation handler for the post clusters operation
	ClusterPostClustersHandler cluster.PostClustersHandler
	// ClusterPostClustersIDRefreshHandler sets the operation handler for the post clusters ID refresh operation
	ClusterPostClustersIDRefreshHandler cluster.PostClustersIDRefreshHandler
	// ClusterPostClustersIDReinitHandler sets the operation handler for the post clusters ID reinit operation
	ClusterPostClustersIDReinitHandler cluster.PostClustersIDReinitHandler
	// ClusterPostClustersIDReloadHandler sets the operation handler for the post clusters ID reload operation
	ClusterPostClustersIDReloadHandler cluster.PostClustersIDReloadHandler
	// ClusterPostClustersIDRemoveHandler sets the operation handler for the post clusters ID remove operation
	ClusterPostClustersIDRemoveHandler cluster.PostClustersIDRemoveHandler
	// ClusterPostClustersIDRestartHandler sets the operation handler for the post clusters ID restart operation
	ClusterPostClustersIDRestartHandler cluster.PostClustersIDRestartHandler
	// ClusterPostClustersIDStartHandler sets the operation handler for the post clusters ID start operation
	ClusterPostClustersIDStartHandler cluster.PostClustersIDStartHandler
	// ClusterPostClustersIDStopHandler sets the operation handler for the post clusters ID stop operation
	ClusterPostClustersIDStopHandler cluster.PostClustersIDStopHandler
	// EnvironmentPostEnvironmentsHandler sets the operation handler for the post environments operation
	EnvironmentPostEnvironmentsHandler environment.PostEnvironmentsHandler
	// ProjectPostProjectsHandler sets the operation handler for the post projects operation
	ProjectPostProjectsHandler project.PostProjectsHandler
	// SecretPostSecretsHandler sets the operation handler for the post secrets operation
	SecretPostSecretsHandler secret.PostSecretsHandler
	// SettingPostSettingsHandler sets the operation handler for the post settings operation
	SettingPostSettingsHandler setting.PostSettingsHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *PgConsoleAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *PgConsoleAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *PgConsoleAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *PgConsoleAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *PgConsoleAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *PgConsoleAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *PgConsoleAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *PgConsoleAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *PgConsoleAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the PgConsoleAPI
func (o *PgConsoleAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.PlainTextConsumer == nil {
		unregistered = append(unregistered, "PlainTextConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.ClusterDeleteClustersIDHandler == nil {
		unregistered = append(unregistered, "cluster.DeleteClustersIDHandler")
	}
	if o.EnvironmentDeleteEnvironmentsIDHandler == nil {
		unregistered = append(unregistered, "environment.DeleteEnvironmentsIDHandler")
	}
	if o.ProjectDeleteProjectsIDHandler == nil {
		unregistered = append(unregistered, "project.DeleteProjectsIDHandler")
	}
	if o.SecretDeleteSecretsIDHandler == nil {
		unregistered = append(unregistered, "secret.DeleteSecretsIDHandler")
	}
	if o.ClusterDeleteServersIDHandler == nil {
		unregistered = append(unregistered, "cluster.DeleteServersIDHandler")
	}
	if o.ClusterGetClustersHandler == nil {
		unregistered = append(unregistered, "cluster.GetClustersHandler")
	}
	if o.ClusterGetClustersDefaultNameHandler == nil {
		unregistered = append(unregistered, "cluster.GetClustersDefaultNameHandler")
	}
	if o.ClusterGetClustersIDHandler == nil {
		unregistered = append(unregistered, "cluster.GetClustersIDHandler")
	}
	if o.DictionaryGetDatabaseExtensionsHandler == nil {
		unregistered = append(unregistered, "dictionary.GetDatabaseExtensionsHandler")
	}
	if o.EnvironmentGetEnvironmentsHandler == nil {
		unregistered = append(unregistered, "environment.GetEnvironmentsHandler")
	}
	if o.DictionaryGetExternalDeploymentsHandler == nil {
		unregistered = append(unregistered, "dictionary.GetExternalDeploymentsHandler")
	}
	if o.OperationGetOperationsHandler == nil {
		unregistered = append(unregistered, "operation.GetOperationsHandler")
	}
	if o.OperationGetOperationsIDLogHandler == nil {
		unregistered = append(unregistered, "operation.GetOperationsIDLogHandler")
	}
	if o.DictionaryGetPostgresVersionsHandler == nil {
		unregistered = append(unregistered, "dictionary.GetPostgresVersionsHandler")
	}
	if o.ProjectGetProjectsHandler == nil {
		unregistered = append(unregistered, "project.GetProjectsHandler")
	}
	if o.SecretGetSecretsHandler == nil {
		unregistered = append(unregistered, "secret.GetSecretsHandler")
	}
	if o.SettingGetSettingsHandler == nil {
		unregistered = append(unregistered, "setting.GetSettingsHandler")
	}
	if o.SystemGetVersionHandler == nil {
		unregistered = append(unregistered, "system.GetVersionHandler")
	}
	if o.ProjectPatchProjectsIDHandler == nil {
		unregistered = append(unregistered, "project.PatchProjectsIDHandler")
	}
	if o.SecretPatchSecretsIDHandler == nil {
		unregistered = append(unregistered, "secret.PatchSecretsIDHandler")
	}
	if o.SettingPatchSettingsNameHandler == nil {
		unregistered = append(unregistered, "setting.PatchSettingsNameHandler")
	}
	if o.ClusterPostClustersHandler == nil {
		unregistered = append(unregistered, "cluster.PostClustersHandler")
	}
	if o.ClusterPostClustersIDRefreshHandler == nil {
		unregistered = append(unregistered, "cluster.PostClustersIDRefreshHandler")
	}
	if o.ClusterPostClustersIDReinitHandler == nil {
		unregistered = append(unregistered, "cluster.PostClustersIDReinitHandler")
	}
	if o.ClusterPostClustersIDReloadHandler == nil {
		unregistered = append(unregistered, "cluster.PostClustersIDReloadHandler")
	}
	if o.ClusterPostClustersIDRemoveHandler == nil {
		unregistered = append(unregistered, "cluster.PostClustersIDRemoveHandler")
	}
	if o.ClusterPostClustersIDRestartHandler == nil {
		unregistered = append(unregistered, "cluster.PostClustersIDRestartHandler")
	}
	if o.ClusterPostClustersIDStartHandler == nil {
		unregistered = append(unregistered, "cluster.PostClustersIDStartHandler")
	}
	if o.ClusterPostClustersIDStopHandler == nil {
		unregistered = append(unregistered, "cluster.PostClustersIDStopHandler")
	}
	if o.EnvironmentPostEnvironmentsHandler == nil {
		unregistered = append(unregistered, "environment.PostEnvironmentsHandler")
	}
	if o.ProjectPostProjectsHandler == nil {
		unregistered = append(unregistered, "project.PostProjectsHandler")
	}
	if o.SecretPostSecretsHandler == nil {
		unregistered = append(unregistered, "secret.PostSecretsHandler")
	}
	if o.SettingPostSettingsHandler == nil {
		unregistered = append(unregistered, "setting.PostSettingsHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *PgConsoleAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *PgConsoleAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *PgConsoleAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *PgConsoleAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "plain/text":
			result["plain/text"] = o.PlainTextConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *PgConsoleAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *PgConsoleAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the pg console API
func (o *PgConsoleAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *PgConsoleAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/clusters/{id}"] = cluster.NewDeleteClustersID(o.context, o.ClusterDeleteClustersIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/environments/{id}"] = environment.NewDeleteEnvironmentsID(o.context, o.EnvironmentDeleteEnvironmentsIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{id}"] = project.NewDeleteProjectsID(o.context, o.ProjectDeleteProjectsIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/secrets/{id}"] = secret.NewDeleteSecretsID(o.context, o.SecretDeleteSecretsIDHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/servers/{id}"] = cluster.NewDeleteServersID(o.context, o.ClusterDeleteServersIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/clusters"] = cluster.NewGetClusters(o.context, o.ClusterGetClustersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/clusters/default_name"] = cluster.NewGetClustersDefaultName(o.context, o.ClusterGetClustersDefaultNameHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/clusters/{id}"] = cluster.NewGetClustersID(o.context, o.ClusterGetClustersIDHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/database/extensions"] = dictionary.NewGetDatabaseExtensions(o.context, o.DictionaryGetDatabaseExtensionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/environments"] = environment.NewGetEnvironments(o.context, o.EnvironmentGetEnvironmentsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/external/deployments"] = dictionary.NewGetExternalDeployments(o.context, o.DictionaryGetExternalDeploymentsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/operations"] = operation.NewGetOperations(o.context, o.OperationGetOperationsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/operations/{id}/log"] = operation.NewGetOperationsIDLog(o.context, o.OperationGetOperationsIDLogHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/postgres_versions"] = dictionary.NewGetPostgresVersions(o.context, o.DictionaryGetPostgresVersionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects"] = project.NewGetProjects(o.context, o.ProjectGetProjectsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/secrets"] = secret.NewGetSecrets(o.context, o.SecretGetSecretsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/settings"] = setting.NewGetSettings(o.context, o.SettingGetSettingsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/version"] = system.NewGetVersion(o.context, o.SystemGetVersionHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/projects/{id}"] = project.NewPatchProjectsID(o.context, o.ProjectPatchProjectsIDHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/secrets/{id}"] = secret.NewPatchSecretsID(o.context, o.SecretPatchSecretsIDHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/settings/{name}"] = setting.NewPatchSettingsName(o.context, o.SettingPatchSettingsNameHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clusters"] = cluster.NewPostClusters(o.context, o.ClusterPostClustersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clusters/{id}/refresh"] = cluster.NewPostClustersIDRefresh(o.context, o.ClusterPostClustersIDRefreshHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clusters/{id}/reinit"] = cluster.NewPostClustersIDReinit(o.context, o.ClusterPostClustersIDReinitHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clusters/{id}/reload"] = cluster.NewPostClustersIDReload(o.context, o.ClusterPostClustersIDReloadHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clusters/{id}/remove"] = cluster.NewPostClustersIDRemove(o.context, o.ClusterPostClustersIDRemoveHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clusters/{id}/restart"] = cluster.NewPostClustersIDRestart(o.context, o.ClusterPostClustersIDRestartHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clusters/{id}/start"] = cluster.NewPostClustersIDStart(o.context, o.ClusterPostClustersIDStartHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clusters/{id}/stop"] = cluster.NewPostClustersIDStop(o.context, o.ClusterPostClustersIDStopHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/environments"] = environment.NewPostEnvironments(o.context, o.EnvironmentPostEnvironmentsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects"] = project.NewPostProjects(o.context, o.ProjectPostProjectsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/secrets"] = secret.NewPostSecrets(o.context, o.SecretPostSecretsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/settings"] = setting.NewPostSettings(o.context, o.SettingPostSettingsHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *PgConsoleAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *PgConsoleAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *PgConsoleAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *PgConsoleAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *PgConsoleAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
