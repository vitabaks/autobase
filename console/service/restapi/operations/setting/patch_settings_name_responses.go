// Code generated by go-swagger; DO NOT EDIT.

package setting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"postgresql-cluster-console/models"
)

// PatchSettingsNameOKCode is the HTTP code returned for type PatchSettingsNameOK
const PatchSettingsNameOKCode int = 200

/*
PatchSettingsNameOK OK

swagger:response patchSettingsNameOK
*/
type PatchSettingsNameOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseSetting `json:"body,omitempty"`
}

// NewPatchSettingsNameOK creates PatchSettingsNameOK with default headers values
func NewPatchSettingsNameOK() *PatchSettingsNameOK {

	return &PatchSettingsNameOK{}
}

// WithPayload adds the payload to the patch settings name o k response
func (o *PatchSettingsNameOK) WithPayload(payload *models.ResponseSetting) *PatchSettingsNameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch settings name o k response
func (o *PatchSettingsNameOK) SetPayload(payload *models.ResponseSetting) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchSettingsNameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchSettingsNameBadRequestCode is the HTTP code returned for type PatchSettingsNameBadRequest
const PatchSettingsNameBadRequestCode int = 400

/*
PatchSettingsNameBadRequest Error

swagger:response patchSettingsNameBadRequest
*/
type PatchSettingsNameBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseError `json:"body,omitempty"`
}

// NewPatchSettingsNameBadRequest creates PatchSettingsNameBadRequest with default headers values
func NewPatchSettingsNameBadRequest() *PatchSettingsNameBadRequest {

	return &PatchSettingsNameBadRequest{}
}

// WithPayload adds the payload to the patch settings name bad request response
func (o *PatchSettingsNameBadRequest) WithPayload(payload *models.ResponseError) *PatchSettingsNameBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch settings name bad request response
func (o *PatchSettingsNameBadRequest) SetPayload(payload *models.ResponseError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchSettingsNameBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
