// Code generated by go-swagger; DO NOT EDIT.

package setting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"postgresql-cluster-console/models"
)

// PostSettingsOKCode is the HTTP code returned for type PostSettingsOK
const PostSettingsOKCode int = 200

/*
PostSettingsOK OK

swagger:response postSettingsOK
*/
type PostSettingsOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseSetting `json:"body,omitempty"`
}

// NewPostSettingsOK creates PostSettingsOK with default headers values
func NewPostSettingsOK() *PostSettingsOK {

	return &PostSettingsOK{}
}

// WithPayload adds the payload to the post settings o k response
func (o *PostSettingsOK) WithPayload(payload *models.ResponseSetting) *PostSettingsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post settings o k response
func (o *PostSettingsOK) SetPayload(payload *models.ResponseSetting) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSettingsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostSettingsBadRequestCode is the HTTP code returned for type PostSettingsBadRequest
const PostSettingsBadRequestCode int = 400

/*
PostSettingsBadRequest Error

swagger:response postSettingsBadRequest
*/
type PostSettingsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseError `json:"body,omitempty"`
}

// NewPostSettingsBadRequest creates PostSettingsBadRequest with default headers values
func NewPostSettingsBadRequest() *PostSettingsBadRequest {

	return &PostSettingsBadRequest{}
}

// WithPayload adds the payload to the post settings bad request response
func (o *PostSettingsBadRequest) WithPayload(payload *models.ResponseError) *PostSettingsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post settings bad request response
func (o *PostSettingsBadRequest) SetPayload(payload *models.ResponseError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSettingsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
