// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"postgresql-cluster-console/models"
)

// DeleteSecretsIDNoContentCode is the HTTP code returned for type DeleteSecretsIDNoContent
const DeleteSecretsIDNoContentCode int = 204

/*
DeleteSecretsIDNoContent OK

swagger:response deleteSecretsIdNoContent
*/
type DeleteSecretsIDNoContent struct {
}

// NewDeleteSecretsIDNoContent creates DeleteSecretsIDNoContent with default headers values
func NewDeleteSecretsIDNoContent() *DeleteSecretsIDNoContent {

	return &DeleteSecretsIDNoContent{}
}

// WriteResponse to the client
func (o *DeleteSecretsIDNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteSecretsIDBadRequestCode is the HTTP code returned for type DeleteSecretsIDBadRequest
const DeleteSecretsIDBadRequestCode int = 400

/*
DeleteSecretsIDBadRequest Error

swagger:response deleteSecretsIdBadRequest
*/
type DeleteSecretsIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseError `json:"body,omitempty"`
}

// NewDeleteSecretsIDBadRequest creates DeleteSecretsIDBadRequest with default headers values
func NewDeleteSecretsIDBadRequest() *DeleteSecretsIDBadRequest {

	return &DeleteSecretsIDBadRequest{}
}

// WithPayload adds the payload to the delete secrets Id bad request response
func (o *DeleteSecretsIDBadRequest) WithPayload(payload *models.ResponseError) *DeleteSecretsIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete secrets Id bad request response
func (o *DeleteSecretsIDBadRequest) SetPayload(payload *models.ResponseError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteSecretsIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
