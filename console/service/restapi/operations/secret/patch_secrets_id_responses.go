// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"postgresql-cluster-console/models"
)

// PatchSecretsIDOKCode is the HTTP code returned for type PatchSecretsIDOK
const PatchSecretsIDOKCode int = 200

/*
PatchSecretsIDOK OK

swagger:response patchSecretsIdOK
*/
type PatchSecretsIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseSecretInfo `json:"body,omitempty"`
}

// NewPatchSecretsIDOK creates PatchSecretsIDOK with default headers values
func NewPatchSecretsIDOK() *PatchSecretsIDOK {

	return &PatchSecretsIDOK{}
}

// WithPayload adds the payload to the patch secrets Id o k response
func (o *PatchSecretsIDOK) WithPayload(payload *models.ResponseSecretInfo) *PatchSecretsIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch secrets Id o k response
func (o *PatchSecretsIDOK) SetPayload(payload *models.ResponseSecretInfo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchSecretsIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchSecretsIDBadRequestCode is the HTTP code returned for type PatchSecretsIDBadRequest
const PatchSecretsIDBadRequestCode int = 400

/*
PatchSecretsIDBadRequest Error

swagger:response patchSecretsIdBadRequest
*/
type PatchSecretsIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseError `json:"body,omitempty"`
}

// NewPatchSecretsIDBadRequest creates PatchSecretsIDBadRequest with default headers values
func NewPatchSecretsIDBadRequest() *PatchSecretsIDBadRequest {

	return &PatchSecretsIDBadRequest{}
}

// WithPayload adds the payload to the patch secrets Id bad request response
func (o *PatchSecretsIDBadRequest) WithPayload(payload *models.ResponseError) *PatchSecretsIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch secrets Id bad request response
func (o *PatchSecretsIDBadRequest) SetPayload(payload *models.ResponseError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchSecretsIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
