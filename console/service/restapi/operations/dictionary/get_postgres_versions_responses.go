// Code generated by go-swagger; DO NOT EDIT.

package dictionary

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"postgresql-cluster-console/models"
)

// GetPostgresVersionsOKCode is the HTTP code returned for type GetPostgresVersionsOK
const GetPostgresVersionsOKCode int = 200

/*
GetPostgresVersionsOK OK

swagger:response getPostgresVersionsOK
*/
type GetPostgresVersionsOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResponsePostgresVersions `json:"body,omitempty"`
}

// NewGetPostgresVersionsOK creates GetPostgresVersionsOK with default headers values
func NewGetPostgresVersionsOK() *GetPostgresVersionsOK {

	return &GetPostgresVersionsOK{}
}

// WithPayload adds the payload to the get postgres versions o k response
func (o *GetPostgresVersionsOK) WithPayload(payload *models.ResponsePostgresVersions) *GetPostgresVersionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get postgres versions o k response
func (o *GetPostgresVersionsOK) SetPayload(payload *models.ResponsePostgresVersions) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPostgresVersionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPostgresVersionsBadRequestCode is the HTTP code returned for type GetPostgresVersionsBadRequest
const GetPostgresVersionsBadRequestCode int = 400

/*
GetPostgresVersionsBadRequest Error

swagger:response getPostgresVersionsBadRequest
*/
type GetPostgresVersionsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseError `json:"body,omitempty"`
}

// NewGetPostgresVersionsBadRequest creates GetPostgresVersionsBadRequest with default headers values
func NewGetPostgresVersionsBadRequest() *GetPostgresVersionsBadRequest {

	return &GetPostgresVersionsBadRequest{}
}

// WithPayload adds the payload to the get postgres versions bad request response
func (o *GetPostgresVersionsBadRequest) WithPayload(payload *models.ResponseError) *GetPostgresVersionsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get postgres versions bad request response
func (o *GetPostgresVersionsBadRequest) SetPayload(payload *models.ResponseError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPostgresVersionsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
