// Code generated by go-swagger; DO NOT EDIT.

package dictionary

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPostgresVersionsHandlerFunc turns a function with the right signature into a get postgres versions handler
type GetPostgresVersionsHandlerFunc func(GetPostgresVersionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPostgresVersionsHandlerFunc) Handle(params GetPostgresVersionsParams) middleware.Responder {
	return fn(params)
}

// GetPostgresVersionsHandler interface for that can handle valid get postgres versions params
type GetPostgresVersionsHandler interface {
	Handle(GetPostgresVersionsParams) middleware.Responder
}

// NewGetPostgresVersions creates a new http.Handler for the get postgres versions operation
func NewGetPostgresVersions(ctx *middleware.Context, handler GetPostgresVersionsHandler) *GetPostgresVersions {
	return &GetPostgresVersions{Context: ctx, Handler: handler}
}

/*
	GetPostgresVersions swagger:route GET /postgres_versions dictionary getPostgresVersions

Get supported postgres versions
*/
type GetPostgresVersions struct {
	Context *middleware.Context
	Handler GetPostgresVersionsHandler
}

func (o *GetPostgresVersions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPostgresVersionsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
