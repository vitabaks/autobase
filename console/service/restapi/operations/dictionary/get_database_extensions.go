// Code generated by go-swagger; DO NOT EDIT.

package dictionary

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetDatabaseExtensionsHandlerFunc turns a function with the right signature into a get database extensions handler
type GetDatabaseExtensionsHandlerFunc func(GetDatabaseExtensionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDatabaseExtensionsHandlerFunc) Handle(params GetDatabaseExtensionsParams) middleware.Responder {
	return fn(params)
}

// GetDatabaseExtensionsHandler interface for that can handle valid get database extensions params
type GetDatabaseExtensionsHandler interface {
	Handle(GetDatabaseExtensionsParams) middleware.Responder
}

// NewGetDatabaseExtensions creates a new http.Handler for the get database extensions operation
func NewGetDatabaseExtensions(ctx *middleware.Context, handler GetDatabaseExtensionsHandler) *GetDatabaseExtensions {
	return &GetDatabaseExtensions{Context: ctx, Handler: handler}
}

/*
	GetDatabaseExtensions swagger:route GET /database/extensions dictionary getDatabaseExtensions

Info about available database extensions
*/
type GetDatabaseExtensions struct {
	Context *middleware.Context
	Handler GetDatabaseExtensionsHandler
}

func (o *GetDatabaseExtensions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetDatabaseExtensionsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
