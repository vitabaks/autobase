// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"postgresql-cluster-console/models"
)

// PatchProjectsIDOKCode is the HTTP code returned for type PatchProjectsIDOK
const PatchProjectsIDOKCode int = 200

/*
PatchProjectsIDOK OK

swagger:response patchProjectsIdOK
*/
type PatchProjectsIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseProject `json:"body,omitempty"`
}

// NewPatchProjectsIDOK creates PatchProjectsIDOK with default headers values
func NewPatchProjectsIDOK() *PatchProjectsIDOK {

	return &PatchProjectsIDOK{}
}

// WithPayload adds the payload to the patch projects Id o k response
func (o *PatchProjectsIDOK) WithPayload(payload *models.ResponseProject) *PatchProjectsIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch projects Id o k response
func (o *PatchProjectsIDOK) SetPayload(payload *models.ResponseProject) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchProjectsIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchProjectsIDBadRequestCode is the HTTP code returned for type PatchProjectsIDBadRequest
const PatchProjectsIDBadRequestCode int = 400

/*
PatchProjectsIDBadRequest Error

swagger:response patchProjectsIdBadRequest
*/
type PatchProjectsIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseError `json:"body,omitempty"`
}

// NewPatchProjectsIDBadRequest creates PatchProjectsIDBadRequest with default headers values
func NewPatchProjectsIDBadRequest() *PatchProjectsIDBadRequest {

	return &PatchProjectsIDBadRequest{}
}

// WithPayload adds the payload to the patch projects Id bad request response
func (o *PatchProjectsIDBadRequest) WithPayload(payload *models.ResponseError) *PatchProjectsIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch projects Id bad request response
func (o *PatchProjectsIDBadRequest) SetPayload(payload *models.ResponseError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchProjectsIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
