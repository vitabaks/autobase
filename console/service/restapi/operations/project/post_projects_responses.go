// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"postgresql-cluster-console/models"
)

// PostProjectsOKCode is the HTTP code returned for type PostProjectsOK
const PostProjectsOKCode int = 200

/*
PostProjectsOK OK

swagger:response postProjectsOK
*/
type PostProjectsOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseProject `json:"body,omitempty"`
}

// NewPostProjectsOK creates PostProjectsOK with default headers values
func NewPostProjectsOK() *PostProjectsOK {

	return &PostProjectsOK{}
}

// WithPayload adds the payload to the post projects o k response
func (o *PostProjectsOK) WithPayload(payload *models.ResponseProject) *PostProjectsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post projects o k response
func (o *PostProjectsOK) SetPayload(payload *models.ResponseProject) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostProjectsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostProjectsBadRequestCode is the HTTP code returned for type PostProjectsBadRequest
const PostProjectsBadRequestCode int = 400

/*
PostProjectsBadRequest Error

swagger:response postProjectsBadRequest
*/
type PostProjectsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseError `json:"body,omitempty"`
}

// NewPostProjectsBadRequest creates PostProjectsBadRequest with default headers values
func NewPostProjectsBadRequest() *PostProjectsBadRequest {

	return &PostProjectsBadRequest{}
}

// WithPayload adds the payload to the post projects bad request response
func (o *PostProjectsBadRequest) WithPayload(payload *models.ResponseError) *PostProjectsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post projects bad request response
func (o *PostProjectsBadRequest) SetPayload(payload *models.ResponseError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostProjectsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
