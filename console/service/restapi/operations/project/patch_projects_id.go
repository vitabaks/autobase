// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchProjectsIDHandlerFunc turns a function with the right signature into a patch projects ID handler
type PatchProjectsIDHandlerFunc func(PatchProjectsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchProjectsIDHandlerFunc) Handle(params PatchProjectsIDParams) middleware.Responder {
	return fn(params)
}

// PatchProjectsIDHandler interface for that can handle valid patch projects ID params
type PatchProjectsIDHandler interface {
	Handle(PatchProjectsIDParams) middleware.Responder
}

// NewPatchProjectsID creates a new http.Handler for the patch projects ID operation
func NewPatchProjectsID(ctx *middleware.Context, handler PatchProjectsIDHandler) *PatchProjectsID {
	return &PatchProjectsID{Context: ctx, Handler: handler}
}

/*
	PatchProjectsID swagger:route PATCH /projects/{id} project patchProjectsId

Change project
*/
type PatchProjectsID struct {
	Context *middleware.Context
	Handler PatchProjectsIDHandler
}

func (o *PatchProjectsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchProjectsIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
