// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostClustersHandlerFunc turns a function with the right signature into a post clusters handler
type PostClustersHandlerFunc func(PostClustersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostClustersHandlerFunc) Handle(params PostClustersParams) middleware.Responder {
	return fn(params)
}

// PostClustersHandler interface for that can handle valid post clusters params
type PostClustersHandler interface {
	Handle(PostClustersParams) middleware.Responder
}

// NewPostClusters creates a new http.Handler for the post clusters operation
func NewPostClusters(ctx *middleware.Context, handler PostClustersHandler) *PostClusters {
	return &PostClusters{Context: ctx, Handler: handler}
}

/*
	PostClusters swagger:route POST /clusters cluster postClusters

Create new cluster
*/
type PostClusters struct {
	Context *middleware.Context
	Handler PostClustersHandler
}

func (o *PostClusters) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostClustersParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
