// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteServersIDHandlerFunc turns a function with the right signature into a delete servers ID handler
type DeleteServersIDHandlerFunc func(DeleteServersIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteServersIDHandlerFunc) Handle(params DeleteServersIDParams) middleware.Responder {
	return fn(params)
}

// DeleteServersIDHandler interface for that can handle valid delete servers ID params
type DeleteServersIDHandler interface {
	Handle(DeleteServersIDParams) middleware.Responder
}

// NewDeleteServersID creates a new http.Handler for the delete servers ID operation
func NewDeleteServersID(ctx *middleware.Context, handler DeleteServersIDHandler) *DeleteServersID {
	return &DeleteServersID{Context: ctx, Handler: handler}
}

/*
	DeleteServersID swagger:route DELETE /servers/{id} cluster deleteServersId

Delete server (from the console database)
*/
type DeleteServersID struct {
	Context *middleware.Context
	Handler DeleteServersIDHandler
}

func (o *DeleteServersID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteServersIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
