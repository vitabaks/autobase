// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"postgresql-cluster-console/models"
)

// PostClustersOKCode is the HTTP code returned for type PostClustersOK
const PostClustersOKCode int = 200

/*
PostClustersOK OK

swagger:response postClustersOK
*/
type PostClustersOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseClusterCreate `json:"body,omitempty"`
}

// NewPostClustersOK creates PostClustersOK with default headers values
func NewPostClustersOK() *PostClustersOK {

	return &PostClustersOK{}
}

// WithPayload adds the payload to the post clusters o k response
func (o *PostClustersOK) WithPayload(payload *models.ResponseClusterCreate) *PostClustersOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post clusters o k response
func (o *PostClustersOK) SetPayload(payload *models.ResponseClusterCreate) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostClustersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostClustersBadRequestCode is the HTTP code returned for type PostClustersBadRequest
const PostClustersBadRequestCode int = 400

/*
PostClustersBadRequest Error

swagger:response postClustersBadRequest
*/
type PostClustersBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseError `json:"body,omitempty"`
}

// NewPostClustersBadRequest creates PostClustersBadRequest with default headers values
func NewPostClustersBadRequest() *PostClustersBadRequest {

	return &PostClustersBadRequest{}
}

// WithPayload adds the payload to the post clusters bad request response
func (o *PostClustersBadRequest) WithPayload(payload *models.ResponseError) *PostClustersBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post clusters bad request response
func (o *PostClustersBadRequest) SetPayload(payload *models.ResponseError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostClustersBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
