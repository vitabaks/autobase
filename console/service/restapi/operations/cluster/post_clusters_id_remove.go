// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostClustersIDRemoveHandlerFunc turns a function with the right signature into a post clusters ID remove handler
type PostClustersIDRemoveHandlerFunc func(PostClustersIDRemoveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostClustersIDRemoveHandlerFunc) Handle(params PostClustersIDRemoveParams) middleware.Responder {
	return fn(params)
}

// PostClustersIDRemoveHandler interface for that can handle valid post clusters ID remove params
type PostClustersIDRemoveHandler interface {
	Handle(PostClustersIDRemoveParams) middleware.Responder
}

// NewPostClustersIDRemove creates a new http.Handler for the post clusters ID remove operation
func NewPostClustersIDRemove(ctx *middleware.Context, handler PostClustersIDRemoveHandler) *PostClustersIDRemove {
	return &PostClustersIDRemove{Context: ctx, Handler: handler}
}

/*
	PostClustersIDRemove swagger:route POST /clusters/{id}/remove cluster postClustersIdRemove

Remove cluster
*/
type PostClustersIDRemove struct {
	Context *middleware.Context
	Handler PostClustersIDRemoveHandler
}

func (o *PostClustersIDRemove) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostClustersIDRemoveParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
