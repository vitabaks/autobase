// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"postgresql-cluster-console/models"
)

// DeleteClustersIDNoContentCode is the HTTP code returned for type DeleteClustersIDNoContent
const DeleteClustersIDNoContentCode int = 204

/*
DeleteClustersIDNoContent OK

swagger:response deleteClustersIdNoContent
*/
type DeleteClustersIDNoContent struct {
}

// NewDeleteClustersIDNoContent creates DeleteClustersIDNoContent with default headers values
func NewDeleteClustersIDNoContent() *DeleteClustersIDNoContent {

	return &DeleteClustersIDNoContent{}
}

// WriteResponse to the client
func (o *DeleteClustersIDNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteClustersIDBadRequestCode is the HTTP code returned for type DeleteClustersIDBadRequest
const DeleteClustersIDBadRequestCode int = 400

/*
DeleteClustersIDBadRequest Error

swagger:response deleteClustersIdBadRequest
*/
type DeleteClustersIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ResponseError `json:"body,omitempty"`
}

// NewDeleteClustersIDBadRequest creates DeleteClustersIDBadRequest with default headers values
func NewDeleteClustersIDBadRequest() *DeleteClustersIDBadRequest {

	return &DeleteClustersIDBadRequest{}
}

// WithPayload adds the payload to the delete clusters Id bad request response
func (o *DeleteClustersIDBadRequest) WithPayload(payload *models.ResponseError) *DeleteClustersIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete clusters Id bad request response
func (o *DeleteClustersIDBadRequest) SetPayload(payload *models.ResponseError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteClustersIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
