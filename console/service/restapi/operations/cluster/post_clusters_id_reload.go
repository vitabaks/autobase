// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostClustersIDReloadHandlerFunc turns a function with the right signature into a post clusters ID reload handler
type PostClustersIDReloadHandlerFunc func(PostClustersIDReloadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostClustersIDReloadHandlerFunc) Handle(params PostClustersIDReloadParams) middleware.Responder {
	return fn(params)
}

// PostClustersIDReloadHandler interface for that can handle valid post clusters ID reload params
type PostClustersIDReloadHandler interface {
	Handle(PostClustersIDReloadParams) middleware.Responder
}

// NewPostClustersIDReload creates a new http.Handler for the post clusters ID reload operation
func NewPostClustersIDReload(ctx *middleware.Context, handler PostClustersIDReloadHandler) *PostClustersIDReload {
	return &PostClustersIDReload{Context: ctx, Handler: handler}
}

/*
	PostClustersIDReload swagger:route POST /clusters/{id}/reload cluster postClustersIdReload

Reload cluster
*/
type PostClustersIDReload struct {
	Context *middleware.Context
	Handler PostClustersIDReloadHandler
}

func (o *PostClustersIDReload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostClustersIDReloadParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
