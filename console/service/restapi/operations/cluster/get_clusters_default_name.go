// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetClustersDefaultNameHandlerFunc turns a function with the right signature into a get clusters default name handler
type GetClustersDefaultNameHandlerFunc func(GetClustersDefaultNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetClustersDefaultNameHandlerFunc) Handle(params GetClustersDefaultNameParams) middleware.Responder {
	return fn(params)
}

// GetClustersDefaultNameHandler interface for that can handle valid get clusters default name params
type GetClustersDefaultNameHandler interface {
	Handle(GetClustersDefaultNameParams) middleware.Responder
}

// NewGetClustersDefaultName creates a new http.Handler for the get clusters default name operation
func NewGetClustersDefaultName(ctx *middleware.Context, handler GetClustersDefaultNameHandler) *GetClustersDefaultName {
	return &GetClustersDefaultName{Context: ctx, Handler: handler}
}

/*
	GetClustersDefaultName swagger:route GET /clusters/default_name cluster getClustersDefaultName

Get cluster default name
*/
type GetClustersDefaultName struct {
	Context *middleware.Context
	Handler GetClustersDefaultNameHandler
}

func (o *GetClustersDefaultName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetClustersDefaultNameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
