// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetClustersParams creates a new GetClustersParams object
//
// There are no default values defined in the spec.
func NewGetClustersParams() GetClustersParams {

	return GetClustersParams{}
}

// GetClustersParams contains all the bound params for the get clusters operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetClusters
type GetClustersParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Created at after this date
	  In: query
	*/
	CreatedAtFrom *strfmt.DateTime
	/*Created at till this date
	  In: query
	*/
	CreatedAtTo *strfmt.DateTime
	/*Filter by environment
	  In: query
	*/
	Environment *string
	/*
	  In: query
	*/
	Limit *int64
	/*Filter by location
	  In: query
	*/
	Location *string
	/*Filter by name
	  In: query
	*/
	Name *string
	/*
	  In: query
	*/
	Offset *int64
	/*Filter by postgres_version
	  In: query
	*/
	PostgresVersion *int64
	/*
	  Required: true
	  In: query
	*/
	ProjectID int64
	/*Filter by server_count
	  In: query
	*/
	ServerCount *int64
	/*Sort by fields. Example: sort_by=id,-name,created_at,updated_at
	Supported values:
	- id
	- name
	- created_at
	- updated_at
	- environment
	- project
	- status
	- location
	- server_count
	- postgres_version

	 In: query
	*/
	SortBy *string
	/*Filter by status
	  In: query
	*/
	Status *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetClustersParams() beforehand.
func (o *GetClustersParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCreatedAtFrom, qhkCreatedAtFrom, _ := qs.GetOK("created_at_from")
	if err := o.bindCreatedAtFrom(qCreatedAtFrom, qhkCreatedAtFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qCreatedAtTo, qhkCreatedAtTo, _ := qs.GetOK("created_at_to")
	if err := o.bindCreatedAtTo(qCreatedAtTo, qhkCreatedAtTo, route.Formats); err != nil {
		res = append(res, err)
	}

	qEnvironment, qhkEnvironment, _ := qs.GetOK("environment")
	if err := o.bindEnvironment(qEnvironment, qhkEnvironment, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qLocation, qhkLocation, _ := qs.GetOK("location")
	if err := o.bindLocation(qLocation, qhkLocation, route.Formats); err != nil {
		res = append(res, err)
	}

	qName, qhkName, _ := qs.GetOK("name")
	if err := o.bindName(qName, qhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qPostgresVersion, qhkPostgresVersion, _ := qs.GetOK("postgres_version")
	if err := o.bindPostgresVersion(qPostgresVersion, qhkPostgresVersion, route.Formats); err != nil {
		res = append(res, err)
	}

	qProjectID, qhkProjectID, _ := qs.GetOK("project_id")
	if err := o.bindProjectID(qProjectID, qhkProjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	qServerCount, qhkServerCount, _ := qs.GetOK("server_count")
	if err := o.bindServerCount(qServerCount, qhkServerCount, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy, qhkSortBy, _ := qs.GetOK("sort_by")
	if err := o.bindSortBy(qSortBy, qhkSortBy, route.Formats); err != nil {
		res = append(res, err)
	}

	qStatus, qhkStatus, _ := qs.GetOK("status")
	if err := o.bindStatus(qStatus, qhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCreatedAtFrom binds and validates parameter CreatedAtFrom from query.
func (o *GetClustersParams) bindCreatedAtFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("created_at_from", "query", "strfmt.DateTime", raw)
	}
	o.CreatedAtFrom = (value.(*strfmt.DateTime))

	if err := o.validateCreatedAtFrom(formats); err != nil {
		return err
	}

	return nil
}

// validateCreatedAtFrom carries on validations for parameter CreatedAtFrom
func (o *GetClustersParams) validateCreatedAtFrom(formats strfmt.Registry) error {

	if err := validate.FormatOf("created_at_from", "query", "date-time", o.CreatedAtFrom.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindCreatedAtTo binds and validates parameter CreatedAtTo from query.
func (o *GetClustersParams) bindCreatedAtTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("created_at_to", "query", "strfmt.DateTime", raw)
	}
	o.CreatedAtTo = (value.(*strfmt.DateTime))

	if err := o.validateCreatedAtTo(formats); err != nil {
		return err
	}

	return nil
}

// validateCreatedAtTo carries on validations for parameter CreatedAtTo
func (o *GetClustersParams) validateCreatedAtTo(formats strfmt.Registry) error {

	if err := validate.FormatOf("created_at_to", "query", "date-time", o.CreatedAtTo.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindEnvironment binds and validates parameter Environment from query.
func (o *GetClustersParams) bindEnvironment(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Environment = &raw

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetClustersParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

// bindLocation binds and validates parameter Location from query.
func (o *GetClustersParams) bindLocation(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Location = &raw

	return nil
}

// bindName binds and validates parameter Name from query.
func (o *GetClustersParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Name = &raw

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetClustersParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

// bindPostgresVersion binds and validates parameter PostgresVersion from query.
func (o *GetClustersParams) bindPostgresVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("postgres_version", "query", "int64", raw)
	}
	o.PostgresVersion = &value

	return nil
}

// bindProjectID binds and validates parameter ProjectID from query.
func (o *GetClustersParams) bindProjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("project_id", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("project_id", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("project_id", "query", "int64", raw)
	}
	o.ProjectID = value

	return nil
}

// bindServerCount binds and validates parameter ServerCount from query.
func (o *GetClustersParams) bindServerCount(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("server_count", "query", "int64", raw)
	}
	o.ServerCount = &value

	return nil
}

// bindSortBy binds and validates parameter SortBy from query.
func (o *GetClustersParams) bindSortBy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SortBy = &raw

	return nil
}

// bindStatus binds and validates parameter Status from query.
func (o *GetClustersParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Status = &raw

	return nil
}
