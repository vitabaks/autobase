// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetClustersURL generates an URL for the get clusters operation
type GetClustersURL struct {
	CreatedAtFrom   *strfmt.DateTime
	CreatedAtTo     *strfmt.DateTime
	Environment     *string
	Limit           *int64
	Location        *string
	Name            *string
	Offset          *int64
	PostgresVersion *int64
	ProjectID       int64
	ServerCount     *int64
	SortBy          *string
	Status          *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetClustersURL) WithBasePath(bp string) *GetClustersURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetClustersURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetClustersURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/clusters"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api/v1"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var createdAtFromQ string
	if o.CreatedAtFrom != nil {
		createdAtFromQ = o.CreatedAtFrom.String()
	}
	if createdAtFromQ != "" {
		qs.Set("created_at_from", createdAtFromQ)
	}

	var createdAtToQ string
	if o.CreatedAtTo != nil {
		createdAtToQ = o.CreatedAtTo.String()
	}
	if createdAtToQ != "" {
		qs.Set("created_at_to", createdAtToQ)
	}

	var environmentQ string
	if o.Environment != nil {
		environmentQ = *o.Environment
	}
	if environmentQ != "" {
		qs.Set("environment", environmentQ)
	}

	var limitQ string
	if o.Limit != nil {
		limitQ = swag.FormatInt64(*o.Limit)
	}
	if limitQ != "" {
		qs.Set("limit", limitQ)
	}

	var locationQ string
	if o.Location != nil {
		locationQ = *o.Location
	}
	if locationQ != "" {
		qs.Set("location", locationQ)
	}

	var nameQ string
	if o.Name != nil {
		nameQ = *o.Name
	}
	if nameQ != "" {
		qs.Set("name", nameQ)
	}

	var offsetQ string
	if o.Offset != nil {
		offsetQ = swag.FormatInt64(*o.Offset)
	}
	if offsetQ != "" {
		qs.Set("offset", offsetQ)
	}

	var postgresVersionQ string
	if o.PostgresVersion != nil {
		postgresVersionQ = swag.FormatInt64(*o.PostgresVersion)
	}
	if postgresVersionQ != "" {
		qs.Set("postgres_version", postgresVersionQ)
	}

	projectIDQ := swag.FormatInt64(o.ProjectID)
	if projectIDQ != "" {
		qs.Set("project_id", projectIDQ)
	}

	var serverCountQ string
	if o.ServerCount != nil {
		serverCountQ = swag.FormatInt64(*o.ServerCount)
	}
	if serverCountQ != "" {
		qs.Set("server_count", serverCountQ)
	}

	var sortByQ string
	if o.SortBy != nil {
		sortByQ = *o.SortBy
	}
	if sortByQ != "" {
		qs.Set("sort_by", sortByQ)
	}

	var statusQ string
	if o.Status != nil {
		statusQ = *o.Status
	}
	if statusQ != "" {
		qs.Set("status", statusQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetClustersURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetClustersURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetClustersURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetClustersURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetClustersURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetClustersURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
