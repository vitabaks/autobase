// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for autobase console",
    "title": "autobase console",
    "version": "2.2.0"
  },
  "host": "localhost:8080",
  "basePath": "/api/v1",
  "paths": {
    "/clusters": {
      "get": {
        "tags": [
          "cluster"
        ],
        "summary": "Get info about clusters",
        "parameters": [
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "project_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Filter by name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by location",
            "name": "location",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by environment",
            "name": "environment",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Filter by server_count",
            "name": "server_count",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Filter by postgres_version",
            "name": "postgres_version",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Created at after this date",
            "name": "created_at_from",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Created at till this date",
            "name": "created_at_to",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort by fields. Example: sort_by=id,-name,created_at,updated_at\n Supported values:\n - id\n - name\n - created_at\n - updated_at\n - environment\n - project\n - status\n - location\n - server_count\n - postgres_version\n",
            "name": "sort_by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClustersInfo"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Create new cluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ClusterCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClusterCreate"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/default_name": {
      "get": {
        "tags": [
          "cluster"
        ],
        "summary": "Get cluster default name",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClusterDefaultName"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}": {
      "get": {
        "tags": [
          "cluster"
        ],
        "summary": "Get cluster info",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClusterInfo"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "cluster"
        ],
        "summary": "Delete cluster (from the console database)",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}/refresh": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Refresh cluster info (from Patroni API)",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClusterInfo"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}/reinit": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Reinit cluster",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ClusterReinit"
            }
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClusterCreate"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}/reload": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Reload cluster",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ClusterReload"
            }
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClusterCreate"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}/remove": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Remove cluster",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ClusterRemove"
            }
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}/restart": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Restart cluster",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ClusterRestart"
            }
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClusterCreate"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}/start": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Start cluster",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ClusterStart"
            }
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClusterCreate"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}/stop": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Stop cluster",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ClusterStop"
            }
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClusterCreate"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/database/extensions": {
      "get": {
        "tags": [
          "dictionary"
        ],
        "summary": "Info about available database extensions",
        "parameters": [
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "enum": [
              "all",
              "contrib",
              "third_party"
            ],
            "type": "string",
            "default": "all",
            "name": "extension_type",
            "in": "query"
          },
          {
            "type": "string",
            "name": "postgres_version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.DatabaseExtensions"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/environments": {
      "get": {
        "tags": [
          "environment"
        ],
        "summary": "Get environments list",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.EnvironmentsList"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "environment"
        ],
        "summary": "Create environment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.Environment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.Environment"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/environments/{id}": {
      "delete": {
        "tags": [
          "environment"
        ],
        "summary": "Delete environment",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/external/deployments": {
      "get": {
        "tags": [
          "dictionary"
        ],
        "summary": "Get full info about available external deployments",
        "parameters": [
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.DeploymentsInfo"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/operations": {
      "get": {
        "tags": [
          "operation"
        ],
        "summary": "Get operations list for current project",
        "parameters": [
          {
            "type": "integer",
            "description": "Required parameter for filter",
            "name": "project_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Operations started after this date",
            "name": "start_date",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Operations started till this date",
            "name": "end_date",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Filter by cluster_name",
            "name": "cluster_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by environment",
            "name": "environment",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort by fields. Example: sort_by=cluster_name,-type,status,id,created_at,updated_at\n Supported valuese:\n - id\n - cluster_name\n - type\n - status\n - started_at\n - updated_at\n - cluster\n - environment\n",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.OperationsList"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/operations/{id}/log": {
      "get": {
        "consumes": [
          "plain/text"
        ],
        "tags": [
          "operation"
        ],
        "summary": "Get operation log by operation_id",
        "parameters": [
          {
            "type": "integer",
            "description": "Operation id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "headers": {
              "content-type": {
                "type": "string"
              },
              "x-log-completed": {
                "type": "boolean"
              }
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/postgres_versions": {
      "get": {
        "tags": [
          "dictionary"
        ],
        "summary": "Get supported postgres versions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.PostgresVersions"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get projects list",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ProjectsList"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "project"
        ],
        "summary": "Create new project",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ProjectCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.Project"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/projects/{id}": {
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "Delete project",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "project"
        ],
        "summary": "Change project",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ProjectPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.Project"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/secrets": {
      "get": {
        "tags": [
          "secret"
        ],
        "summary": "Get secrets list",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "project_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Filter by name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort by fields. Example: sort_by=id,name,-type,created_at,updated_at",
            "name": "sort_by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.SecretInfoList"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "secret"
        ],
        "summary": "Create new secret",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.SecretCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.SecretInfo"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/secrets/{id}": {
      "delete": {
        "tags": [
          "secret"
        ],
        "summary": "Delete secret",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "secret"
        ],
        "summary": "Change secret",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.SecretPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.SecretInfo"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/servers/{id}": {
      "delete": {
        "tags": [
          "cluster"
        ],
        "summary": "Delete server (from the console database)",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK",
            "headers": {
              "x-cluster-id": {
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "setting"
        ],
        "summary": "Get settings",
        "parameters": [
          {
            "type": "string",
            "description": "Filter by name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.Settings"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "setting"
        ],
        "summary": "Create new setting",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.CreateSetting"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.Setting"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/settings/{name}": {
      "patch": {
        "tags": [
          "setting"
        ],
        "summary": "Changed setting",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ChangeSetting"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.Setting"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get version of API service",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.Version"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ClusterInfo": {
      "description": "Cluster info",
      "type": "object",
      "properties": {
        "cluster_location": {
          "description": "Code of location",
          "type": "string",
          "example": "eu-north-1"
        },
        "connection_info": {
          "type": "object"
        },
        "creation_time": {
          "type": "string",
          "format": "date-time",
          "example": "16.10.2023T11:20:00Z"
        },
        "description": {
          "type": "string"
        },
        "environment": {
          "type": "string",
          "example": "production"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "example": "drm-prod-pgcluster"
        },
        "postgres_version": {
          "type": "integer",
          "format": "int32",
          "example": 15
        },
        "project_name": {
          "description": "Project for cluster",
          "type": "string"
        },
        "servers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterInfo.Instance"
          }
        },
        "status": {
          "type": "string",
          "example": "healthy"
        }
      }
    },
    "ClusterInfo.AdditionalSettings": {
      "description": "Additional settings for cluster",
      "type": "object",
      "properties": {
        "connection_info": {
          "type": "object"
        }
      }
    },
    "ClusterInfo.Instance": {
      "description": "Instance info for current cluster",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "ip": {
          "type": "string",
          "example": "10.128.64.141"
        },
        "lag": {
          "type": "integer",
          "format": "int64",
          "x-nullable": true,
          "example": 0
        },
        "name": {
          "type": "string",
          "example": "pgnode1"
        },
        "pending_restart": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "role": {
          "type": "string",
          "example": "leader"
        },
        "status": {
          "type": "string"
        },
        "tags": {
          "type": "object"
        },
        "timeline": {
          "type": "integer",
          "format": "int64",
          "x-nullable": true,
          "example": 1
        }
      }
    },
    "Deployment.CloudImage": {
      "type": "object",
      "properties": {
        "arch": {
          "type": "string",
          "example": "amd64"
        },
        "image": {
          "type": "object",
          "example": "{\"server_image\": \"ami-078b3985bbc361448\"}"
        },
        "os_name": {
          "type": "string",
          "example": "Ubuntu"
        },
        "os_version": {
          "type": "string",
          "example": "22.04 LTS"
        },
        "updated_at": {
          "type": "string",
          "format": "datetime"
        }
      }
    },
    "Deployment.InstanceType": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "m5.2xlarge"
        },
        "cpu": {
          "type": "integer",
          "example": 8
        },
        "currency": {
          "description": "Price currency",
          "type": "string",
          "example": "$"
        },
        "price_hourly": {
          "description": "Price for 1 instance by hour",
          "type": "number",
          "example": 0.01
        },
        "price_monthly": {
          "description": "Price for 1 instance by month",
          "type": "number",
          "example": 1.2
        },
        "ram": {
          "type": "integer",
          "example": 256
        },
        "shared_cpu": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "DeploymentInfo.CloudRegion": {
      "type": "object",
      "properties": {
        "code": {
          "description": "unique parameter for DB",
          "type": "string",
          "example": "north_america"
        },
        "datacenters": {
          "description": "List of datacenters for this region",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "cloud_image": {
                "$ref": "#/definitions/Deployment.CloudImage"
              },
              "code": {
                "type": "string",
                "example": "ca-central-1"
              },
              "location": {
                "type": "string",
                "example": "Canada (central)"
              }
            }
          }
        },
        "name": {
          "description": "Field for web",
          "type": "string",
          "example": "North America"
        }
      }
    },
    "Meta.Pagination": {
      "type": "object",
      "title": "Pagination info for list requests",
      "properties": {
        "count": {
          "type": "integer",
          "x-nullable": true
        },
        "limit": {
          "type": "integer",
          "x-nullable": true
        },
        "offset": {
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "Request.ChangeSetting": {
      "description": "Change setting",
      "type": "object",
      "properties": {
        "value": {
          "type": "object",
          "x-nullable": true
        }
      }
    },
    "Request.ClusterCreate": {
      "description": "Request struct for cluster creation",
      "type": "object",
      "properties": {
        "auth_info": {
          "description": "Info for deployment system authorization",
          "type": "object",
          "properties": {
            "secret_id": {
              "type": "integer",
              "example": 1
            }
          }
        },
        "description": {
          "description": "Info about cluster",
          "type": "string"
        },
        "environment_id": {
          "description": "Project environment",
          "type": "integer"
        },
        "envs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "extra_vars": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "example": "drm-prod-pgcluster"
        },
        "project_id": {
          "description": "Project for new cluster",
          "type": "integer"
        }
      }
    },
    "Request.ClusterReinit": {
      "description": "Reinit cluster",
      "type": "object"
    },
    "Request.ClusterReload": {
      "description": "Reload cluster",
      "type": "object"
    },
    "Request.ClusterRemove": {
      "description": "Remove cluster",
      "type": "object"
    },
    "Request.ClusterRestart": {
      "description": "Restart cluster",
      "type": "object"
    },
    "Request.ClusterStart": {
      "description": "Start cluster",
      "type": "object"
    },
    "Request.ClusterStop": {
      "description": "Stop cluster",
      "type": "object"
    },
    "Request.CreateSetting": {
      "description": "Create new setting",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      }
    },
    "Request.Environment": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "environment for production"
        },
        "name": {
          "type": "string",
          "example": "production"
        }
      }
    },
    "Request.ProjectCreate": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Default project"
        },
        "name": {
          "type": "string",
          "example": "default"
        }
      }
    },
    "Request.ProjectPatch": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "Request.SecretCreate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "aws key"
        },
        "project_id": {
          "type": "integer",
          "example": 1
        },
        "type": {
          "$ref": "#/definitions/Secret.Type"
        },
        "value": {
          "type": "object",
          "$ref": "#/definitions/Request.SecretValue"
        }
      }
    },
    "Request.SecretPatch": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-nullable": true,
          "example": "aws key"
        },
        "type": {
          "type": "string",
          "x-nullable": true,
          "example": "aws"
        },
        "value": {
          "description": "Secret value in base64",
          "type": "string",
          "x-nullable": true,
          "example": "c2VjcmV0"
        }
      }
    },
    "Request.SecretValue": {
      "type": "object",
      "properties": {
        "aws": {
          "type": "object",
          "x-nullable": true,
          "$ref": "#/definitions/Request.SecretValue.Aws"
        },
        "azure": {
          "type": "object",
          "x-nullable": true,
          "$ref": "#/definitions/Request.SecretValue.Azure"
        },
        "digitalocean": {
          "type": "object",
          "x-nullable": true,
          "$ref": "#/definitions/Request.SecretValue.DigitalOcean"
        },
        "gcp": {
          "type": "object",
          "x-nullable": true,
          "$ref": "#/definitions/Request.SecretValue.Gcp"
        },
        "hetzner": {
          "type": "object",
          "x-nullable": true,
          "$ref": "#/definitions/Request.SecretValue.Hetzner"
        },
        "password": {
          "type": "object",
          "x-nullable": true,
          "$ref": "#/definitions/Request.SecretValue.Password"
        },
        "ssh_key": {
          "type": "object",
          "x-nullable": true,
          "$ref": "#/definitions/Request.SecretValue.SshKey"
        }
      }
    },
    "Request.SecretValue.Aws": {
      "type": "object",
      "properties": {
        "AWS_ACCESS_KEY_ID": {
          "type": "string"
        },
        "AWS_SECRET_ACCESS_KEY": {
          "type": "string"
        }
      }
    },
    "Request.SecretValue.Azure": {
      "type": "object",
      "properties": {
        "AZURE_CLIENT_ID": {
          "type": "string"
        },
        "AZURE_SECRET": {
          "type": "string"
        },
        "AZURE_SUBSCRIPTION_ID": {
          "type": "string"
        },
        "AZURE_TENANT": {
          "type": "string"
        }
      }
    },
    "Request.SecretValue.DigitalOcean": {
      "type": "object",
      "properties": {
        "DO_API_TOKEN": {
          "type": "string"
        }
      }
    },
    "Request.SecretValue.Gcp": {
      "type": "object",
      "properties": {
        "GCP_SERVICE_ACCOUNT_CONTENTS": {
          "type": "string"
        }
      }
    },
    "Request.SecretValue.Hetzner": {
      "type": "object",
      "properties": {
        "HCLOUD_API_TOKEN": {
          "type": "string"
        }
      }
    },
    "Request.SecretValue.Password": {
      "type": "object",
      "properties": {
        "PASSWORD": {
          "type": "string"
        },
        "USERNAME": {
          "type": "string"
        }
      }
    },
    "Request.SecretValue.SshKey": {
      "type": "object",
      "properties": {
        "SSH_PRIVATE_KEY": {
          "type": "string"
        }
      }
    },
    "Response.ClusterCreate": {
      "description": "Response struct for cluster creation",
      "type": "object",
      "properties": {
        "cluster_id": {
          "description": "unique code for cluster",
          "type": "integer"
        },
        "operation_id": {
          "description": "operation id",
          "type": "integer"
        }
      }
    },
    "Response.ClusterDefaultName": {
      "description": "Response struct for cluster default name",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "postgres-cluster-01"
        }
      }
    },
    "Response.ClusterLogs": {
      "description": "Logs for cluster",
      "type": "object",
      "properties": {
        "logs": {
          "description": "all available logs",
          "type": "string"
        }
      }
    },
    "Response.ClustersInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterInfo"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.DatabaseExtension": {
      "description": "Info about database extension",
      "type": "object",
      "properties": {
        "contrib": {
          "type": "boolean",
          "example": false
        },
        "description": {
          "type": "string",
          "x-nullable": true,
          "example": "Citus is PostgreSQL extension that transforms..."
        },
        "image": {
          "type": "string",
          "x-nullable": true,
          "example": "citus.png"
        },
        "name": {
          "type": "string",
          "example": "Citus"
        },
        "postgres_max_version": {
          "type": "string",
          "x-nullable": true,
          "example": "16"
        },
        "postgres_min_version": {
          "type": "string",
          "x-nullable": true,
          "example": "11"
        },
        "url": {
          "type": "string",
          "x-nullable": true,
          "example": "https://github.com/citusdata/citus"
        }
      }
    },
    "Response.DatabaseExtensions": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.DatabaseExtension"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.DeploymentInfo": {
      "description": "Deployment info",
      "type": "object",
      "properties": {
        "avatar_url": {
          "type": "string"
        },
        "cloud_regions": {
          "description": "List of available regions for current deployment",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentInfo.CloudRegion"
          }
        },
        "code": {
          "type": "string",
          "example": "aws"
        },
        "description": {
          "type": "string",
          "example": "Amazon web services"
        },
        "instance_types": {
          "description": "Lists of available instance types",
          "type": "object",
          "properties": {
            "large": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deployment.InstanceType"
              }
            },
            "medium": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deployment.InstanceType"
              }
            },
            "small": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deployment.InstanceType"
              },
              "x-nullable": true
            }
          }
        },
        "volumes": {
          "description": "Hardware disks info",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "currency": {
                "description": "Price currency",
                "type": "string",
                "example": "$"
              },
              "is_default": {
                "description": "Default volume",
                "type": "boolean",
                "x-nullable": true,
                "example": false
              },
              "max_size": {
                "description": "Sets in GB",
                "type": "integer",
                "example": 256
              },
              "min_size": {
                "description": "Sets in GB",
                "type": "integer",
                "example": 10
              },
              "price_monthly": {
                "description": "Price for disk by months",
                "type": "number",
                "example": 0.1
              },
              "volume_description": {
                "description": "Volume description",
                "type": "string",
                "example": "General purpose SSD disk"
              },
              "volume_type": {
                "description": "Volume type",
                "type": "string",
                "example": "gp3"
              }
            }
          }
        }
      }
    },
    "Response.DeploymentsInfo": {
      "type": "object",
      "title": "Deployments info",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.DeploymentInfo"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.Environment": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "16.10.2023T11:20:00Z"
        },
        "description": {
          "type": "string",
          "x-nullable": true,
          "example": "environment for production"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "production"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "16.10.2023T11:20:00Z"
        }
      }
    },
    "Response.EnvironmentsList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.Environment"
          }
        },
        "meta": {
          "type": "object",
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.Error": {
      "type": "object",
      "title": "Error object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "Response.Operation": {
      "type": "object",
      "properties": {
        "cluster_name": {
          "type": "string",
          "example": "drm-prod-cluster"
        },
        "environment": {
          "type": "string",
          "example": "production"
        },
        "finished": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "16.10.2023T11:20:00Z"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "example": "16.10.2023T11:20:00Z"
        },
        "status": {
          "type": "string",
          "example": "success"
        },
        "type": {
          "type": "string",
          "example": "deploy"
        }
      }
    },
    "Response.OperationsList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.Operation"
          }
        },
        "meta": {
          "type": "object",
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.PostgresVersion": {
      "type": "object",
      "properties": {
        "end_of_life": {
          "type": "string",
          "format": "date",
          "example": "2022-11-10"
        },
        "major_version": {
          "type": "integer",
          "example": 10
        },
        "release_date": {
          "type": "string",
          "format": "date",
          "example": "2017-10-05"
        }
      }
    },
    "Response.PostgresVersions": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.PostgresVersion"
          }
        }
      }
    },
    "Response.Project": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "16.10.2023T11:20:00Z"
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "16.10.2023T11:20:00Z"
        }
      }
    },
    "Response.ProjectsList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.Project"
          }
        },
        "meta": {
          "type": "object",
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.SecretInfo": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "16.10.2023T11:20:00Z"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "is_used": {
          "type": "boolean",
          "example": "true"
        },
        "name": {
          "type": "string",
          "example": "aws key"
        },
        "project_id": {
          "type": "integer",
          "example": 1
        },
        "type": {
          "$ref": "#/definitions/Secret.Type"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "16.10.2023T11:20:00Z"
        },
        "used_by_clusters": {
          "type": "string",
          "x-nullable": true,
          "example": "mds-prod, drm-prod"
        }
      }
    },
    "Response.SecretInfoList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.SecretInfo"
          }
        },
        "meta": {
          "type": "object",
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.Setting": {
      "description": "Setting",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "datetime"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "datetime",
          "x-nullable": true
        },
        "value": {
          "type": "object"
        }
      }
    },
    "Response.Settings": {
      "description": "List of settings",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.Setting"
          }
        },
        "mete": {
          "type": "object",
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.Version": {
      "type": "object",
      "title": "Version response",
      "properties": {
        "version": {
          "type": "string",
          "example": "v1.0.0"
        }
      }
    },
    "Secret.Type": {
      "type": "string",
      "enum": [
        "aws",
        "gcp",
        "hetzner",
        "ssh_key",
        "digitalocean",
        "password",
        "azure"
      ]
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for autobase console",
    "title": "autobase console",
    "version": "2.2.0"
  },
  "host": "localhost:8080",
  "basePath": "/api/v1",
  "paths": {
    "/clusters": {
      "get": {
        "tags": [
          "cluster"
        ],
        "summary": "Get info about clusters",
        "parameters": [
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "project_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Filter by name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by location",
            "name": "location",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by environment",
            "name": "environment",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Filter by server_count",
            "name": "server_count",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Filter by postgres_version",
            "name": "postgres_version",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Created at after this date",
            "name": "created_at_from",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Created at till this date",
            "name": "created_at_to",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort by fields. Example: sort_by=id,-name,created_at,updated_at\n Supported values:\n - id\n - name\n - created_at\n - updated_at\n - environment\n - project\n - status\n - location\n - server_count\n - postgres_version\n",
            "name": "sort_by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClustersInfo"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Create new cluster",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ClusterCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClusterCreate"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/default_name": {
      "get": {
        "tags": [
          "cluster"
        ],
        "summary": "Get cluster default name",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClusterDefaultName"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}": {
      "get": {
        "tags": [
          "cluster"
        ],
        "summary": "Get cluster info",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClusterInfo"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "cluster"
        ],
        "summary": "Delete cluster (from the console database)",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}/refresh": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Refresh cluster info (from Patroni API)",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ClusterInfo"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}/reinit": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Reinit cluster",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ClusterReinit"
            }
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClusterCreate"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}/reload": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Reload cluster",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ClusterReload"
            }
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClusterCreate"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}/remove": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Remove cluster",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ClusterRemove"
            }
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}/restart": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Restart cluster",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ClusterRestart"
            }
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClusterCreate"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}/start": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Start cluster",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ClusterStart"
            }
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClusterCreate"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/clusters/{id}/stop": {
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Stop cluster",
        "deprecated": true,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ClusterStop"
            }
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ClusterCreate"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/database/extensions": {
      "get": {
        "tags": [
          "dictionary"
        ],
        "summary": "Info about available database extensions",
        "parameters": [
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "enum": [
              "all",
              "contrib",
              "third_party"
            ],
            "type": "string",
            "default": "all",
            "name": "extension_type",
            "in": "query"
          },
          {
            "type": "string",
            "name": "postgres_version",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.DatabaseExtensions"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/environments": {
      "get": {
        "tags": [
          "environment"
        ],
        "summary": "Get environments list",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.EnvironmentsList"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "environment"
        ],
        "summary": "Create environment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.Environment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.Environment"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/environments/{id}": {
      "delete": {
        "tags": [
          "environment"
        ],
        "summary": "Delete environment",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/external/deployments": {
      "get": {
        "tags": [
          "dictionary"
        ],
        "summary": "Get full info about available external deployments",
        "parameters": [
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.DeploymentsInfo"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/operations": {
      "get": {
        "tags": [
          "operation"
        ],
        "summary": "Get operations list for current project",
        "parameters": [
          {
            "type": "integer",
            "description": "Required parameter for filter",
            "name": "project_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Operations started after this date",
            "name": "start_date",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Operations started till this date",
            "name": "end_date",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Filter by cluster_name",
            "name": "cluster_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by status",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by environment",
            "name": "environment",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort by fields. Example: sort_by=cluster_name,-type,status,id,created_at,updated_at\n Supported valuese:\n - id\n - cluster_name\n - type\n - status\n - started_at\n - updated_at\n - cluster\n - environment\n",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.OperationsList"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/operations/{id}/log": {
      "get": {
        "consumes": [
          "plain/text"
        ],
        "tags": [
          "operation"
        ],
        "summary": "Get operation log by operation_id",
        "parameters": [
          {
            "type": "integer",
            "description": "Operation id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "headers": {
              "content-type": {
                "type": "string"
              },
              "x-log-completed": {
                "type": "boolean"
              }
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/postgres_versions": {
      "get": {
        "tags": [
          "dictionary"
        ],
        "summary": "Get supported postgres versions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.PostgresVersions"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "project"
        ],
        "summary": "Get projects list",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.ProjectsList"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "project"
        ],
        "summary": "Create new project",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ProjectCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.Project"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/projects/{id}": {
      "delete": {
        "tags": [
          "project"
        ],
        "summary": "Delete project",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "project"
        ],
        "summary": "Change project",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ProjectPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.Project"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/secrets": {
      "get": {
        "tags": [
          "secret"
        ],
        "summary": "Get secrets list",
        "parameters": [
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "project_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Filter by name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by type",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort by fields. Example: sort_by=id,name,-type,created_at,updated_at",
            "name": "sort_by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.SecretInfoList"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "secret"
        ],
        "summary": "Create new secret",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.SecretCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.SecretInfo"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/secrets/{id}": {
      "delete": {
        "tags": [
          "secret"
        ],
        "summary": "Delete secret",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "secret"
        ],
        "summary": "Change secret",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.SecretPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.SecretInfo"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/servers/{id}": {
      "delete": {
        "tags": [
          "cluster"
        ],
        "summary": "Delete server (from the console database)",
        "parameters": [
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK",
            "headers": {
              "x-cluster-id": {
                "type": "integer"
              }
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "setting"
        ],
        "summary": "Get settings",
        "parameters": [
          {
            "type": "string",
            "description": "Filter by name",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.Settings"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "setting"
        ],
        "summary": "Create new setting",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.CreateSetting"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.Setting"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/settings/{name}": {
      "patch": {
        "tags": [
          "setting"
        ],
        "summary": "Changed setting",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request.ChangeSetting"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.Setting"
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/Response.Error"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get version of API service",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Response.Version"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ClusterInfo": {
      "description": "Cluster info",
      "type": "object",
      "properties": {
        "cluster_location": {
          "description": "Code of location",
          "type": "string",
          "example": "eu-north-1"
        },
        "connection_info": {
          "type": "object"
        },
        "creation_time": {
          "type": "string",
          "format": "date-time",
          "example": "16.10.2023T11:20:00Z"
        },
        "description": {
          "type": "string"
        },
        "environment": {
          "type": "string",
          "example": "production"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "example": "drm-prod-pgcluster"
        },
        "postgres_version": {
          "type": "integer",
          "format": "int32",
          "example": 15
        },
        "project_name": {
          "description": "Project for cluster",
          "type": "string"
        },
        "servers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterInfo.Instance"
          }
        },
        "status": {
          "type": "string",
          "example": "healthy"
        }
      }
    },
    "ClusterInfo.AdditionalSettings": {
      "description": "Additional settings for cluster",
      "type": "object",
      "properties": {
        "connection_info": {
          "type": "object"
        }
      }
    },
    "ClusterInfo.Instance": {
      "description": "Instance info for current cluster",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "ip": {
          "type": "string",
          "example": "10.128.64.141"
        },
        "lag": {
          "type": "integer",
          "format": "int64",
          "x-nullable": true,
          "example": 0
        },
        "name": {
          "type": "string",
          "example": "pgnode1"
        },
        "pending_restart": {
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "role": {
          "type": "string",
          "example": "leader"
        },
        "status": {
          "type": "string"
        },
        "tags": {
          "type": "object"
        },
        "timeline": {
          "type": "integer",
          "format": "int64",
          "x-nullable": true,
          "example": 1
        }
      }
    },
    "Deployment.CloudImage": {
      "type": "object",
      "properties": {
        "arch": {
          "type": "string",
          "example": "amd64"
        },
        "image": {
          "type": "object",
          "example": "{\"server_image\": \"ami-078b3985bbc361448\"}"
        },
        "os_name": {
          "type": "string",
          "example": "Ubuntu"
        },
        "os_version": {
          "type": "string",
          "example": "22.04 LTS"
        },
        "updated_at": {
          "type": "string",
          "format": "datetime"
        }
      }
    },
    "Deployment.InstanceType": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "m5.2xlarge"
        },
        "cpu": {
          "type": "integer",
          "example": 8
        },
        "currency": {
          "description": "Price currency",
          "type": "string",
          "example": "$"
        },
        "price_hourly": {
          "description": "Price for 1 instance by hour",
          "type": "number",
          "example": 0.01
        },
        "price_monthly": {
          "description": "Price for 1 instance by month",
          "type": "number",
          "example": 1.2
        },
        "ram": {
          "type": "integer",
          "example": 256
        },
        "shared_cpu": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "DeploymentInfo.CloudRegion": {
      "type": "object",
      "properties": {
        "code": {
          "description": "unique parameter for DB",
          "type": "string",
          "example": "north_america"
        },
        "datacenters": {
          "description": "List of datacenters for this region",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentInfoCloudRegionDatacentersItems0"
          }
        },
        "name": {
          "description": "Field for web",
          "type": "string",
          "example": "North America"
        }
      }
    },
    "DeploymentInfoCloudRegionDatacentersItems0": {
      "type": "object",
      "properties": {
        "cloud_image": {
          "$ref": "#/definitions/Deployment.CloudImage"
        },
        "code": {
          "type": "string",
          "example": "ca-central-1"
        },
        "location": {
          "type": "string",
          "example": "Canada (central)"
        }
      }
    },
    "Meta.Pagination": {
      "type": "object",
      "title": "Pagination info for list requests",
      "properties": {
        "count": {
          "type": "integer",
          "x-nullable": true
        },
        "limit": {
          "type": "integer",
          "x-nullable": true
        },
        "offset": {
          "type": "integer",
          "x-nullable": true
        }
      }
    },
    "Request.ChangeSetting": {
      "description": "Change setting",
      "type": "object",
      "properties": {
        "value": {
          "type": "object",
          "x-nullable": true
        }
      }
    },
    "Request.ClusterCreate": {
      "description": "Request struct for cluster creation",
      "type": "object",
      "properties": {
        "auth_info": {
          "description": "Info for deployment system authorization",
          "type": "object",
          "properties": {
            "secret_id": {
              "type": "integer",
              "example": 1
            }
          }
        },
        "description": {
          "description": "Info about cluster",
          "type": "string"
        },
        "environment_id": {
          "description": "Project environment",
          "type": "integer"
        },
        "envs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "extra_vars": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "example": "drm-prod-pgcluster"
        },
        "project_id": {
          "description": "Project for new cluster",
          "type": "integer"
        }
      }
    },
    "Request.ClusterReinit": {
      "description": "Reinit cluster",
      "type": "object"
    },
    "Request.ClusterReload": {
      "description": "Reload cluster",
      "type": "object"
    },
    "Request.ClusterRemove": {
      "description": "Remove cluster",
      "type": "object"
    },
    "Request.ClusterRestart": {
      "description": "Restart cluster",
      "type": "object"
    },
    "Request.ClusterStart": {
      "description": "Start cluster",
      "type": "object"
    },
    "Request.ClusterStop": {
      "description": "Stop cluster",
      "type": "object"
    },
    "Request.CreateSetting": {
      "description": "Create new setting",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      }
    },
    "Request.Environment": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "environment for production"
        },
        "name": {
          "type": "string",
          "example": "production"
        }
      }
    },
    "Request.ProjectCreate": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Default project"
        },
        "name": {
          "type": "string",
          "example": "default"
        }
      }
    },
    "Request.ProjectPatch": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "name": {
          "type": "string",
          "x-nullable": true
        }
      }
    },
    "Request.SecretCreate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "aws key"
        },
        "project_id": {
          "type": "integer",
          "example": 1
        },
        "type": {
          "$ref": "#/definitions/Secret.Type"
        },
        "value": {
          "type": "object",
          "$ref": "#/definitions/Request.SecretValue"
        }
      }
    },
    "Request.SecretPatch": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-nullable": true,
          "example": "aws key"
        },
        "type": {
          "type": "string",
          "x-nullable": true,
          "example": "aws"
        },
        "value": {
          "description": "Secret value in base64",
          "type": "string",
          "x-nullable": true,
          "example": "c2VjcmV0"
        }
      }
    },
    "Request.SecretValue": {
      "type": "object",
      "properties": {
        "aws": {
          "type": "object",
          "x-nullable": true,
          "$ref": "#/definitions/Request.SecretValue.Aws"
        },
        "azure": {
          "type": "object",
          "x-nullable": true,
          "$ref": "#/definitions/Request.SecretValue.Azure"
        },
        "digitalocean": {
          "type": "object",
          "x-nullable": true,
          "$ref": "#/definitions/Request.SecretValue.DigitalOcean"
        },
        "gcp": {
          "type": "object",
          "x-nullable": true,
          "$ref": "#/definitions/Request.SecretValue.Gcp"
        },
        "hetzner": {
          "type": "object",
          "x-nullable": true,
          "$ref": "#/definitions/Request.SecretValue.Hetzner"
        },
        "password": {
          "type": "object",
          "x-nullable": true,
          "$ref": "#/definitions/Request.SecretValue.Password"
        },
        "ssh_key": {
          "type": "object",
          "x-nullable": true,
          "$ref": "#/definitions/Request.SecretValue.SshKey"
        }
      }
    },
    "Request.SecretValue.Aws": {
      "type": "object",
      "properties": {
        "AWS_ACCESS_KEY_ID": {
          "type": "string"
        },
        "AWS_SECRET_ACCESS_KEY": {
          "type": "string"
        }
      }
    },
    "Request.SecretValue.Azure": {
      "type": "object",
      "properties": {
        "AZURE_CLIENT_ID": {
          "type": "string"
        },
        "AZURE_SECRET": {
          "type": "string"
        },
        "AZURE_SUBSCRIPTION_ID": {
          "type": "string"
        },
        "AZURE_TENANT": {
          "type": "string"
        }
      }
    },
    "Request.SecretValue.DigitalOcean": {
      "type": "object",
      "properties": {
        "DO_API_TOKEN": {
          "type": "string"
        }
      }
    },
    "Request.SecretValue.Gcp": {
      "type": "object",
      "properties": {
        "GCP_SERVICE_ACCOUNT_CONTENTS": {
          "type": "string"
        }
      }
    },
    "Request.SecretValue.Hetzner": {
      "type": "object",
      "properties": {
        "HCLOUD_API_TOKEN": {
          "type": "string"
        }
      }
    },
    "Request.SecretValue.Password": {
      "type": "object",
      "properties": {
        "PASSWORD": {
          "type": "string"
        },
        "USERNAME": {
          "type": "string"
        }
      }
    },
    "Request.SecretValue.SshKey": {
      "type": "object",
      "properties": {
        "SSH_PRIVATE_KEY": {
          "type": "string"
        }
      }
    },
    "RequestClusterCreateAuthInfo": {
      "description": "Info for deployment system authorization",
      "type": "object",
      "properties": {
        "secret_id": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "Response.ClusterCreate": {
      "description": "Response struct for cluster creation",
      "type": "object",
      "properties": {
        "cluster_id": {
          "description": "unique code for cluster",
          "type": "integer"
        },
        "operation_id": {
          "description": "operation id",
          "type": "integer"
        }
      }
    },
    "Response.ClusterDefaultName": {
      "description": "Response struct for cluster default name",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "postgres-cluster-01"
        }
      }
    },
    "Response.ClusterLogs": {
      "description": "Logs for cluster",
      "type": "object",
      "properties": {
        "logs": {
          "description": "all available logs",
          "type": "string"
        }
      }
    },
    "Response.ClustersInfo": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterInfo"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.DatabaseExtension": {
      "description": "Info about database extension",
      "type": "object",
      "properties": {
        "contrib": {
          "type": "boolean",
          "example": false
        },
        "description": {
          "type": "string",
          "x-nullable": true,
          "example": "Citus is PostgreSQL extension that transforms..."
        },
        "image": {
          "type": "string",
          "x-nullable": true,
          "example": "citus.png"
        },
        "name": {
          "type": "string",
          "example": "Citus"
        },
        "postgres_max_version": {
          "type": "string",
          "x-nullable": true,
          "example": "16"
        },
        "postgres_min_version": {
          "type": "string",
          "x-nullable": true,
          "example": "11"
        },
        "url": {
          "type": "string",
          "x-nullable": true,
          "example": "https://github.com/citusdata/citus"
        }
      }
    },
    "Response.DatabaseExtensions": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.DatabaseExtension"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.DeploymentInfo": {
      "description": "Deployment info",
      "type": "object",
      "properties": {
        "avatar_url": {
          "type": "string"
        },
        "cloud_regions": {
          "description": "List of available regions for current deployment",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentInfo.CloudRegion"
          }
        },
        "code": {
          "type": "string",
          "example": "aws"
        },
        "description": {
          "type": "string",
          "example": "Amazon web services"
        },
        "instance_types": {
          "description": "Lists of available instance types",
          "type": "object",
          "properties": {
            "large": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deployment.InstanceType"
              }
            },
            "medium": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deployment.InstanceType"
              }
            },
            "small": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deployment.InstanceType"
              },
              "x-nullable": true
            }
          }
        },
        "volumes": {
          "description": "Hardware disks info",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseDeploymentInfoVolumesItems0"
          }
        }
      }
    },
    "Response.DeploymentsInfo": {
      "type": "object",
      "title": "Deployments info",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.DeploymentInfo"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.Environment": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "16.10.2023T11:20:00Z"
        },
        "description": {
          "type": "string",
          "x-nullable": true,
          "example": "environment for production"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "name": {
          "type": "string",
          "example": "production"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "16.10.2023T11:20:00Z"
        }
      }
    },
    "Response.EnvironmentsList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.Environment"
          }
        },
        "meta": {
          "type": "object",
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.Error": {
      "type": "object",
      "title": "Error object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "Response.Operation": {
      "type": "object",
      "properties": {
        "cluster_name": {
          "type": "string",
          "example": "drm-prod-cluster"
        },
        "environment": {
          "type": "string",
          "example": "production"
        },
        "finished": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "16.10.2023T11:20:00Z"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "example": "16.10.2023T11:20:00Z"
        },
        "status": {
          "type": "string",
          "example": "success"
        },
        "type": {
          "type": "string",
          "example": "deploy"
        }
      }
    },
    "Response.OperationsList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.Operation"
          }
        },
        "meta": {
          "type": "object",
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.PostgresVersion": {
      "type": "object",
      "properties": {
        "end_of_life": {
          "type": "string",
          "format": "date",
          "example": "2022-11-10"
        },
        "major_version": {
          "type": "integer",
          "example": 10
        },
        "release_date": {
          "type": "string",
          "format": "date",
          "example": "2017-10-05"
        }
      }
    },
    "Response.PostgresVersions": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.PostgresVersion"
          }
        }
      }
    },
    "Response.Project": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "16.10.2023T11:20:00Z"
        },
        "description": {
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "16.10.2023T11:20:00Z"
        }
      }
    },
    "Response.ProjectsList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.Project"
          }
        },
        "meta": {
          "type": "object",
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.SecretInfo": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "16.10.2023T11:20:00Z"
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "is_used": {
          "type": "boolean",
          "example": "true"
        },
        "name": {
          "type": "string",
          "example": "aws key"
        },
        "project_id": {
          "type": "integer",
          "example": 1
        },
        "type": {
          "$ref": "#/definitions/Secret.Type"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-nullable": true,
          "example": "16.10.2023T11:20:00Z"
        },
        "used_by_clusters": {
          "type": "string",
          "x-nullable": true,
          "example": "mds-prod, drm-prod"
        }
      }
    },
    "Response.SecretInfoList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.SecretInfo"
          }
        },
        "meta": {
          "type": "object",
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.Setting": {
      "description": "Setting",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "datetime"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "datetime",
          "x-nullable": true
        },
        "value": {
          "type": "object"
        }
      }
    },
    "Response.Settings": {
      "description": "List of settings",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response.Setting"
          }
        },
        "mete": {
          "type": "object",
          "$ref": "#/definitions/Meta.Pagination"
        }
      }
    },
    "Response.Version": {
      "type": "object",
      "title": "Version response",
      "properties": {
        "version": {
          "type": "string",
          "example": "v1.0.0"
        }
      }
    },
    "ResponseDeploymentInfoInstanceTypes": {
      "description": "Lists of available instance types",
      "type": "object",
      "properties": {
        "large": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Deployment.InstanceType"
          }
        },
        "medium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Deployment.InstanceType"
          }
        },
        "small": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Deployment.InstanceType"
          },
          "x-nullable": true
        }
      }
    },
    "ResponseDeploymentInfoVolumesItems0": {
      "type": "object",
      "properties": {
        "currency": {
          "description": "Price currency",
          "type": "string",
          "example": "$"
        },
        "is_default": {
          "description": "Default volume",
          "type": "boolean",
          "x-nullable": true,
          "example": false
        },
        "max_size": {
          "description": "Sets in GB",
          "type": "integer",
          "example": 256
        },
        "min_size": {
          "description": "Sets in GB",
          "type": "integer",
          "example": 10
        },
        "price_monthly": {
          "description": "Price for disk by months",
          "type": "number",
          "example": 0.1
        },
        "volume_description": {
          "description": "Volume description",
          "type": "string",
          "example": "General purpose SSD disk"
        },
        "volume_type": {
          "description": "Volume type",
          "type": "string",
          "example": "gp3"
        }
      }
    },
    "Secret.Type": {
      "type": "string",
      "enum": [
        "aws",
        "gcp",
        "hetzner",
        "ssh_key",
        "digitalocean",
        "password",
        "azure"
      ]
    }
  }
}`))
}
